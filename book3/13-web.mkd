


Utilizzo di servizi Web
=======================


Una volta che fu più semplice scambiare i documenti via HTTP e analizzarli utilizzando appositi script, non passò molto tempo prima che venissero sviluppati e prodotti documenti realizzati specificamente per essere utilizzati da altri programmi (ovvero pagine HTML destinate ad essere visualizzate in un browser).

Esistono due formati principali che utilizziamo per scambiare dati sul Web:

1. L'eXtensible Markup Language o XML, in uso da molto tempo, è più adatto per lo scambio di dati in stile documento.
2. Quando i programmi devono scambiare solo dizionari, elenchi o altre informazioni interne, viene preferita la JavaScript Object Notation o JSON (si veda [www.json.org](http://www.json.org)).

Noi daremo un'occhiata ad entrambi i formati.

eXtensible Markup Language - XML
--------------------------------

XML è molto simile all'HTML, anche se è più strutturato di quest'ultimo.

Ecco un esempio di un documento XML:

~~~~ {.xml}
<person>
  <name>Chuck</name>
  <phone type="intl">
     +1 734 303 4456
   </phone>
   <email hide="yes"/>
</person>
~~~~

Ti suggerisco di pensare questo documento XML come una struttura ad albero in cui è presente un tag principale `person` e altri tag secondari come `phone`, rappresentati come figli dei nodi padre.

![XML rappresentato come albero](height=2.0in@../images/xml-tree)

Analizzare XML
-----------

\index{ElementTree}
\index{ElementTree!fromstring}
\index{ElementTree!find}

Ecco un semplice script che analizza documenti XML e ne estrae alcuni elementi:

\VerbatimInput{../code3/xml1.py}

Tramite la chiamata a `fromstring` abbiamo convertito la rappresentazione a stringa dell'XML in un "albero" di nodi. In questo modo possiamo utilizzare vari metodi che possiamo chiamare per estrarre dati dall'XML.

Ad esempio la funzione `find` scorre l'albero XML e recupera i *nodi* che corrispondono al tag specificato. Ogni nodo può contenere testo, degli attributi (come hide) e alcuni nodi "figli", può contenere a sua volta un altro albero di nodi.

~~~~
Name: Chuck
Attr: yes
~~~~

È possibile utilizzare un parser XML come `ElementTree` anche con file XML molto più complessi di quello utilizzato in questo esempio, avendo a disposizione molte regole per l'interpretazione del codice XML e l'estrazione di dati senza preoccuparci troppo delle regole della sintassi.

Cicli con i nodi degli XML
---------------------

\index{ElementTree!findall}
\index{ElementTree!get}

Spesso abbiamo bisogno di scrivere un ciclo che elabori i vari nodi presenti in XML. Nello script seguente, abbiamo la possibilità di applicare un loop a tutti i nodi `user`:

\VerbatimInput{../code3/xml2.py}

Il metodo `findall` produce un elenco composto da sottoalberi che rappresentano le strutture `user` nel file XML. Quindi tramite un ciclo `for` possiamo esaminare ciascuno dei nodi user e visualizzare gli elementi di testo `name`, `id` e l'attributo `x` del nodo `user`.

~~~~
User count: 2
Name Chuck
Id 001
Attribute 2
Name Brent
Id 009
Attribute 7
~~~~

JavaScript Object Notation - JSON
---------------------------------

\index{JSON}
\index{JavaScript Object Notation}

Il formato JSON si rifà ai formati oggetto e array utilizzati nel linguaggio JavaScript. Ma poiché Python è stato inventato prima di JavaScript, la sua sintassi utilizzata per i dizionari e le liste ha influenzato quelle di JSON. In altre parole il formato di JSON è praticamente una combinazione di quello degli elenchi e dei dizionari Python.

Qui sotto puoi vedere una codifica JSON che è approssimativamente equivalente al XML visto in precedenza:

~~~~ {.json}
{
  "name" : "Chuck",
  "phone" : {
    "type" : "intl",
    "number" : "+1 734 303 4456"
   },
   "email" : {
     "hide" : "yes"
   }
}
~~~~

Avrai notato alcune differenze: per prima cosa, nel formato XML possiamo aggiungere attributi come "intl" al tag "phone", mentre con il formato JSON ciò non è possibile: abbiamo solo coppie chiave-valore. Anche il tag XML "person" è scomparso, sostituito da una serie di parentesi graffe.

In generale le strutture JSON sono più semplici perché JSON dispone di meno funzionalità rispetto al linguaggio XML. Il formato JSON ha però il vantaggio di mappare *direttamente* alcune combinazioni di dizionari ed elenchi di Python. Poiché quasi tutti i linguaggi di programmazione hanno qualcosa di equivalente ai dizionari e agli elenchi di Python, JSON è un formato ideale con cui far scambiare dati a due programmi.

Esso sta rapidamente diventando il formato scelto per quasi tutti gli scambi di dati tra applicazioni grazie alla sua relativa semplicità rispetto al formato XML.

Analizzare codice JSON
------------

Costruiamo il nostro codice JSON annidando dizionari (oggetti) ed elenchi in base alle nostre necessità. In questo esempio vogliamo rappresentare un elenco di utenti in cui ogni utente è una coppia chiave-valore (es.: un dizionario). Quindi abbiamo un elenco di dizionari.

Nel seguente programma usiamo la libreria *json* per analizzare il codice JSON e leggerne i dati. Prova a confrontare i corrispondenti dati in XML e il codice precedente. Il JSON, dato che ha meno dettagli, dobbiamo sapere in anticipo che stiamo ottenendo una lista di utenti e che ogni utente è un set di coppie chiave-valore. Il JSON è più succinto (un vantaggio) ma è anche meno descrittivo (uno svantaggio).

\VerbatimInput{../code3/json2.py}

Se confronti il codice per estrarre i dati dal JSON e dall'XML, vedrai che ciò che otteniamo da *json.loads()* è un elenco Python, che possiamo scorrere con un ciclo `for`, in cui ogni elemento è un dizionario Python. Una volta analizzato il JSON, possiamo usare l'operatore indice per estrarre i vari dati di ciascun utente. Non abbiamo bisogno di utilizzare la libreria JSON per effettuare una ricerca all'interno del JSON analizzato, dal momento che i dati restituiti sono strutture native di Python.

L'output di questo programma è esattamente lo stesso di quello estratto dall'XML precedentemente analizzato.

~~~~
User count: 2
Name Chuck
Id 001
Attribute 2
Name Brent
Id 009
Attribute 7
~~~~

In generale per i servizi web c'è una tendenza ad abbandonare il formato XML in favore del formato JSON; dato che il formato JSON è più semplice e più direttamente associabile alle strutture di dati native che troviamo già presenti nei linguaggi di programmazione, l'analisi e l'estrazione dei dati sono in genere più semplici e dirette. D'altro canto l'XML è più auto-descrittivo e per questo ci sono alcune applicazioni in cui XML risulta essere la scelta migliore. Ad esempio, la maggior parte dei word processor memorizza internamente i documenti utilizzando il formato XML piuttosto che il JSON.

Interfacce per la programmazione di applicazioni
----------------------------------

Ora hai la possibilità di scambiare dati tra applicazioni utilizzando l'HyperText Transport Protocol (HTTP) e due alternative per rappresentare dati complessi scegliendo tra l'eXtensible Markup Language (XML) o il la JavaScript Object Notation (JSON).

Il prossimo passo è iniziare a definire e documentare "contratti" tra le applicazioni che utilizzano queste tecniche. Il nome generico per questi contratti tra applicazioni è *Application Program Interfaces* o API. Quando usiamo un'API generalmente un programma rende disponibili alcuni *servizi* per altre applicazioni e pubblica le API (cioè le "regole") che devono essere seguite per accedervi.

Quando iniziamo a progettare dei programmi dotati di funzionalità che prevedono l'accesso ai servizi forniti da altri programmi, stiamo utilizzando un approccio chiamato *Service-Oriented Architecture* o SOA. L'approccio non è "SOA" quando abbiamo una singola applicazione stand-alone che contiene tutto il codice necessario per far funzionare l'applicazione.

Puoi vedere molti esempi di SOA quando navighi in rete: da un unico sito web puoi prenotare viaggi aerei, hotel e automobili. Naturalmente i dati per gli hotel non sono memorizzati nei computer delle compagnie aeree: piuttosto i server delle compagnie aeree contattano i servizi sui computer dell'hotel e recuperano i dati che poi presentano all'utente. Quando l'utente accetta di effettuare una prenotazione alberghiera utilizzando il sito della compagnia aerea, il sito della compagnia aerea utilizza un altro servizio Web dei sistemi dell'hotel per effettuare concretamente la prenotazione. Quando arriva il momento di addebitare il costo sulla tua carta di credito per l'intera transazione vengono coinvolti anche altri computer.

![Architettura orientata ai servizi (SOA)](height=3.0in@../images/soa)

Un'architettura orientata ai servizi (SOA) presenta molti vantaggi tra cui: (1) mantiene sempre una sola copia di dati (questo è particolarmente importante in casi come prenotazioni di hotel in cui non vogliamo sovrapporre azioni) e (2) i proprietari dei dati possono gestire le regole sull'uso dei propri dati. Con questi vantaggi, un sistema SOA deve essere progettato oculatamente per avere buone prestazioni e soddisfare le esigenze dell'utente.

I servizi messi a disposizione in rete dalle applicazioni tramite le API vengono chiamati *servizi web*.

Servizio web di geocodifica di Google
----------------------------

\index{Google}
\index{geocoding}
\index{web service}

Google ha un eccellente servizio web che ti consente di utilizzare il suo ampio database di informazioni geografiche. Possiamo inviare una stringa di ricerca geografica come "Ann Arbor, MI" alla sua API di geocodifica e ricevere da Google l'ipotesi migliore su dove potremmo trovare in una mappa il nostro target ed ottenere informazioni sui punti di riferimento circostanti.

Il servizio di geocodifica è gratuito ma limitato, rendendo impossibile l'utilizzo illimitato dell'API in un'applicazione commerciale. Tuttavia, se si dispone di dati di sondaggi in cui un utente finale ha inserito una posizione in una casella di immissione a formato libero, è possibile utilizzare questa API per pulire i dati in modo da renderli più gradevoli.

*Quando utilizzi un'API gratuita come l'API di geocodifica di Google, è necessario essere rispettosi nell'uso di queste risorse. Se troppe persone abusano del servizio Google potrebbe abbandonare o ridurre significativamente le funzionalità del suo servizio gratuito.*

\index{rate limiting}

Puoi leggere la documentazione online di questo servizio, che è abbastanza semplice e puoi persino testarlo digitando in un browser il seguente URL:

[http://maps.googleapis.com/maps/api/geocode/json?address=Ann+Arbor%2C+MI](http://maps.googleapis.com/maps/api/geocode/json?address= Ann+ Arbor% 2C + MI)

Assicurati di estrarre l'URL e rimuovere gli spazi prima di incollarlo nel tuo browser.

Il seguente è no script basilare che richiede all'utente una stringa di ricerca, chiama l'API di geocodifica di Google ed estrae informazioni dal JSON ricevuto.

\VerbatimInput{../code3/geojson.py}

Il programma costruisce un URL con la stringa di ricerca come parametro opportunamente codificato, quindi tramite *urllib* recupera il testo dall'API di geocodifica di Google. A differenza di una pagina web fissa, i dati che possiamo ottenere dipendono dai parametri che inviamo e dai dati geografici memorizzati nei server di Google.

Una volta recuperati i JSON, li analizziamo con la libreria *json* e facciamo alcuni controlli per assicurarci di aver ricevuto dati validi, infine estraiamo le informazioni che stiamo cercando.

L'output del programma è il seguente (è stato rimosso parte del codice JSON ricevuto):

~~~~
$ python3 geojson.py
Enter location: Ann Arbor, MI
Retrieving http://maps.googleapis.com/maps/api/
  geocode/json?address=Ann+Arbor%2C+MI
Retrieved 1669 characters
~~~~

~~~~ {.json}
{
    "status": "OK",
    "results": [
        {
            "geometry": {
                "location_type": "APPROXIMATE",
                "location": {
                    "lat": 42.2808256,
                    "lng": -83.7430378
                }
            },
            "address_components": [
                {
                    "long_name": "Ann Arbor",
                    "types": [
                        "locality",
                        "political"
                    ],
                    "short_name": "Ann Arbor"
                }
            ],
            "formatted_address": "Ann Arbor, MI, USA",
            "types": [
                "locality",
                "political"
            ]
        }
    ]
}
lat 42.2808256 lng -83.7430378
Ann Arbor, MI, USA
~~~~

~~~~
Enter location:
~~~~


Puoi scaricare lo script [www.py4e.com/code3/geoxml.py](http://www.py4e.com/code3/geoxml.py) per testare la variante XML dell'API di geocodifica di Google.

Sicurezza e utilizzo delle API
----------------------

\index{OAuth}
\index{API!key}

È abbastanza comune che sia richiesta un qualche tipo di "chiave API" per utilizzare l'API di un vendor. L'idea generale è che vogliono sapere chi e quanto stia usando i loro servizi. Potrebbero offrire degli account gratuiti e a pagamento dei loro servizi o potrebbero avere la politica di limitare il numero di richieste che un singolo individuo può effettuare durante un determinato arco di tempo.

A volte, dopo aver ottenuto la chiave API, è sufficiente includere la chiave come parte dei dati POST o forse come parametro nell'URL di chiamata all'API.

Altre volte, i venditori desiderano una maggiore garanzia sulla fonte delle richieste e quindi pretendono di ricevere messaggi firmati utilizzando chiavi crittografiche condivise segrete. Una tecnologia molto comune utilizzata per firmare le richieste su Internet è *OAuth*. Puoi leggere ulteriori informazioni sul protocollo OAuth su [www.oauth.net](http://www.oauth.net).

Man mano che l'API di Twitter diventava sempre più preziosa, Twitter è passato da un'API pubblica e aperta a un'API che richiedeva l'uso delle firme OAuth per ogni richiesta. Fortunatamente ci sono ancora un certo numero di librerie OAuth convenienti e gratuite, che ti permettono di evitare di scrivere un'implementazione OAuth da zero. Queste librerie hanno complessità variabile e hanno vari gradi di completezza. Il sito web OAuth contiene informazioni su varie librerie OAuth.

Per il nostro prossimo script di esempio scarica i file *twurl.py*, *hidden.py*, *oauth.py* e *twitter1.py* da
[www.py4e.com/code](http://www .py4e.com/code3) e salvali in una cartella del tuo computer.

Per utilizzare questi programmi è necessario che tu disponga di un account Twitter e che autorizzi il tuo codice Python come applicazione, imposti una chiave, secret, un token e un token segreto. Modificherai il file *hidden.py* per inserire questi dati tra le variabili del file:

\VerbatimInput{../code3/hidden.py}

Il servizio web di Twitter è accessibile tramite un URL simile a questo:

<https://api.twitter.com/1.1/statuses/user_timeline.json>

Una volta aggiunte tutte le informazioni di sicurezza, l'URL sarà più simile a:

~~~~
https://api.twitter.com/1.1/statuses/user_timeline.json?count=2
&oauth_version=1.0&oauth_token=101...SGI&screen_name=drchuck
&oauth_nonce=09239679&oauth_timestamp=1380395644
&oauth_signature=rLK...BoD&oauth_consumer_key=h7Lu...GNg
&oauth_signature_method=HMAC-SHA1
~~~~

Puoi leggere le specifiche OAuth se vuoi ottenere maggiori informazioni dei vari parametri che vengono aggiunti per soddisfare i requisiti di sicurezza.

Per i programmi destinati a lavorare con Twitter, abbiamo nascosto tutta la parte più complessa nei file *oauth.py* e *twurl.py*. È sufficiente inserire i segreti in *hidden.py* e inviare l'URL desiderato alla funzione *twurl.augment()*, il codice della libreria aggiungere tutti gli altri parametri all'URL per conto nostro.

Questo programma recupera la cronologia di un particolare utente Twitter e ci restituisce i dati richiesti in una stringa in formato JSON. Visualizziamo semplicemente i primi 250 caratteri della stringa:

\VerbatimInput{../code3/twitter1.py}
\begin{trinketfiles}
../code3/twurl.py
\end{trinketfiles}

Una volta avviato, il programma visualizza l'output seguente:

~~~~
Enter Twitter Account:drchuck
Retrieving https://api.twitter.com/1.1/ ...
[{"created_at":"Sat Sep 28 17:30:25 +0000 2013","
id":384007200990982144,"id_str":"384007200990982144",
"text":"RT @fixpert: See how the Dutch handle traffic
intersections: http:\/\/t.co\/tIiVWtEhj4\n#brilliant",
"source":"web","truncated":false,"in_rep
Remaining 178

Enter Twitter Account:fixpert
Retrieving https://api.twitter.com/1.1/ ...
[{"created_at":"Sat Sep 28 18:03:56 +0000 2013",
"id":384015634108919808,"id_str":"384015634108919808",
"text":"3 months after my freak bocce ball accident,
my wedding ring fits again! :)\n\nhttps:\/\/t.co\/2XmHPx7kgX",
"source":"web","truncated":false,
Remaining 177

Enter Twitter Account:
~~~~

Insieme ai dati della cronologia, Twitter restituisce anche i metadati relativi alla richiesta nelle intestazioni delle risposte HTTP. In particolare l'intestazione *x-rate-limit-remaining* ci informa su quante altre richieste possiamo fare prima di venire bloccati per un breve periodo di tempo. Potrai notare che le richieste rimanenti diminuiscono ogni volta di uno.

Nell'esempio seguente vogliamo recuperare gli amici di Twitter di un utente, analizzare il JSON che riceveremo per estrarre alcune informazioni sugli amici. Inoltre eseguiremo il dump del JSON dopo averlo analizzato e "stampato" con un rientro di quattro caratteri per consentirci di analizzare i dati nel caso volessimo consultare più campi.

\VerbatimInput{../code3/twitter2.py}
\begin{trinketfiles}
../code3/twurl.py
\end{trinketfiles}

Dato che il JSON viene trasformato in una serie di elenchi e dizionari annidati, possiamo usare una combinazione di operazioni su indici e cicli `for` per scorrere le strutture dati scrivendo pochissimo codice Python.

L'output del programma sarà simile al seguente (alcuni elementi dei dati sono stati abbreviati per adattarsi alle dimensioni della pagina):

~~~~
Enter Twitter Account:drchuck
Retrieving https://api.twitter.com/1.1/friends ...
Remaining 14
~~~~

~~~~ {.json}
{
    "next_cursor": 1444171224491980205,
    "users": [
        {
            "id": 662433,
            "followers_count": 28725,
            "status": {
                "text": "@jazzychad I just bought one .__.",
                "created_at": "Fri Sep 20 08:36:34 +0000 2013",
                "retweeted": false,
            },
            "location": "San Francisco, California",
            "screen_name": "leahculver",
            "name": "Leah Culver",
        },
        {
            "id": 40426722,
            "followers_count": 2635,
            "status": {
                "text": "RT @WSJ: Big employers like Google ...",
                "created_at": "Sat Sep 28 19:36:37 +0000 2013",
            },
            "location": "Victoria Canada",
            "screen_name": "_valeriei",
            "name": "Valerie Irvine",
    ],
    "next_cursor_str": "1444171224491980205"
}
~~~~

~~~~
leahculver
   @jazzychad I just bought one .__.
_valeriei
   RT @WSJ: Big employers like Google, AT&amp;T are h
ericbollens
   RT @lukew: sneak peek: my LONG take on the good &a
halherzog
   Learning Objects is 10. We had a cake with the LO,
scweeker
   @DeviceLabDC love it! Now where so I get that "etc

Enter Twitter Account:
~~~~

L'ultima parte dell'output contiene il ciclo for che legge i cinque "amici" più recenti dell'account Twitter *drchuck* e ne visualizza lo stato più recente per ciascuno di questi. Nel JSON che ti viene restituito sono contenuti molti più dati.

Se guardi l'output del programma, è anche possibile vedere che il "trova gli amici" di un determinato account ha una diversa velocità in base al numero di query sulla cronologia che è possibile eseguire per ogni periodo di tempo.

Queste chiavi API sicure consentono a Twitter di sapere con certezza chi sta usando le sue API e i suoi dati. La limitazione della velocità ci consente di eseguire semplici raccolte di dati personali, impedendoci di creare un prodotto che estragga dati dalle API milioni di volte al giorno.

Glossario
--------

**API**
: Application Program Interface - Una forma di contratto che definisce le modalità di interazione tra le componenti di una o più applicazioni.
\index{API}

**ElementTree**
: Una libreria di Python utilizzata per analizzare i dati XML.
\index{ElementTree}

**JSON**
: JavaScript Object Notation. Un formato che consente il markup di dati strutturati sulla base della sintassi degli oggetti JavaScript.
\index{JSON}
\index{JavaScript Object Notation}

**SOA**
: Service-Oriented Architecture. Indica un'applicazione composta da componenti connessi attraverso una rete.
\index{SOA}
\index{Service Oriented Architecture}

**XML**
: eXtensible Markup Language. Un metalinguaggio per la definizione del markup di dati strutturati.
\index{XML}
\index{eXtensible Markup Language}

Esercizi
---------

**Esercizio 1:** Modifica uno degli script [www.py4e.com/code3/geojson.py](http://www.py4e.com/code3/geojson.py) o [www.py4e.com/code3/ geoxml.py](http://www.py4e.com/code3/geoxml.py) in modo da visualizzare i die caratteri del codice paese inseriti dai dati recuperati.
Aggiungi il controllo degli errori in modo che il tuo script non vada in errore se il codice del paese non è presente. Una volta completato con successo questo compito, fagli cercare "Atlantic Ocean" e assicurati che possa gestire luoghi che non si trovano in nessun paese.
