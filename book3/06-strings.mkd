%﻿

Stringhe
=======

Una stringa è una sequenza
----------------------

\index{sequence}
\index{character}
\index{bracket operator}
\index{operator!bracket}

Una stringa è una *sequenza* di caratteri a cui puoi accedere, uno alla volta, con l'operatore parentesi quadre:

~~~~ {.python}
>>> fruit = 'banana'
>>> letter = fruit[1]
~~~~



\index{index}
\index{}

La seconda istruzione estrae il carattere nella posizione 1 dalla stringa contenuta nella variabile `fruit` e la assegna alla variabile `letter`. L'espressione tra parentesi è denominata *indice* e indica quale carattere della sequenza vogliamo (da cui il nome). Ma potrai non ottenere ciò che ti aspetti:

~~~~ {.python}
>>> print(letter)
a
~~~~



Per la maggior parte delle persone, la prima lettera di "banana" è `b`, non `a`. Ma in Python, l'indice indica la posizione uno dall'inizio della stringa mentre la posizione della prima lettera è zero.

~~~~ {.python}
>>> letter = fruit[0]
>>> print(letter)
b
~~~~



Quindi `b` è la lettera 0 ("zero") di "banana", `a` è la 1^ lettera ("prima"), e `n` è la 2^ lettera ("seconda") .

![Indice di una stringa](height=0.75in@../images/string)

\index{index!starting at zero}
\index{zero, index starting at}

Potrai utilizzare qualsiasi espressione, comprese variabili e operatori, come indice, ma il valore dell'indice dovrà essere un numero intero. Altrimenti otterrai:

\index{index}
\index{}
\index{exception!TypeError}
\index{TypeError}


~~~~ {.python}
>>> letter = fruit[1.5]
TypeError: string indices must be integers
~~~~



Ottenere la lunghezza di una stringa usando `len`
-----------------------------------------------------

\index{len function}
\index{function!len}

`len` è una funzione che restituisce il numero di caratteri in una stringa:

~~~~ {.python}
>>> fruit = 'banana'
>>> len(fruit)
6
~~~~



Per ottenere l'ultima lettera di una stringa, potresti essere tentato di provare qualcosa del genere:
\index{exception!IndexError}
\index{IndexError}


~~~~ {.python}
>>> length = len(fruit)
>>> last = fruit[length]
IndexError: string index out of range
~~~~


Il motivo del messaggio d'errore è che non vi è alcuna lettera in "banana" con l'indice 6. Considerato che abbiamo iniziato a contare da zero, le sei lettere sono numerate da 0 a 5. Per ottenere l'ultimo carattere, dovrai sottrarre 1 a `length`:

~~~~ {.python}
>>> last = fruit[length-1]
>>> print(last)
a
~~~~


In alternativa, puoi usare indici negativi, che partono a contare dalla fine della stringa. L'espressione `fruit [-1]` ci darà l'ultima lettera, `fruit [-2]` ci darà la penultima, e così via.
\index{index!negative}
\index{negative index}

Scorrere una stringa con un ciclo
---------------------------------------

\index{traversal}
\index{loop!traversal}
\index{for loop}
\index{loop!for}
\index{statement!for}
\index{traversal}
Molti calcoli comportano l'elaborazione di un carattere alla volta di una stringa. Spesso cominciano dall'inizio, selezionano ciascun carattere a turno, fanno qualcosa e continuano fino alla fine. Questo modello di elaborazione è chiamato *traversale*. Un modo per codificare uno scorrimento consiste nell'utilizzare un ciclo `while`:

~~~~ {.python}
index = 0
while index < len(fruit):
    letter = fruit[index]
    print(letter)
    index = index + 1
~~~~



Questo ciclo scorre la stringa e mostra una singola lettera su una riga separata. La condizione del ciclo è `index < len(fruit)`, quindi quando `index` è uguale alla lunghezza della stringa, la condizione è falsa e il corpo del ciclo non viene più eseguito. L'ultimo carattere a cui si accede è quello con l'indice uguale a `len(fruit)-1`, che è l'ultimo carattere nella stringa.  

**Esercizio 1:** Scrivi un ciclo `while` che inizi dall'ultimo carattere della stringa e proceda fino al primo carattere della stringa, visualizzando ogni lettera su una riga separata, tranne che all'indietro.

Un altro modo per scrivere uno scorrimento è con un ciclo `for`:

~~~~ {.python}
for char in fruit:
    print(char)
~~~~



Ogni volta che viene eseguito il ciclo, viene assegnato alla variabile `char` il carattere successivo nella stringa. Il ciclo si ripete fino a quando non rimane alcun carattere.

Segmenti di stringhe
-------------

\index{slice operator}
\index{operator!slice}
\index{index!slice}
\index{string!slice}
\index{slice!string}
Il segmento di una stringa è chiamato *slice*. La selezione di un segmento è simile alla selezione di un carattere:

~~~~ {.python}
>>> s = 'Monty Python'
>>> print(s[0:5])
Monty
>>> print(s[6:12])
Python
~~~~



L'operatore restituisce la parte della stringa dal carattere indicato con il primo indice (incluso) al carattere indicato con il secondo indice (escluso). Se si omette il primo parametro (prima dei due punti), il segmento parte dall'inizio della stringa. Se invece si omette il secondo, il segmento arriva alla fine della stringa:

~~~~ {.python}
>>> fruit = 'banana'
>>> fruit[:3]
'ban'
>>> fruit[3:]
'ana'
~~~~



Se il primo parametro è maggiore o uguale al secondo, otterrai una *stringa vuota*, rappresentata da due virgolette:
\index{quotation mark}


~~~~ {.python}
>>> fruit = 'banana'
>>> fruit[3:3]
''
~~~~


Una stringa vuota è uguale a qualsiasi altra stringa nonostante non contenga caratteri ed abbia lunghezza pari a 0.  

**Esercizio 2:** Dato che `fruit` è una stringa, cosa significa `fruit[:]`?

\index{copy!slice}
\index{slice!copy}

Le stringhe sono immutabili
---------------------

\index{mutability}
\index{immutability}
\index{string!immutable}

Potresti essere tentato di utilizzare l'operatore sul lato sinistro di un'assegnazione con l'intenzione di cambiare un carattere in una stringa. Per esempio:
\index{TypeError}
\index{exception!TypeError}


~~~~ {.python}
>>> greeting = 'Hello, world!'
>>> greeting[0] = 'J'
TypeError: 'str' object does not support item assignment
~~~~


L'"object" in questione è la stringa e l'"item" è il carattere che avete provato ad assegnare. Per ora, un *oggetto* coincide con un valore, ma perfezioneremo questa definizione più avanti. Un *elemento* è uno dei valori di una sequenza.

\index{object}
\index{item assignment}
\index{assignment!item}
\index{immutability}

Il motivo dell'errore è che le stringhe sono *immutabili*, cioè non è possibile modificare una stringa esistente. La cosa migliore che puoi fare è creare una nuova stringa che sia una variante dell'originale:

~~~~ {.python}
>>> greeting = 'Hello, world!'
>>> new_greeting = 'J' + greeting[1:]
>>> print(new_greeting)
Jello, world!
~~~~



Questo esempio concatena una nuova  lettera su un segmento di `greeting` senza avere alcun effetto sulla stringa originale.
\index{concatenation}

Cicli e conteggi
--------------------

\index{counter}
\index{counting and looping}
\index{looping and counting}
\index{looping!with strings}

Il seguente programma conta il numero di volte in cui la lettera `a` si ripete in una stringa:

~~~~ {.python}
word = 'banana'
count = 0
for letter in word:
    if letter == 'a':
        count = count + 1
print(count)
~~~~


Questo programma dimostra un altro schema denominato *contatore*. La variabile `count` è inizializzata a 0 e viene poi incrementata ogni volta che viene rilevata una `a`. Quando il ciclo termina, `count` conterrà il risultato: il numero totale di `a` nella stringa analizzata.
\index{encapsulation}

**Esercizio 3:** Incorpora questo codice in una funzione chiamata "count" e rendila in grado di accettare stringhe e lettere come argomenti.

L'operatore `in`
----------------------------

\index{in operator}
\index{operator!in}
\index{boolean operator}
\index{operator!boolean}

La parola `in` è un operatore booleano che prende due stringhe e restituisce `True` se la prima è contenuta nella seconda:

~~~~ {.python}
>>> 'a' in 'banana'
True
>>> 'seed' in 'banana'
False
~~~~



Comparazione di stringhe
-----------------

\index{string!comparison}
\index{comparison!string}

Gli operatori di comparazione funzionano anche sulle stringhe. Per verificare se due stringhe sono uguali puoi usare questo script:

~~~~ {.python}
if word == 'banana':
    print('All right, bananas.')
~~~~



Altre operazioni di comparazione sono utili per mettere delle parole in ordine alfabetico:

~~~~ {.python}
if word < 'banana':
    print('Your word,' + word + ', comes before banana.')
elif word > 'banana':
    print('Your word,' + word + ', comes after banana.')
else:
    print('All right, bananas.')
~~~~



Python non gestisce le lettere maiuscole e minuscole nello stesso modo in cui fanno le persone: tutte le lettere maiuscole vengono prima delle lettere minuscole, quindi:

~~~~
Your word, Pineapple, comes before banana.
~~~~



Un modo comune per risolvere questo problema è convertire le stringhe in un formato standard, ad esempio tutto il testo in minuscolo, prima di eseguire la comparazione. Tienilo a mente se mai dovessi difenderti da un uomo armato di Ananas.

Metodi delle `stringhe`
---------------------------

Le stringhe sono un esempio di *oggetti* Python. Un oggetto contiene sia i dati (la stringa vera e propria) che i *metodi*, che essenzialmente sono funzioni incorporate nell'oggetto e sono disponibili per qualsiasi *istanza* dell'oggetto. Tramite due funzioni hai la possibilità di conoscere la tipologia di un oggetto ed i metodi ad esso associati. La funzione `type` mostra il tipo di oggetto e la funzione `dir` mostra i metodi disponibili.

~~~~ {.python}
>>> stuff = 'Hello world'
>>> type(stuff)
<class 'str'>
>>> dir(stuff)
['capitalize', 'casefold', 'center', 'count', 'encode',
'endswith', 'expandtabs', 'find', 'format', 'format_map',
'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit',
'isidentifier', 'islower', 'isnumeric', 'isprintable',
'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower',
'lstrip', 'maketrans', 'partition', 'replace', 'rfind',
'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip',
'split', 'splitlines', 'startswith', 'strip', 'swapcase',
'title', 'translate', 'upper', 'zfill']
>>> help(str.capitalize)
Help on method_descriptor:

capitalize(...)
    S.capitalize() -> str

    Return a capitalized version of S, i.e. make the first character
    have upper case and the rest lower case.
>>>
~~~~



Ti ho scritto che tramite la funzione `dir` otterrai un elenco di metodi, di cui, tramite la funzione `help` puoi ottenere una semplice documentazione; esiste però una migliore fonte di documentazione riguardo i metodi: <https://docs.python.org/3.5/library/stdtypes.html#string-methods>.  
Chiamare un *metodo* è simile al chiamare una funzione, cioè riceve argomenti e restituisce un valore, con una sintassi diversa. Chiamiamo un metodo facendo precedere il nome a quello della variabile usando un punto come delimitatore.  
Ad esempio, il metodo `upper` prende una stringa in input e restituisce una nuova stringa con tutte le lettere maiuscole:
\index{method}
\index{string!method}

Non va utilizzata la sintassi `upper(word)`, ma piuttosto `word.upper()`.
\index{dot notation}


~~~~ {.python}
>>> word = 'banana'
>>> new_word = word.upper()
>>> print(new_word)
BANANA
~~~~


Questa forma di notazione con il punto specifica il nome del metodo (`upper`) e il nome della stringa (`word`) a cui applicare il metodo. Le parentesi vuote indicano che questo metodo non accetta argomenti.
\index{parentheses!empty}

La chiamata di un metodo è chiamata *invocazione*: nel caso precedente diremo che stiamo invocando `upper` sulla stringa `word`.
\index{invocation}

Ad esempio, esiste un metodo per le stringhe chiamato "find" che cerca l'eventuale posizione di una stringa o segmento all'interno di un'altra:

~~~~ {.python}
>>> word = 'banana'
>>> index = word.find('a')
>>> print(index)
1
~~~~



In questo esempio, hai invocato `find` su `word` e passato come parametro la lettera che stiamo cercando. Il metodo `find` può cercare sia segmenti di stringhe sia caratteri:

~~~~ {.python}
>>> word.find('na')
2
~~~~



Questa funzione può ricevere, come secondo argomento, l'indice da cui dovrebbe iniziare la ricerca:
\index{optional argument}
\index{argument!optional}


~~~~ {.python}
>>> word.find('na', 3)
4
~~~~


Un'altra operazione comune è il rimuovere lo spazio bianco (spazi, tabulazioni o newline) dall'inizio e dalla fine di una stringa usando il metodo `strip`:

~~~~ {.python}
>>> line = '  Here we go  '
>>> line.strip()
'Here we go'
~~~~



Alcuni metodi, come *startswith*, restituiscono valori booleani:

~~~~ {.python}
>>> line = 'Have a nice day'
>>> line.startswith('Have')
True
>>> line.startswith('h')
False
~~~~



Noterai che `startswith` richiede che ci sia un'esatta corrispondenza tra lettere maiuscole e minuscole. Può quindi tornare utile prendere una stringa e convertirla tutta in minuscolo tramite il metodo `lower`.

~~~~ {.python}
>>> line = 'Have a nice day'
>>> line.startswith('h')
False
>>> line.lower()
'have a nice day'
>>> line.lower().startswith('h')
True
~~~~



Nell'ultimo esempio, viene chiamato il metodo `lower` e quindi `startswith` per vedere se la stringa risultante inizia con la lettera "h". Finché facciamo attenzione all'ordine, possiamo effettuare più chiamate diverse in una singola espressione.
\index{count method}
\index{method!count}

**Esercizio 4:** esiste un metodo per le stringhe chiamato `count` simile alla funzione dell'esercizio precedente.

Leggi la documentazione di questo metodo su <https://docs.python.org/3.5/library/stdtypes.html#string-methods> e scrivi uno script che conti il numero di volte in cui la lettera `a` appare nella stringa "banana".

Analisi delle stringhe
---------------

Spesso, vogliamo esaminare una stringa e trovare un segmento specifico. Per esempio, se ci venisse presentata una serie di linee formattate come segue:

`From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008`

e volessimo estrarre solo la seconda metà dell'indirizzo (ad es., `uct.ac.za`) da ogni riga, ci verrà in aiuto il metodo `find` e la segmentazione delle stringhe.  

In primo luogo, dobbiamo trovare la posizione del simbolo chiocciola (@) nella stringa. Quindi individuiamo la posizione del primo spazio vuoto *dopo* lo stesso. Infine usiamo la segmentazione delle stringhe per estrarre la porzione della stringa che stiamo cercando.

~~~~ {.python}
>>> data = 'From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008'
>>> atpos = data.find('@')
>>> print(atpos)
21
>>> sppos = data.find(' ',atpos)
>>> print(sppos)
31
>>> host = data[atpos+1:sppos]
>>> print(host)
uct.ac.za
>>>
~~~~


Usiamo una applicazione del metodo `find` che ci permette di specificare la posizione nella stringa da cui vogliamo che `find` inizi a guardare. Dividiamo, estraiamo i caratteri dalla posizione successiva al simbolo chiocciola fino a quello che precede lo spazio vuoto *escluso*.  
La documentazione per `find` è disponibile all'indirizzo <https://docs.python.org/3.5/library/stdtypes.html#string-methods>.

Operatore di formato
---------------

\index{format operator}
\index{operator!format}

L'*operatore di formato* (%) ci consente di costruire stringhe, sostituendo parti di esse con i dati memorizzati nelle variabili. Se applicato a numeri interi, `%` rappresenta l'operatore modulo, se invece il primo operando è una stringa, `%` rappresenta l'operatore di formato.

\index{format string}

Il primo operando è detto *stringa di formato*, che contiene una o più *sequenze di formato* che specificano il formato del secondo operando.
Il risultato è una stringa.
\index{format sequence}

Ad esempio, la sequenza di formato "%d" significa che il secondo operando dovrebbe essere nel formato di numero intero (`d` sta per  "in base decimale"):

~~~~ {.python}
>>> camels = 42
>>> '%d' % camels
'42'
~~~~



Il risultato è la stringa "42" che non deve essere confusa con il numero intero `42`. Una sequenza di formato può comparire in qualsiasi punto della stringa, pertanto ti è possibile inserire un valore in una frase:

~~~~ {.python}
>>> camels = 42
>>> 'I have spotted %d camels.' % camels
'I have spotted 42 camels.'
~~~~


Se in una stringa c'è più di una sequenza, il secondo operando deve essere una tupla ^ [Una tupla è una sequenza di valori separati da virgole all'interno di una coppia di parentesi. Tratteremo le tuple nel Capitolo 10]. Ogni sequenza di formato corrisponde a un elemento della tupla, nell'ordine indicato.
Nell'esempio seguente viene utilizzato "%d" per formattare un numero intero, "%g" per formattare un decimale a virgola mobile (non chiedetemi perché) e "%s" per formattare una stringa:

~~~~ {.python}
>>> 'In %d years I have spotted %g %s.' % (3, 0.1, 'camels')
'In 3 years I have spotted 0.1 camels.'
~~~~



Il numero e il tipo degli elementi nella tupla devono corrispondere al numero e al tipo di sequenze di formato indicate:
\index{exception!TypeError}
\index{TypeError}


~~~~ {.python}
>>> '%d %d %d' % (1, 2)
TypeError: not enough arguments for format string
>>> '%d' % 'dollars'
TypeError: %d format: a number is required, not str
~~~~


Nel primo esempio non sono presenti abbastanza elementi. Nel secondo l'elemento è del tipo sbagliato.
L'operatore di formattazione è potente, ma può essere difficile da usare.
Puoi leggere informazioni più dettagliate su <https://docs.python.org/3.5/library/stdtypes.html#printf-style-string-formatting>.

Debug
---------

\index{debugging}

Un talento che dovresti coltivare mentre programmi è il chiederti sempre: "Cosa potrebbe andare storto qui?" o in alternativa "Quale imprevedibile cosa potrebbe essere fatta dal nostro utente per mandare in crash il mio programma (apparentemente) perfetto?".
Ad esempio, guarda il programma che ti ho mostrato per dimostrare il ciclo `while` nel capitolo sull'iterazione:

\VerbatimInput{../code3/copytildone2.py}

Guarda cosa succede quando l'utente inserisce una riga vuota:

~~~~ {.python}
> hello there
hello there
> # don't print this
> print this!
print this!
>
Traceback (most recent call last):
  File "copytildone.py", line 3, in <module>
    if line[0] == '#':
IndexError: string index out of range
~~~~



Il codice funziona bene finché non viene inserita una riga vuota. Quindi non essendo presente un carattere nella posizione zero, viene visualizzato un traceback. Ci sono due soluzioni per rendere la riga tre "sicura" anche se la riga è vuota.
La prima è semplicemente usare il metodo `startswith` che restituirà `False` se la stringa è vuota.

~~~~
    if line.startswith('#'):
~~~~



\index{guardian pattern}
\index{pattern!guardian}
Un altra soluzione è l'utilizzo precauzionale dell'istruzione `if` adottando lo schema del *guardiano* per assicurarsi che la seconda espressione logica sia valutata solo se è presente almeno un carattere nella stringa:

~~~~
    if len(line) > 0 and line[0] == '#':
~~~~



Glossario
--------


contatore
: una variabile utilizzata per contare qualcosa; è solitamente inizializzata a zero e poi incrementata.
\index{counter}

stringa vuota
: una stringa senza caratteri e con lunghezza pari a 0, rappresentata da due virgolette.
\index{empty string}

operatore di formato
: un operatore `%` che riceve una stringa di formato e una tupla e genera una stringa che include gli elementi della tupla formattata come specificato dalla stringa di formato.
\index{format operator}
\index{operator!format}

sequenza di formato
: una sequenza di caratteri in una stringa di formato (es. `%d`) che specifica come deve essere formattato un dato.
\index{format sequence}

stringa di formato
: una stringa utilizzata con l'operatore di formattazione che contiene sequenze di formato.
\index{format string}

flag
: una variabile booleana utilizzata per indicare se una condizione è vera o falsa.
\index{flag}

invocazione
: un'istruzione che serve per chiamare un metodo.
\index{invocation}

immutabile
: la proprietà della sequenza i cui elementi non possono essere alterati.
\index{immutability}

indice
: un valore intero utilizzato per selezionare un elemento in una sequenza, ad esempio un carattere in una stringa.
\index{index}
\index{}

item
: uno dei valori in una sequenza.
\index{item}

metodo
: una funzione associata a un oggetto e chiamata utilizzando la notazione punto.
\index{method}

oggetto
: Qualcosa a cui può riferirsi una variabile. Per ora, puoi usare "oggetto" e "valore" in modo intercambiabile.
\index{object}

ricerca
: uno sistema di scorrimento che si ferma quando trova ciò che sta cercando.
\index{search pattern}
\index{pattern!search}

sequenza
: un insieme ordinato ovvero un insieme di valori in cui ogni valore è identificato da un indice intero.
\index{sequence}

segmento
: parte di una stringa specificata da un intervallo di indici.
\index{slice}

traverse
: scorrere gli elementi di una sequenza, eseguendo un'operazione simile su ognuno.
\index{traversal}


Esercizi
---------


**Esercizio 5:** prendi il seguente codice Python contenente una stringa:
`str = 'X-DSPAM-Confidence:0.8475`

Usa `find` e la segmentazione delle stringhe per estrarre la porzione di stringa dopo il carattere ":" e utilizza la funzione `float` per convertire la stringa estratta in un numero a virgola mobile.

\index{string method}
\index{method!string}

**Esercizio 6:** leggi la documentazione dei metodi di stringa su
<https://docs.python.org/3.5/library/stdtypes.html#string-methods>
Potrebbe essere il caso di fare degli esperimenti con alcuni di essi per assicurarti di aver capito come funzionano. `strip` e `replace` sono particolarmente utili.

La documentazione utilizza una sintassi che potrebbe essere fonte di confusione. Ad esempio, in `find(sub[, start[, end]])`, le parentesi indicano argomenti opzionali. In altre parole `sub` è necessario, `start` è facoltativo ma nel caso tu lo inserisca, allora `end` diventa opzionale.
