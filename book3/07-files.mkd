
File
============

\index{file}
\index{tipo!file}

Persistenza
-----------

\index{persistenza}
\index{memoria secondaria}

Finora, abbiamo imparato come scrivere programmi e comunicare le nostre intenzioni all'*unità di elaborazione centrale* usando l'esecuzione condizionale, le funzioni e le iterazioni. Abbiamo anche imparato come creare e utilizzare strutture di dati nella *memoria principale*. La CPU e la memoria RAM sono i luoghi dove il nostro software lavora e funziona.
È dove si forma tutto il "pensiero".  Ma se ricordate le nostre discussioni sull'architettura hardware, una volta che l'alimentazione viene tolta, qualsiasi cosa memorizzata nella CPU o nella memoria principale viene cancellata. Praticamente, i nostri programmi sono stati solo fugaci esercizi divertenti per imparare Python.

![Memoria secondaria](height=2.5in@../images/arch)

In questo capitolo, iniziamo a lavorare con i file nella *Memoria Secondaria* che, come scritto, non viene cancellata quando si spegne il pc e, nel caso di utilizzo di un'unità flash USB, consente di rimuovere dal sistema i dati prodotti dai nostri script e trasportarli su un altro sistema.
Ci concentreremo principalmente sulla lettura e la scrittura di file di testo simile a quelli che creiamo in un editor di testo. Più avanti vedremo come lavorare con i file di database che sono file binari, progettati specificamente per essere letti e scritti tramite programmi di database.

Aprire i file
-------------

\index{file!apertura}
\index{funziona aperta}
\index{funzione!open}

Quando vogliamo leggere o scrivere un file (ad esempio sul disco rigido), dobbiamo prima *aprire* il file. Quando apri un file, chiedi al sistema operativo di trovare il file di cui hai fornito il nome e di assicurarsi che esista. Nell'esempio seguente, apriremo il file `mbox.txt`, che dovrebbe essere memorizzato nella stessa cartella da cui avvii Python.

Puoi scaricare questo file da [www.py4e.com/code3/mbox.txt](http://www.py4e.com/code3/mbox.txt)

    >>> fhand = open ('mbox.txt')
    >>> print(fhand)
    <_io.TextIOWrapper name = 'mbox.txt' mode = 'r' encoding = 'cp1252'>

\index{gestore file}


Se l'operazione `Open` ha successo, il sistema operativo ci restituisce un *file handle*. L’handle del file non rappresenta il dato reale contenuto nel file, ma piuttosto un “gestore” che possiamo usare per leggere i dati. Viene fornito un gestore (handle) che indica che il file richiesto esiste e si dispone delle autorizzazioni appropriate per leggere il file.

![Gestore (handler) di un file](height=2.0in@../images/handle)

Se il file non esiste, `open` fallirà visualizzando un traceback e verrà fornito alcun handle che permetta di accedere ai contenuti del file:

    >>> fhand = open ('stuff.txt')
    Traceback (most recent call last) :
     File "<stdin>", riga 1, in <module>
    FileNotFoundError: [Errno 2] No such file or directory: 'stuff.txt'

Successivamente useremo `try` e `except` per gestire con più eleganza la situazione in cui si prova ad aprire un file che non esiste.

File di testo e righe
--------------------


Un file di testo può essere pensato come una sequenza di righe, proprio come una stringa Python può essere vista come una sequenza di caratteri. Ad esempio, questo è un file di testo dimostrativo che registra l'attività di posta di vari appartenenti di un team di sviluppo di progetti open source:

`From stephen.marquard@uct.ac.za Sab 5 gen 09:14:16 2008` \
`Return-Path: <postmaster@collab.sakaiproject.org> `\
`Date: Sat, 5 Jan 2008 09:12:18 -0500`\
`To: source@collab.sakaiproject.org`\
`From: stephen.marquard@uct.ac.za`\
`Subject: [sakai] svn commit: r39772 - content / branches /`\
`Details: http: //source.sakaiproject.org/viewsvn/? view = rev & rev = 39772`\
`...`


L'intero file di interazioni di posta è disponibile su

[www.py4e.com/code3/mbox.txt](http://www.py4e.com/code3/mbox.txt)

e una versione ridotta del file è disponibile su

[www.py4e.com/code3/mbox-short.txt](http://www.py4e.com/code3/mbox-short.txt)

Questi file sono strutturati in un formato standard per file contenenti più messaggi di posta. Le righe che iniziano con "From" separano i messaggi e le righe che iniziano con "From:" fanno parte dei messaggi. Per ulteriori informazioni sul formato mbox, consulta:

[en.wikipedia.org/wiki/Mbox](en.wikipedia.org/wiki/Mbox).  

Per suddividere il file in righe, c'è un carattere speciale che rappresenta la "fine della riga" chiamato carattere *newline*.


\index{a capo}

In Python, il carattere *newline* viene rappresentato con backslash-n (\\n) tra le costanti di stringa. Anche se sembra essere composto da due caratteri, è in realtà un singolo carattere. Prendi in considerazione il seguente listato. Il contenuto che stiamo inserendo nella variabile "stuff" nell'interprete, ci mostra che la stringa contiene i caratteri `\\n`. Quando però la stampiamo tramite il comando `print`, puoi notare che la stringa viene mostrata su due righe, spezzata nel punto dove è presente newline.

    >>> stuff = 'Hello\nWorld!'
    >>> stuff
    'Hello\nWorld!'
    >>> print(stuff)
    Hello
    World!
    >>> stuff = 'X\nY'
    >>> print(stuff)
    X
    Y
    >>> len(stuff)
    3

Nota che nel secondo caso la lunghezza della stringa `X\nY` è di *tre* caratteri perché il carattere newline conta come un singolo carattere.  Quindi, quando guardiamo le linee in un file, dobbiamo *immaginare* che ci sia uno speciale carattere invisibile chiamato newline alla fine di ogni riga che indica la fine della riga. Quindi il carattere newline divide i caratteri del file in righe.

Lettura dei file
-------------

\index{file!lettura}
\index{contatore}

Mentre il *file handle* non contiene i dati per il file, è abbastanza semplice costruire un ciclo `for` per leggere e contare ciascuna delle righe in un file:

\VerbatimInput{../code3/open.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Possiamo usare il *file handle* come sequenza per il ciclo `for` che, in questo caso, ne trova e visualizza semplicemente il numero di righe . La traduzione approssimativa del ciclo `for` in italiano è, "per ogni riga nel file indicato dal *file handle*, aggiungi uno alla variabile `count`." La ragione per cui la funzione `open` non legge subito l'intero file è perchè potrebbe essere di notevoli dimensioni e contenere  molti gigabyte di dati. L'istruzione `open` richiede lo stesso tempo indipendentemente dalla dimensione del file. Il ciclo `for` effettivamente fa in modo che vengano letti i dati contenuti nel file.  

Quando il file viene letto utilizzando un ciclo `for`, Python si occupa di suddividere i dati in righe separate usando il carattere newline. Python legge ogni riga fino al carattere newline e lo include come ultimo carattere nella variabile `line` in ogni iterazione del ciclo `for`.  

Poiché il ciclo `for` prende in considerazione i dati una riga alla volta, può leggere e contare efficientemente le righe in file di grandi dimensioni senza esaurire la memoria principale. Lo script precedente può contare le righe in file di qualsiasi dimensione utilizzando pochissima memoria dato che ogni riga, dopo essere stata letta e "contata" , viene subito dopo scartata.
Se il file è relativamente piccolo rispetto alla dimensione della memoria principale, puoi leggere l'intero file in un'unica stringa applicando il metodo `read` sul *file handle*:

    >>> fhand = open('mbox-short.txt')
    >>> inp = fhand.read()
    >>> print(len(inp))
    94626
    >>> print(inp[:20])
    From stephen.marquar

In questo esempio, l'intero contenuto del file `mbox-short.txt` (tutti i 94.626 caratteri) viene letto direttamente nella variabile `inp`. Usiamo il taglio delle stringhe per stampare i primi 20 caratteri dei dati di stringa memorizzati in `inp`.  

Quando il file viene letto in questo modo, tutti i caratteri, inclusi tutte le righe e i caratteri newline, vengono considerati come una grande stringa nella variabile *inp*. Ricorda che questa applicazione della funzione `open` dovrebbe essere usata solo se i dati del file "entrano" comodamente nella memoria principale del vostro computer.

Se il file è troppo grande per adattarsi alla memoria principale, dovresti scrivere il tuo programma per leggere il file in blocchi utilizzando un ciclo `for` o `while`.

Ricerche in un file
------------------------

Quando si cercano dei dati in un file è molto comune leggere un file ignorando la maggior parte delle righe analizzando solo quelle che soddisfano una particolare condizione. Possiamo combinare il modello per la lettura di un file con i metodi per le stringhe per costruire i primi semplici meccanismi di ricerca.
\index{pattern filter}
\index{pattern!filter}

Ad esempio, se volessimo leggere un file e stampare solo le righe che iniziano con il prefisso "From:", potremmo usare il metodo per le stringhe *startswith* per selezionare solo le righe con il prefisso desiderato:

\VerbatimInput{../code3/search1.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Quando questo programma viene eseguito viene visualizzato il seguente output:

    From: stephen.marquard@uct.ac.za

    From: louis@media.berkeley.edu

    From: zqian@umich.edu

    From: rjlowe@iupui.edu

    ...  

L'output sembra ottimo dato che le uniche righe che stiamo visualizzando sono quelle che iniziano con "From:". Perché allora stiamo vedendo delle righe vuote in più? Ciò è dovuto al carattere invisibile *newline*.

Ognuna delle righe termina con il carattere newline. L'istruzione `print` visualizza la stringa nella variabile *line* che include una riga e quindi `print` visualizza *un'altra* nuova riga, ottenendo l'effetto di doppia spaziatura che vediamo. Potremmo usare il taglio delle stringhe per visualizzare tutto tranne l'ultimo carattere, ma c'è un approccio più semplice: usare il metodo *rstrip* per rimuovere gli spazi bianchi dal lato destro di una stringa, come nell'esempio seguente:

\VerbatimInput{../code3/search2.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Quando eseguirai questo programma, otterrai il seguente output:

    From: stephen.marquard@uct.ac.za
    From: louis@media.berkeley.edu
    From: zqian@umich.edu
    From: rjlowe@iupui.edu
    From: zqian@umich.edu
    From: rjlowe@iupui.edu
    From: cwen@iupui.edu
    ...  

Man mano che i tuoi script di gestione dei file diventano più complessi, potresti voler strutturare i cicli di ricerca utilizzando `continue`. L'idea di base del ciclo di ricerca è che stai cercando le righe "interessanti" e ignorando quelle "non interessanti"; inoltre, quando trovi una riga interessante, che tu voglia farci qualcosa. Potresti strutturare questo tipo di ciclo come nell'esempio seguente:

\VerbatimInput{../code3/search3.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

L'output del programma è lo stesso. In altre parole, le righe non interessanti sono quelle che non iniziano con "From:", che vengono saltate usando `continue`. L'elaborazione verrà riservata alle righe "interessanti" (cioè quelle che iniziano con "From:").

Possiamo usare il metodo `find` per simulare una ricerca simile a quella di un editor di testo che trova le righe che contengono la stringa ricercata.

Dato che `find` cerca una stringa all'interno di un'altra e ne restituisce o la posizione o -1 se la stringa non è presente, possiamo scrivere il ciclo seguente per visualizzare le righe che contengono la stringa "@uct.ac.za "(cioè, le email che provengono dall'università di Cape Town in Sud Africa):

\VerbatimInput{../code3/search4.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Che produce il seguente output:

    From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008
    X-Authentication-Warning: set sender to stephen.marquard@uct.ac.za using -f
    From: stephen. marquard@uct.ac.za
    Author: stephen.marquard@uct.ac.za
    From david.horwitz@uct.ac.za Fri Jan 4 07:02:32 2008
    X-Authentication-Warning: set sender to david.horwitz@uct.ac.za using -f
    From: david.horwitz@uct.ac.za
    Author: david.horwitz@uct.ac.za ...

Far scegliere all'utente il nome del file
-------------------------------------

Non è il caso di modificare il nostro codice Python ogni volta che vogliamo elaborare un file diverso: è più utile chiedere all'utente di inserire il nome del file ogni volta che il programma viene eseguito. In questo modo è possibile usare il nostro programma su file diversi senza modificare continuamente il codice.  

È una modifica abbastanza semplice da implementare: l'utente potrà inserire il nome del file utilizzando la funzione `input`:

\VerbatimInput{../code3/search6.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Il nome del file inserito dall'utente viene salvato nella variabile `fname` e successivamente aperto. Ora è possibile eseguire il programma su file diversi senza alterarne continuamente il codice.

    python search6.py
    Enter the file name: mbox.txt
    There were 1797 subject lines in mbox.txt

    python search6.py
    Enter the file name: mbox-short.txt
    There were 27 subject lines in mbox-short.txt

Prima di sbirciare la prossima sezione, dai un'occhiata al programma precedente e prova a chiederti: "Che cosa potrebbe andare storto?" o "Che cosa potrebbe fare il nostro amato utente per far sì che il nostro piccolo programma si blocchi visualizzando un traceback, facendoti sembrare non proprio brillante agli occhi dei tuoi utenti?"

Utilizzare `try, except` e `open`
-----------------------------------------------------

Ti ho scritto di non sbirciare. Questa è la tua ultima possibilità.

Cosa succede se il nostro utente digita qualcosa che non è il nome di un file?

      python search6.py
      Enter the file name: missing.txt
      Traceback (most recent call last):
       File "search6.py", line 2, in <module>
        fhand = open (fname)
      FileNotFoundError: [Errno 2] No such file or directory: 'missing.txt'

      python search6.py
      Enter the file name: na na boo boo
      Traceback (most recent call last):
       file "search6.py", riga 2, in <module>
        fhand = open (fname)
      FileNotFoundError: [Errno 2] No such file or directory : 'na na boo boo'

Non ridere. Gli utenti faranno tutto quello che possono, di proposito o con intenzioni malevole, per violare i programmi. In effetti, un componente importante di qualsiasi team di sviluppo software è la persona o il gruppo chiamato *Quality Assurance* (o QA in breve) il cui compito è quello di fare le cose più folli possibili nel tentativo di violare il software che hanno creato.

\index{Controllo Qualità}
\index{QA}

Il team addetto al controllo qualità è responsabile della ricerca dei difetti nei programmi prima di consegnarli agli utenti finali che potrebbero acquistare il software o pagare il nostro stipendio per sviluppare software. Quindi, anche se non sembra, la squadra di controllo qualità è la migliore amica dello sviluppatore.

\index{istruzione try}
\index{istruzione!try}
\index{funziona aperta}
\index{funzione!open}
\index{eccezione!IOError}
\index{IOError}

Tornando al nostro script, una volta individuato il difetto nel programma, possiamo sistemarlo elegantemente usando la struttura `try`/`except`: dobbiamo supporre che la chiamata `open` potrebbe fallire e aggiungere del codice come nell'esempio seguente:

\VerbatimInput{../code3/search7.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

La funzione `exit` termina immediatamente il programma. È una funzione che possiamo definire non reversibile. Ora, quando il nostro utente (o il team controllo qualità) digita un nome incompleto o errato, li "intercettiamo" e recuperiamo con eleganza:

    python search7.py
    Inserisci il nome del file: mbox.txt
    There were 1797 subject lines in mbox.txt

    python search7. py
    Immettere il nome del file: na na boo boo
    File cannot be opened: na na boo boo

\index{Pythonico}

Proteggere la chiamata `open` è un buon esempio dell'uso corretto di `try` e `except` in un programma Python. Usiamo il termine "Pythonic" quando stiamo facendo qualcosa che rientri nella "filosofia di Python". Potremmo dire che l'esempio sopra è il modo Pythonic di aprire un file.

Una volta che diventerai più abile in Python, potresti trovarti invischiato in una discussione con altri programmatori Python per decidere quale possa essere, tra due soluzioni equivalenti a un problema, quella "più Pythonic".

L'obiettivo di essere "più Pythonic" cattura l'idea che la programmazione sia in parte ingegneria e in parte arte. Non siamo interessati solo a far funzionare qualcosa, vogliamo anche che la nostra soluzione sia elegante e apprezzata dai nostri pari.

Scrivere file
-------------

\index{file!scrittura}
Per scrivere all'interno di un file, devi aprirlo inserendo "w" come secondo parametro:

    >>> fout = open ('output.txt', 'w')
    >>> print (fout)
    <_io.TextIOWrapper name = 'output.txt' mode = 'w' encoding = 'cp1252'>

Aprendo in modalità di scrittura un file che già esiste ne cancellerai i dati già presenti e lo avvierai nuovamente, quindi fai attenzione! Se invece il file non esiste, ne viene creato uno nuovo.

Il `write` applicato al file handle dell'oggetto permette di salvare i dati nel file, restituendo il numero di caratteri scritti.

La modalità di scrittura predefinita per scrivere (e leggere) stringhe, è testo.

    >>> line1 = "These here's the wattle,\n"
    >>> fout.write (line1)
    24

\index{a capo}

Di nuovo, l'oggetto file tiene traccia di dove si trova, quindi se chiami nuovamente `write`, i nuovi dati verranno aggiunti alla fine del file.

Dobbiamo assicurarci di gestire le estremità delle righe mentre scriviamo nel file inserendo esplicitamente il carattere newline quando vogliamo terminare una riga. L'istruzione `print` aggiunge automaticamente una nuova riga, ma il metodo `write` non inserisce automaticamente un carattere newline.

    >>> line2 = 'the emblem of our land.\n'
    >>> fout.write (line2)
    24

Quando hai finito di scrivere, devi chiudere il file per assicurarti che l'ultimo bit di dati venga effettivamente scritto sul disco in modo che non vada perso se si interrompe l'alimentazione.

    >>> fout.close ()


Potremmo chiudere i file che apriamo anche per leggerli, ma possiamo essere un po' approssimativi se apriamo solo alcuni file dato che Python si assicura che tutti i file aperti vengano chiusi quando il programma termina . Quando scriviamo dei file, vogliamo chiudere esplicitamente i file in modo da non lasciare nulla al caso.


\index{metodo close}
\index{metodo!close}

Debug
---------

\index{debugging}
\index{spazio}

Quando leggi e scrivi il contenuto di file, potresti incontrare dei problemi con gli spazi bianchi. Questi errori possono essere difficili da risolvere perché gli spazi, le schede e gli a capo sono normalmente invisibili:

    >>> s = '1 2\t 3\n 4'
    >>> print (s)
    1 2  3
     4

\index{funzione repr}
\index{funzione!repr}
\index{rappresentazione stringa}

In questi casi la funzione integrata `repr` può tornarti utile. Prende qualsiasi oggetto come argomento e restituisce lo stesso oggetto sotto forma di stringa. Per quanto riguarda le stringhe, i caratteri di spaziatura vengono rappresentati con sequenze di backslash:

    >>> print(repr(s))
    '1 2\t 3\n 4'

Ciò può essere utile per il debug.

Un altro problema che potresti incontrare è che sistemi diversi usano caratteri diversi per indicare la fine di una riga. Alcuni sistemi usano un carattere newline (`\\n`). Altri usano un carattere di ritorno (`\r`). Alcuni usano entrambi. Se si spostano file tra sistemi diversi, queste incoerenze potrebbero causare problemi.

\index{carattere a capo}

Esistono applicazioni per la conversione da un formato all'altro nella maggior parte dei sistemi operativi. Potete trovarle (e leggere ulteriori informazioni su questo problema) presso [wikipedia.org/wiki/Newline](wikipedia.org/wiki/Newline), oltre a ulteriori informazioni su questa questione. Niente ti vieta di svilupparne una tua!

Glossario
--------

**Catch**
: Impedire che un'eccezione termini un programma tramite le istruzioni `try` e `except`.
\index{catch}

**Newline**
: Un carattere speciale ('\\n') utilizzato nei file e nelle stringhe per indicare la fine di una riga.
\index{a capo}

**Pythonic**
: Una tecnica che che segue la "filosofia Python". "Usare try e except è il modo *Pythonic* di risolvere l'errore dovuto a file non trovato".
\index{Pythonico}

**Controllo qualità**
: Persona o team focalizzato sull'assicurazione della qualità complessiva di un software. Il controllo qualità è solitamente impegnato nella verifica e nell'identificazione dei problemi/bug di un prodotto prima che lo stesso venga rilasciato.
\index{Controllo Qualità}
\index{QA}

**File di testo**
: Una sequenza di caratteri memorizzati nella memoria permanente (es. disco rigido).
\index{file di testo}


Esercizi
---------

**Esercizio 1:** Scrivi un programma per leggere un file e visualizzarne il contenuto (riga per riga) tutto in maiuscolo. L'esecuzione del programma avrà questo aspetto:

    python shout.py
    Enter a file name: mbox-short.txt
    FROM STEPHEN.MARQUARD@UCT.AC.ZA SAT JAN 5 09:14:16 2008
    RETURN-PATH: <POSTMASTER@COLLAB.SAKAIPROJECT.ORG>
    RECEIVED: FROM MURDER (MAIL.UMICH.EDU [141.211.14.90])
        BY FRANKENSTEIN.MAIL.UMICH.EDU (CYRUS V2.3.8) WITH LMTPA;
        SAT, 05 JAN 2008 09:14:16 -0500

Puoi scaricare il file da

[www.py4e.com/code3/mbox-short.txt](http://www.py4e.com/code3/mbox-short.txt)

**Esercizio 2:** scrivi un programma per richiedere il nome di un file, leggerlo e ricercare le linee del form:

    `X-DSPAM-Confidence:` **`0.8475` **

Quando trovi una riga che inizia con "X-DSPAM-Confidence:" seziona la riga per estrarre il numero a virgola mobile contenuto nella stessa. Conta queste righe e quindi calcolane il totale dei valori di spam confidence.

Quando raggiungi la fine del file, visualizza la media dei valori di spam confidence.

    Inserite il nome del file: mbox.txt
    Media spam confidence : 0.894128046745

    Inserisci il nome del file: mbox-short.txt
    Media spam confidence: 0.750718518519

Metti alla prova il tuo script sui file `mbox.txt` e `mbox-short.txt`.  


**Esercizio 3:** Capita che quando gli sviluppatori si annoiano o vogliono divertirsi, aggiungano un innocuo *Easter Egg* al loro programma. Modifica lo script precedente in modo che visualizzi un messaggio divertente nel caso l'utente inserisca quale nome del file "na na boo boo".

Il programma dovrebbe comportarsi normalmente in tutti gli altri casi (con file esistente o meno). Ecco un esempio del programma:

    python egg.py
    Immettere il nome del file: mbox.txt
    There were 1797 subject lines in mbox.txt

    python egg.py
    Immettere il nome del file: missing.tyxt
    File cannot be opened: missing.tyxt

    python egg.py
    Inserisci il nome del file: na na boo boo
    NA NA BOO BOO TO YOU - You have been punk'd!  

Non ti sto incoraggiando a inserire degli *Easter Egg* nei tuoi programmi, diciamo che questo è solo un esercizio.
