
Esecuzione condizionale
=====================

Espressioni booleane
-------------------

\index{boolean expression}
\index{expression!boolean}
\index{logical operator}
\index{operator!logical}
Un'espressione *booleana* è un'espressione che può assumere solo i valori vero o falso. Negli esempi seguenti l'operatore `==` viene utilizzato per la comparazione di due operandi e produrrà `True` nel caso siano uguali o `False` in caso contrario:

~~~~ {.python .trinket}
>>> 5 == 5
True
>>> 5 == 6
False
{}
~~~~


`True` e `False` non sono considerati stringhe ma sono valori speciali appartenenti al tipo `bool`:
\index{True special value}
\index{False special value}
\index{special value!True}
\index{special value!False}
\index{bool type}
\index{type!bool}


~~~~ {.python}
>>> type(True)
<class 'bool'>
>>> type(False)
<class 'bool'>
~~~~


L'operatore `==` è uno degli *operatori di comparazione*; gli altri sono:

~~~~ {.python}
      x != y               # x is not equal to y
      x > y                # x is greater than y
      x < y                # x is less than y
      x >= y               # x is greater than or equal to y
      x <= y               # x is less than or equal to y
      x is y               # x is the same as y
      x is not y           # x is not the same as y
~~~~


Anche se queste operazioni ti saranno probabilmente familiari, i simboli utilizzati da Python sono diversi da quelli matematici. Un errore comune è l'utilizzare un singolo segno di uguale (`=`) al posto di un doppio segno di uguale (`==`): Ricorda che `=` assegna un valore mentre `==` compara due valori. Al momento non esiste un operatore simile a `=<` o `=>`.
\index{comparison operator}
\index{operator!comparison}

Operatori logici
-----------------

\index{logical operator}
\index{operator!logical}
Esistono tre *operatori logici*: `and`, `or` e `not`. La semantica (significato) di questi operatori è simile al loro significato nella lingua inglese. Ad esempio:
`x> 0 and x <10`
è TRUE solo se `x` è maggiore di 0 *e* minore di 10.

\index{and operator}
\index{or operator}
\index{not operator}
\index{operator!and}
\index{operator!or}
\index{operator!not}

`n%2 == 0 or n%3 == 0` è TRUE se si verifica *una* delle condizioni: cioè se il numero è divisibile per 2 *o* 3. Infine, l'operatore `not` nega un'espressione booleana, quindi `not (x > y)` è true se ` x > y` è false; cioè, se `x` è minore o uguale a `y`. In pratica, gli operandi degli operatori logici dovrebbero essere espressioni booleane, anche Python non è molto rigoroso in merito.
Qualsiasi numero diverso da zero viene interpretato come "true":

~~~~ {.python}
>>> 17 and True
True
~~~~


Seppure questa flessibilità possa tornare utile, ci sono alcuni dettagli che potrebbero creare confusione. A meno che non si sappia cosa si stia facendo, è il caso di evitare un evento del genere.

Esecuzione condizionale
---------------------

\index{conditional statement}
\index{statement!conditional}
\index{if statement}
\index{statement!if}
\index{conditional executions}
Per scrivere programmi utili, abbiamo quasi sempre bisogno di verificare le condizioni e modificare di conseguenza il comportamento del programma. Le *istruzioni condizionali* ci danno questa capacità. La forma più semplice è l'istruzione `if`:

~~~~ {.python}
if x > 0 :
    print('x is positive')
~~~~


L'espressione booleana dopo l'istruzione `if` è chiamata *condizione*. Al termine dell'istruzione `if` va posto il carattere due punti (:), la linea/linee di codice seguenti devono essere indentate (rientrate).

![Logica If](height=1.5in@../images/if)

  Se la condizione logica è vera verrà eseguita l'istruzione indentata. Se la condizione logica è falsa, questa verrà saltata.
\index{condition}
\index{compound statement}
\index{statement!compound}

Le istruzioni `if` hanno la stessa struttura delle definizioni di funzione o dei cicli `for`^[Impareremo a conoscere funzioni e cicli rispettivamente nel Capitolo 4 e 5.]. L'istruzione è composta da una riga di intestazione che termina con i due punti (:) seguita da un blocco indentato. Istruzioni come questa sono definite *composte* perché si estendono su più righe. Pur non essendoci alcun limite al numero di istruzioni che possono apparire nel blocco, deve esserne presente almeno una. Ad esempio, è utile avere un blocco senza istruzioni (sempre come segnaposto per codice non ancora scritto). In tal caso, puoi usare l'istruzione `pass`, che non produce alcun effetto.
\index{pass statement}
\index{statement!pass}


~~~~ {.python}
if x < 0 :
    pass          # need to handle negative values!
~~~~


Se immetti un'istruzione `if` nell'interprete Python, il prompt cambierà da tre chevron a tre punti per segnalare che ci si trova nel mezzo di un blocco di istruzioni, come mostrato di seguito:

~~~~ {.python}
>>> x = 3
>>> if x < 10:
...    print('Small')
...
Small
>>>
~~~~


Quando utilizzi l'interprete Python, è necessario lasciare una riga vuota alla fine di un blocco, in caso contrario Python restituirà un errore:

~~~~ {.python}
>>> x = 3
>>> if x < 10:
...    print('Small')
... print('Done')
  File "<stdin>", line 3
    print('Done')
        ^
SyntaxError: invalid syntax
~~~~


Durante la scrittura e l'esecuzione di uno script non è necessaria una riga vuota alla fine di un blocco di istruzioni, anche se questa può migliorare la leggibilità del codice.  

Esecuzione alternativa
---------------------

\index{alternative execution}
\index{else keyword}
\index{keyword!else}
Una seconda forma dell'istruzione `if` è l'*esecuzione alternativa* in cui sono state previste due possibilità e la condizione determina quale debba essere eseguita. La sintassi ha questo aspetto:

~~~~ {.python}
if x%2 == 0 :
    print('x is even')
else :
    print('x is odd')
~~~~


Nell'operazione `x` diviso 2, se il resto è 0, sappiamo che `x` è pari e il programma visualizza un messaggio in tal senso. Se la condizione è false, viene eseguita la seconda serie di istruzioni.

![Logica If-Then-Else](height=1.5in@../images/if-else)

Poiché questa condizione deve necessariamente essere vera o falsa, verrà eseguita una delle alternative. Le alternative sono chiamate *branches* perché sono come rami nel flusso di esecuzione.
\index{branch}

Condizioni concatenate
--------------------

\index{chained conditional}
\index{conditional!chained}
A volte è necessario prevedere più di due possibilità e di conseguenza occorre inserire più di due branche. Un modo per esprimere un simile calcolo è utilizzare le condizioni *concatenate*:

~~~~ {.python}
if x < y:
    print('x is less than y')
elif x > y:
    print('x is greater than y')
else:
    print('x and y are equal')
~~~~


`elif` è l'abbreviazione di "else if". Anche stavolta verrà eseguito un solo ramo.

![Logica If-Then-ElseIf](height=2.0in@../images/elif)

Non c'è limite al numero di istruzioni `elif`. Possono essere utilizzate svariate condizioni `else`, purché siano inserite alla fine.
\index{elif keyword}
\index{keyword!elif}


~~~~ {.python}
if choice == 'a':
    print('Bad guess')
elif choice == 'b':
    print('Good guess')
elif choice == 'c':
    print('Close, but not correct')
~~~~


Ogni condizione viene controllata in ordine. Se la prima condizione è falsa, verrà controllata la successiva e così via. Se una tra queste condizioni risulta vera, verrà eseguito il branch corrispondente e l'istruzione sarà terminata. Anche se più di una condizione è vera, verrà eseguito solo il primo branch vero.  

Condizioni nidificate
-------------------

\index{nested conditional}
\index{conditional!nested}
Una condizione può anche essere annidata all'interno di un'altra. Avremmo potuto scrivere l'esempio a tre branch anche in questo modo:

~~~~ {.python}
if x == y:
    print('x and y are equal')
else:
    if x < y:
        print('x is less than y')
    else:
        print('x is greater than y')
~~~~


La condizione esterna contiene due branch. Il primo contiene una semplice istruzione. Il secondo branch contiene un'istruzione `if`, composta da due branch propri. Questi due branch sono entrambi semplici istruzioni, sebbene possano essere anche istruzioni condizionali.

![Condizioni nidificate](height=2.0in@../images/nested)

Nonostante l'indentazione delle istruzioni renda la struttura visivamente più intuitiva, le *condizioni nidificate* diventano molto rapidamente difficili da comprendere. In generale, è meglio evitarle quando possibile. Gli operatori logici forniscono spesso un modo per semplificare le istruzioni nidificate. Ad esempio, possiamo riscrivere lo script seguente usando una singola condizione:

~~~~ {.python}
if 0 < x:
    if x < 10:
        print('x is a positive single-digit number.')
~~~~


Dato che l'istruzione `print` viene eseguita solo se vengono soddisfatte entrambe le condizioni, possiamo ottenere lo stesso effetto con l'operatore `and`:

~~~~ {.python}
if 0 < x and x < 10:
    print('x is a positive single-digit number.')
~~~~


Gestione delle eccezioni usando try ed except
----------------------------------------

In precedenza abbiamo esaminato un segmento di codice in cui abbiamo utilizzato le funzioni `input` e `int` per leggere e analizzare un numero intero inserito dall'utente. Abbiamo anche visto che questo potrebbe risultare insidioso:

~~~~ {.python}
>>> prompt = "What...is the airspeed velocity of an unladen swallow?\n"
>>> speed = input(prompt)
What...is the airspeed velocity of an unladen swallow?
What do you mean, an African or a European swallow?
>>> int(speed)
ValueError: invalid literal for int() with base 10:
>>>
~~~~


Quando l'interprete Python esegue queste istruzioni, verrà visualizzato un nuovo prompt, come se Python avesse pensato "oops" e fosse passato all'istruzione successiva. Tuttavia, se inserisci questo codice in uno script Python e si verifica questo errore, lo script si ferma immediatamente visualizzando un traceback, rifiutandosi di eseguire l'istruzione successiva.
\index{traceback}

Questo è uno script di esempio per convertire una temperatura da Fahrenheit a Celsius:
\index{fahrenheit}
\index{celsius}
\index{temperature conversion}

\VerbatimInput{../code3/fahren.py}

Se eseguiamo questo codice e gli forniamo valori non validi, fallirà semplicemente mostrando un messaggio di errore poco amichevole:

~~~~
python fahren.py
Enter Fahrenheit Temperature:72
22.22222222222222
~~~~




~~~~
python fahren.py
Enter Fahrenheit Temperature:fred
Traceback (most recent call last):
  File "fahren.py", line 2, in <module>
    fahr = float(inp)
ValueError: could not convert string to float: 'fred'
~~~~


Per gestire questi tipi di errori previsti e inaspettati esiste una funzione condizionale incorporata in Python chiamata "try/except". La finalità di `try` e `except` è collegata al sapere in anticipo che alcune sequenze di istruzioni potrebbero incontrare problemi. Pertanto si possono aggiungere alcune istruzioni alternative da eseguire in caso di errore. Queste istruzioni aggiuntive (il blocco except) verranno ignorate se non si verificano errori. Potresti pensare alla funzione `try` e `except` in Python come ad una "polizza assicurativa" su una sequenza di istruzioni. Ad esempio, possiamo riscrivere il codice del nostro convertitore di temperatura come segue:

\VerbatimInput{../code3/fahren2.py}

Python dopo l'inserimento di un valore esegue la sequenza di istruzioni nel blocco `try`. Se non rileva errori, salta il blocco `except` e procede. Se si verifica un'eccezione nel blocco `try`, Python blocca l'esecuzione `try` ed esegue le istruzioni presenti nel blocco `except`.

~~~~
python fahren2.py
Enter Fahrenheit Temperature:72
22.22222222222222
~~~~




~~~~
python fahren2.py
Enter Fahrenheit Temperature:fred
Please enter a number
~~~~


Gestire un'eccezione con un'istruzione `try` è definito "*catching* di un'eccezione". In questo esempio, la condizione `except` mostra un messaggio di errore. In generale, il *catching* di un'eccezione ti dà la possibilità di risolvere il problema o di riprovare, o almeno di terminare il programma elegantemente.  

Valutazione di un cortocircuito di espressioni logiche
-----------------------------------------------

\index{short circuit}
Quando Python sta elaborando un'espressione logica come `x >= 2 and (x/y) > 2`, calcola l'espressione da sinistra a destra. A causa della definizione di `and`, se `x` è minore di 2, l'espressione `x >= 2` è `False` e quindi l'intera espressione è `False` indipendentemente dal fatto che `(x/y) > 2` restituisca `True` o `False`. Quando Python rileva che non c'è nulla da guadagnare valutando il resto di un'espressione logica, interrompe la valutazione senza eseguire i calcoli rimanenti. Questo caso viene chiamato "*cortocircuito* della valutazione".

\index{guardian pattern}
\index{pattern!guardian}
Anche se ciò ti potrà sembrare una sottigliezza, il comportamento di cortocircuito porta a una tecnica intelligente chiamata *schema del guardiano*. Considera la seguente sequenza di codice:

~~~~ {.python}
>>> x = 6
>>> y = 2
>>> x >= 2 and (x/y) > 2
True
>>> x = 1
>>> y = 0
>>> x >= 2 and (x/y) > 2
False
>>> x = 6
>>> y = 0
>>> x >= 2 and (x/y) > 2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>>
~~~~


Il terzo esempio ha dato errore perché Python, nel calcolare `(x/y)` dove `y` è zero, è incappato in un errore di runtime. Il secondo esempio *non* è fallito perché, esendo la prima parte dell'espressione `x >= 2` calcolata come `False`, `(x/y)` non è mai stato eseguito a causa della regola del *cortocircuito*. Possiamo utilizzare questa logica per posizionare strategicamente uno *schema del guardiano* appena prima del calcolo che potrebbe causare un errore, come nell'esempio seguente:

~~~~ {.python}
>>> x = 1
>>> y = 0
>>> x >= 2 and y != 0 and (x/y) > 2
False
>>> x = 6
>>> y = 0
>>> x >= 2 and y != 0 and (x/y) > 2
False
>>> x >= 2 and (x/y) > 2 and y != 0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>>
~~~~


Nella prima espressione logica, `x >= 2` è `False`, quindi il calcolo si ferma su `and`. Nella seconda espressione logica, `x >= 2` è `True` ma `y != 0` è `False` quindi non raggiungiamo mai `(x/y)`. Nella terza espressione logica, il `y != 0` viene *dopo* il calcolo `(x/y)` pertanto l'espressione fallisce con un errore. Nella seconda espressione, diciamo che `y != 0` ha la funzione da *guardia* per assicurare che `(x/y)` venga eseguito solo se `y` è diverso da zero.  

Debug
---------

\index{debugging}
\index{traceback}
Quando si verifica un errore Python visualizza un traceback contenente molte informazioni che possono essere difficili da gestire ed interpretare. Le parti più utili sono di solito:

- il tipo di errore;
- dove si è verificato.

Gli errori di sintassi sono solitamente facili da trovare, ma ci sono alcuni tranelli. Gli errori di spaziatura possono essere difficoltosi da correggere perché gli spazi e le tabulazioni sono normalmente invisibili e siamo abituati ad ignorarli.
\index{whitespace}


~~~~ {.python}
>>> x = 5
>>>  y = 6
  File "<stdin>", line 1
    y = 6
    ^
IndentationError: unexpected indent
~~~~


In questo esempio, la seconda riga è rientrata di uno spazio, ma il messaggio di errore punta ad `y` e ciò può essere fuorviante. In generale, i messaggi di errore indicano il punto dove è stato rilevato il problema, anche se l'errore reale potrebbe essere in un punto precedente nel codice, a volte su una riga precedente. In generale, i messaggi di errore indicano dove è stato scoperto il problema, ma spesso quel punto non coincide con il punto dove è stato causato.  

\pagebreak

Glossario
--------

blocco
: la sequenza di istruzioni presenti all'interno di un'istruzione composta.
\index{body}

espressione booleana
: espressione che può assumere il valore Vero o Falso.
\index{boolean expression}
\index{expression!boolean}

branch
: una delle sequenze di istruzioni alternative di un'istruzione condizionale.
\index{branch}

condizione concatenata
: un'istruzione condizionale con una serie di branch alternativi.
\index{chained conditional}
\index{conditional!chained}

operatore di comparazione
: operatore che permette di confrontare due operandi: `==`, `!=`, `>`, `<`, `>=` e `<=`.

istruzione condizionale
: una istruzione che controlla il flusso di esecuzione in base alle condizioni impostate dallo sviluppatore.
\index{conditional statement}
\index{statement!conditional}

condizione
: l'espressione booleana in un'istruzione condizionale che determina quale branch debba essere eseguito.
\index{condition}

compound statement
: Un'istruzione composta da un'intestazione e che termina con due punti (:) ed un corpo rientrato rispetto all'intestazione.
\index{compound statement}

schema del guardiano
: espressione logica che, con comparazioni aggiuntive, sfruttare il comportamento definito *cortocircuito della valutazione*.
\index{guardian pattern}
\index{pattern!guardian}

operatore logico
: uno degli operatori che combina espressioni booleane: `and`, `or`, e `not`.
\index{logical operator}
\index{operator!logical}

condizionale nidificato: un'istruzione condizionale che appare in uno dei branch di un'altra istruzione condizionale.
\index{nested conditional}
\index{conditional!nested}

traceback
: elenco delle funzioni in esecuzione che viene visualizzato quando si verifica un'eccezione.
\index{traceback}

cortocircuito
: si verifica quando Python, a metà strada nel calcolo di un'espressione logica, interrompe il calcolo perché conosce il valore finale dell'espressione senza dover calcolare il resto delle operazioni.
\index{short circuit}

Esercizi
---------

**Esercizio 1:** Riscrivi lo script del calcolo della retribuzione per attribuire ad un dipendente una maggiorazione oraria di 1,5 volte, per le ore di lavoro straordinario fatte oltre le 40.

~~~~
Enter Hours: 45
Enter Rate: 10
Pay: 475.0
~~~~


**Esercizio 2:** Riscrivi lo script sul calcolo della retribuzione utilizzando `try` e `except` in modo che il programma gestisca input non-numerici in maniera elegante visualizzando un messaggio prima di uscire dal programma. Di seguito vengono mostrate due esecuzioni del programma:

~~~~
Enter Hours: 20
Enter Rate: nine
Error, please enter numeric input
~~~~




~~~~
Enter Hours: forty
Error, please enter numeric input
~~~~


**Esercizio 3:** Scrivi un programma per richiedere un valore compreso tra 0.0 e 1.0. Se non è compreso nell'intervallo specificato, visualizza un messaggio di errore. Se è compreso tra 0,0 e 1,0, visualizza un giudizio utilizzando la seguente tabella:

~~~~
 Score   Grade
>= 0.9     A
>= 0.8     B
>= 0.7     C
>= 0.6     D
 < 0.6     F
~~~~




~~~~
Enter score: 0.95
A
~~~~




~~~~
Enter score: perfect
Bad score
~~~~




~~~~
Enter score: 10.0
Bad score
~~~~




~~~~
Enter score: 0.75
C
~~~~




~~~~
Enter score: 0.5
F
~~~~


Esegui varie volte il programma per testarlo con diversi valori di input.
