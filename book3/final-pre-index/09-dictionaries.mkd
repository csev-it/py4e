
Dizionari
============

\index{dictionary}
\index{dictionary}

\index{type!dict}
\index{key}
\index{key-value pair}
\index{index}
\index{}

Un *dizionario* è come un elenco, ma più generico: in un elenco gli indici di posizione devono essere numeri interi; in un dizionario gli indici possono essere (più o meno) di qualsiasi tipo. Puoi pensare a un dizionario come una correlazione tra un insieme di indici (chiamati *chiavi*) e un insieme di valori.
Ogni chiave viene associata ad un valore. Questa associazione è chiamata *coppia chiave-valore* o talvolta *elemento*.  
Ad esempio, costruiremo un dizionario che associ parole inglesi e spagnole dove, quindi, le chiavi e i valori saranno tutte stringhe.  
Puoi creare un dizionario vuoto tramite la funzione `dict`. Poiché `dict` è il nome di una funzione integrata, dovresti evitare di usarlo come nome di variabile.

\index{dict function}
\index{function!dict}

~~~~ {.python .trinket}
>>> eng2sp = dict()
>>> print(eng2sp)
{}
~~~~

Le parentesi graffe `{}`, rappresentano un dizionario vuoto. Per aggiungere elementi al dizionario, puoi usare le parentesi quadre:

\index{squiggly bracket}
\index{bracket!squiggly}

~~~~ {.python}
>>> eng2sp['one'] = 'uno'
~~~~

Questa linea crea un oggetto che associa la chiave "one" al valore "uno". Se visualizzi nuovamente il dizionario, vedrai una coppia chiave-valore con due punti tra la chiave e il valore:

~~~~ {.python}
>>> print(eng2sp)
{'one': 'uno'}
~~~~

Questo formato di output è anche un formato di input. Ad esempio, puoi creare un nuovo dizionario con tre elementi. Ma se visualizzi `eng2sp`, potresti rimanere sorpreso:

~~~~ {.python}
>>> eng2sp = {'one': 'uno', 'two': 'dos', 'three': 'tres'}
>>> print(eng2sp)
{'one': 'uno', 'three': 'tres', 'two': 'dos'}
~~~~

L'ordine delle coppie chiave-valore non è lo stesso. Se digiti lo stesso esempio sul tuo computer, potresti ottenere un risultato ancora diverso. In generale, l'ordine degli elementi in un dizionario è imprevedibile.

Ma questo non è un problema perché gli elementi di un dizionario non sono mai indicizzati con indici interi. Invece, vanno usate le chiavi per cercare i valori corrispondenti:

~~~~ {.python}
>>> print(eng2sp['two'])
'dos'
~~~~

La chiave `'two'` si associa sempre al valore "dos" in modo che l'ordine degli oggetti non abbia importanza. Se provi a visualizzare una chiave non presente nel dizionario, otterrai un'eccezione:

\index{exception!KeyError}
\index{KeyError}

~~~~ {.python}
>>> print(eng2sp['four'])
KeyError: 'four'
~~~~

La funzione `len` può essere utilizzata sui dizionari: restituisce il numero di coppie chiave-valore:

\index{len function}
\index{function!len}

~~~~ {.python}
>>> len(eng2sp)
3
~~~~

L'operatore `in` lavora sui dizionari: ti dice se quello che cerchi risulta essere una *chiave* del dizionario (non è sufficiente che risulti come un valore).

\index{membership!dictionary}
\index{in operator}
\index{operator!in}

~~~~ {.python}
>>> 'one' in eng2sp
True
>>> 'uno' in eng2sp
False
~~~~

Per vedere se qualcosa risulta come valore in un dizionario, puoi usare il metodo `values`, che restituisce i valori come un elenco e successivamente l'operatore `in`:

\index{values method}
\index{method!values}

~~~~ {.python}
>>> vals = list(eng2sp.values())
>>> 'uno' in vals
True
~~~~

L'operatore `in` utilizza algoritmi diversi per elenchi e dizionari. Per gli elenchi, utilizza un algoritmo di ricerca lineare. Man mano che l'elenco si allunga, il tempo di ricerca si allunga in proporzione diretta alla dimensione dello stesso. Per i dizionari Python utilizza un algoritmo chiamato *tabella degli hash* che ha una proprietà notevole: l'operatore `in` richiede circa la stessa quantità di tempo indipendentemente dal numero di elementi presenti in un dizionario. Non ti spiegherò perché le funzioni di hash siano così magiche, ma puoi ottenere ulteriori informazioni da
[wikipedia.org/wiki/Hash\_table](wikipedia.org/wiki/Hash_table).

\index{hash table}

**Esercizio 1:**

Scarica una copia del file:
[www.py4e.com/code3/words.txt](http://www.py4e.com/code3/words.txt)

\index{set membership}
\index{membership!set}

Scrivi un programma che legga le parole in `words.txt` e le memorizzi come chiavi in un dizionario. Non importa quali siano i valori. Quindi puoi usare l'operatore `in` per verificare rapidamente se una stringa è contenuta nel dizionario.   

Dizionario come insieme di contatori
-------------------------------

\index{counter}

Supponiamo di avere una stringa di cui vuoi contare quante volte appaia ogni lettera. Ci sono diversi modi per farlo:

1.   Potresti creare 26 variabili, una per ogni lettera dell'alfabeto. Quindi potresti scorrere la stringa e, per ogni carattere, incrementare il contatore corrispondente probabilmente usando una condizione concatenata.

2.   Potresti creare una lista con 26 elementi per poi convertire ciascuno in un numero (utilizzando la funzione `ord`), infine utilizzare il numero come indice nell'elenco e incrementare il contatore appropriato.

3.   Potresti creare un dizionario con caratteri come chiavi e contatori come valori corrispondenti. La prima volta che trovi un nuovo carattere, dovrai aggiungere un elemento al dizionario. Successivamente, dovresti incrementare il valore di un elemento esistente.

Ognuna di queste opzioni esegue lo stesso calcolo, ma ognuna di esse lo implementa in un modo diverso.

\index{implementation}

Un'*implementazione* è un modo di eseguire un calcolo; alcune sono migliori di altre. Ad esempio, un vantaggio dell'adozione di un dizionario è che non dobbiamo sapere in anticipo quali lettere saranno presenti nella stringa ma dobbiamo solo far spazio per quelle che appariranno.

Ecco come potrebbe apparire il codice:

~~~~ {.python .trinket}
word = 'brontosaurus'
d = dict()
for c in word:
    if c not in d:
        d[c] = 1
    else:
        d[c] = d[c] + 1
print(d)
~~~~

Stiamo in realtà calcolando un *istogramma*, che è un termine statistico per un insieme di contatori (o frequenze).

\index{histogram}
\index{frequency}
\index{traversal}

Il ciclo `for` analizza la stringa: ogni volta che viene eseguito il ciclo, se il carattere contenuto nella variabile `c` non è nel dizionario, viene creato un nuovo elemento con la chiave `c` e con valore iniziale 1 (poiché abbiamo visto questa lettera una sola volta). Se `c` è già presente nel dizionario incrementiamo `d[c]`.

\index{histogram}

Ecco l'output del programma:

~~~~ {.python}
{'a': 1, 'b': 1, 'o': 2, 'n': 1, 's': 2, 'r': 2, 'u': 2, 't': 1}
~~~~

L'istogramma indica che le lettere "a" e "b" compaiono una sola volta; "o" appare due volte e così via.

\index{get method}
\index{method!get}

I dizionari hanno un metodo chiamato `get` che riceve una chiave e un valore predefinito. Se la chiave è presente nel dizionario, `get` restituisce il valore corrispondente, altrimenti restituisce il valore predefinito.

Per esempio:

~~~~ {.python .trinket}
>>> counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
>>> print(counts.get('jan', 0))
100
>>> print(counts.get('tim', 0))
0
~~~~

Possiamo usare `get` per scrivere il nostro istogramma in modo più rapido. Dato che il metodo `get` gestisce automaticamente il caso in cui una chiave non è presente in un dizionario, possiamo ridurre quattro righe ad una sola ed eliminare l'istruzione `if`.

~~~~ {.python}
word = 'brontosaurus'
d = dict()
for c in word:
    d[c] = d.get(c,0) + 1
print(d)
~~~~

L'uso del metodo `get` per semplificare questo ciclo di conteggio sarà un "idioma" usato molto comunemente in Python e lo vedrai molte altre volte nel resto del libro. Quindi dovresti fermarti un momento e confrontare il ciclo che utilizza l'istruzione `if` e l'operatore `in` con il ciclo che utilizza il metodo `get`. Fanno esattamente la stessa cosa, ma il secondo è più conciso.

\index{idiom}

Dizionari e file
----------------------

Uno degli usi più comuni di un dizionario è contare la frequenza di parole in un file di testo. Iniziamo con un semplice file tratto dal testo di *Romeo e Giulietta*.

Per i primi esempi utilizzeremo una versione abbreviata e semplificata del testo senza segni di punteggiatura. Successivamente lavoreremo con il testo di scena con punteggiatura inclusa.

~~~~
But soft what light through yonder window breaks
It is the east and Juliet is the sun
Arise fair sun and kill the envious moon
Who is already sick and pale with grief`
~~~~

Scriveremo un programma Python per leggere le righe del file, suddividerle in un elenco di parole, quindi contare ogni parola presente utilizzando un dizionario.

\index{nested loops}
\index{loop!nested}

Vedrai che avremo bisogno di due cicli `for`. Il ciclo esterno legge ognuna delle righe del file e il ciclo interno si ripete su ciascuna delle parole presenti in quella particolare riga. Questo è un esempio dello schema chiamato *cicli annidati* in quanto uno dei cicli è il ciclo *esterno* e l'altro il ciclo *interno*. Poiché il ciclo interno esegue tutte le sue iterazioni ogni volta che il ciclo esterno effettua una singola iterazione, pensiamo come se il ciclo interno iterasse "più rapidamente" e il ciclo esterno iterasse più lentamente.

\index{Romeo and Juliet}

La combinazione dei due cicli annidati garantisce che conteremo ogni parola di ogni riga del file in input.

\VerbatimInput{../code3/count1.py}
\begin{trinketfiles}
../code3/romeo.txt
\end{trinketfiles}

Quando esegui lo script, vedrai un output grezzo di tutti i conteggi in una serie di hash disordinati (il file `romeo.txt` è disponibile su
[www.py4e.com/code3/romeo.txt](http://www.py4e.com/code3/romeo.txt)).

~~~~
python count1.py
Enter the file name: romeo.txt
{'and': 3, 'envious': 1, 'already': 1, 'fair': 1,
'is': 3, 'through': 1, 'pale': 1, 'yonder': 1,
'what': 1, 'sun': 2, 'Who': 1, 'But': 1, 'moon': 1,
'window': 1, 'sick': 1, 'east': 1, 'breaks': 1,
'grief': 1, 'with': 1, 'light': 1, 'It': 1, 'Arise': 1,
'kill': 1, 'the': 3, 'soft': 1, 'Juliet': 1}
~~~~

È un po' scomodo cercare nel dizionario le parole più comuni e i loro conteggi, quindi abbiamo bisogno di aggiungere altro codice Python per ottenere un output che ci sarà più leggibile.  

Cicli e dizionari
------------------------

\index{dictionary!looping with}
\index{looping!with dictionaries}
\index{traversal}

Quando utilizzi un dizionario come argomento in un'istruzione `for`, tutte le chiavi contenute nel dizionario verranno controllate dal ciclo. Questo ciclo visualizza ogni chiave ed il suo corrispondente valore:

~~~~ {.python}
counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
for key in counts:
    print(key, counts[key])
~~~~

Ecco come appare il suo output:

~~~~
jan 100
chuck 1
annie 42
~~~~

Anche qui le chiavi non seguono alcun ordine particolare.

\index{idiom}

Possiamo usare questo schema per implementare i vari cicli idiomatici che abbiamo descritto in precedenza. Ad esempio, se volessimo trovare tutte le voci in un dizionario con un valore superiore a dieci, potremmo scrivere il seguente codice:

~~~~ {.python}
counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
for key in counts:
    if counts[key] > 10 :
        print(key, counts[key])
~~~~

Il ciclo `for` scorre le *chiavi* del dizionario, quindi dobbiamo utilizzare l'operatore di indice per recuperare il *valore* corrispondente per ogni chiave. Ecco come appare l'output:

~~~~
jan 100
annie 42
~~~~

Vediamo solo le voci con un valore superiore a 10.

\index{keys method}
\index{method!keys}

Se desiderassi visualizzare le chiavi in ordine alfabetico, sarebbe necessario prima creare un elenco delle chiavi nel dizionario utilizzando il metodo `keys`, quindi ordinare l'elenco e scorrere l'elenco ordinato, cercando ogni chiave e visualizzando l'elenco ordinato delle coppie chiave-valore come segue:

~~~~ {.python}
counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
lst = list(counts.keys())
print(lst)
lst.sort()
for key in lst:
    print(key, counts[key])
~~~~

Ecco come appare l'output:

~~~~
['jan', 'chuck', 'annie']
annie 42
chuck 1
jan 100
~~~~

Per prima cosa vedrai la lista delle chiavi in modo non ordinato che otteniamo dal metodo `keys`. Quindi vedrai le coppie chiave-valore ordinate dal ciclo `for`.  

Analisi avanzata del testo
---------------------

\index{Romeo and Juliet}

Nell'esempio precedente, utilizzando il file `romeo.txt`, abbiamo reso il file il più semplice possibile rimuovendo manualmente tutti i segni di punteggiatura. Il testo reale ha molta punteggiatura, come puoi vedere qui sotto.

~~~~
But, soft! what light through yonder window breaks?
It is the east, and Juliet is the sun.
Arise, fair sun, and kill the envious moon,
Who is already sick and pale with grief,
~~~~

Dato che la funzione `split` cerca spazi e tratta le parole come elementi separati da spazi, tratteremo le parole "soft!" e "soft" come parole *differenti* e creeremo una voce di dizionario separata per ognuna di queste.

Inoltre, poiché il file è in maiuscolo, considereremo "who" e "Who" come parole diverse con diversi conteggi.

Possiamo risolvere entrambi i problemi usando i metodi per le stringhe `lower`, `punctuation` e `translate`.
Il metodo `translate` è il più subdolo. Ecco la documentazione del metodo `translate`:

`line.translate(str.maketrans(fromstr, tostr, deletestr))`

*Sostituisce i caratteri in `fromstr` con il carattere nella stessa posizione in `tostr` ed elimina tutti i caratteri che sono in `deletestr`. `Fromstr` e `tostr` possono essere stringhe vuote e il parametro `deletestr` può essere omesso.*

Non specificheremo la `tostr`, ma useremo il parametro `deletestr` per eliminare tutta la punteggiatura. Lasceremo persino che Python ci fornisca la lista dei caratteri che considera "punteggiatura":

~~~~ {.python}
>>> import string
>>> string.punctuation
'!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
~~~~

I parametri utilizzati dal metodo `translate` erano diversi in Python 2.0.

Ora effettuiamo le seguenti modifiche al nostro programma:

\VerbatimInput{../code3/count2.py}
\begin{trinketfiles}
../code3/romeo-full.txt
\end{trinketfiles}

Parte dell'imparare l'"Arte di Python" o il "Pensiero Pythonico" è comprendere che Python ha spesso funzionalità integrate per molti problemi comuni di analisi dei dati. Nel tempo, vedrete abbastanza codice di esempio e leggerete abbastanza documentazione per sapere dove guardare per vedere se qualcuno ha già scritto qualcosa che renderà il vostro lavoro molto più facile. Quanto segue è una versione abbreviata dell'output:

~~~~
Enter the file name: romeo-full.txt
{'swearst': 1, 'all': 6, 'afeard': 1, 'leave': 2, 'these': 2,
'kinsmen': 2, 'what': 11, 'thinkst': 1, 'love': 24, 'cloak': 1,
a': 24, 'orchard': 2, 'light': 5, 'lovers': 2, 'romeo': 40,
'maiden': 1, 'whiteupturned': 1, 'juliet': 32, 'gentleman': 1,
'it': 22, 'leans': 1, 'canst': 1, 'having': 1, ...}
~~~~

Osserva questo output: è ancora poco gestibile ma possiamo usare Python per darci esattamente quello che stiamo cercando. Per farlo però ho bisogno di spiegarti come funzionano le *tuple* di Python. Riprenderemo questo esempio una volta che avrai familiarità con queste cose.  

Debug
---------

\index{debugging}

Nel lavorare con insiemi di dati più grandi può risultare poco pratico eseguire il debug visualizzando e controllando i dati manualmente. Ecco alcuni suggerimenti per il debug di insiemi di dati di grandi dimensioni:

Ridimensionare l'input: se possibile, ridurre la dimensione del dataset. Ad esempio, se il programma deve analizzare un file di testo, inizia con solo le prime 10 righe o con il campione più piccolo che riesci a trovare. Puoi quindi modificare il file stesso o (meglio) lo script in modo che legga solo le prime `n` righe.

Se c'è un errore, riduci `n` al numero minore di righe in cui si manifesta l'errore, poi aumentalo gradualmente man mano che trovi e correggi gli errori che si presentano.

Controllare i riepiloghi e i tipi: anziché visualizzare e controllare l'intero set di dati, prendi in considerazione la visualizzazione di riepiloghi dei dati: ad esempio, il numero di elementi in un dizionario o il totale di un elenco di numeri.

Una causa comune negli errori di runtime è un valore del tipo errato. Per eseguire il debug di questo tipo di errore è spesso sufficiente visualizzarne il tipo e agire di conseguenza.

Inserire autocontrolli: a volte puoi scrivere del codice per verificare automaticamente i possibili errori. Ad esempio, se si calcola la media di un elenco di numeri, è possibile verificare che il risultato non sia più grande o più piccolo di tutti gli elementi presenti. Questo viene definito "controllo di integrità" perché individua risultati "completamente illogici".

\index{sanity check}
\index{consistency check}

Un altro tipo di controllo confronta i risultati di due diversi calcoli per verificare se sono coerenti. Questo è chiamato "controllo di coerenza".

Visualizzare bene l'output: la formattazione dell'output di debug può rendere più facile l'individuazione di un errore.

Ancora una volta, il tempo speso per la costruzione di impalcature (scaffolding) può ridurre il tempo che dovrai spendere nel debugging.

\index{scaffolding}

Glossario
--------

**Dizionario**
: Una correlazione tra una serie di chiavi e i corrispondenti valori.
\index{dictionary}

**Tabella di hash**
: L'algoritmo utilizzato per implementare i dizionari Python.
\index{hashtable}

**Funzione di hash**
: Una funzione utilizzata da una tabella di hash per calcolare la posizione di una chiave.
\index{hash function}

**Istogramma**
: Una serie di contatori.
\index{histogram}

**Implementazione**
: Il modo utilizzato per eseguire un calcolo.
\index{implementation}

**Elemento**
: Un altro nome utilizzato per una coppia chiave-valore.
\index{item!dictionary}

**Chiave**
: L'oggetto che appare in un dizionario come prima parte di una coppia chiave-valore.
\index{key}

**Coppia chiave-valore**
: La rappresentazione della correlazione da una chiave a un valore.
\index{key-value pair}

**Ricerca**
: L'operazione nel dizionario che permette di trovare una chiave e il valore corrispondente.
\index{lookup}

**Cicli annidati**
: Uno o più cicli contenuti "all'interno" di un altro ciclo. Il ciclo interno viene completato ogni volta che viene eseguito il ciclo esterno.
\index{nested loops}
\index{loop!nested}

**Valore**
: l'oggetto che appare in un dizionario come seconda parte di una coppia chiave-valore. Questo è un modo più specifico di utilizzare la parola "valore".
\index{value}

Esercizi
---------

**Esercizio 2:** Scrivi un programma che classifichi ogni messaggio di posta in base al giorno della settimana in cui è stato inviato. Per fare ciò, cerca le righe che iniziano con "From", quindi cerca la terza parola e aggiorna il conteggio di ciascuno dei giorni della settimana. Alla fine del programma visualizza i contenuti del tuo dizionario (l'ordine non ha importanza).  
Riga di esempio:

~~~~
    From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
~~~~

Esempio di esecuzione:

~~~~
python dow.py
Enter a file name: mbox-short.txt
{'Fri': 20, 'Thu': 6, 'Sat': 1}
~~~~

**Esercizio 3:** Scrivi un programma che analizzi un log di posta, crei un istogramma utilizzando un dizionario per contare quanti messaggi sono arrivati da ciascun indirizzo di posta elettronica ed infine visualizzi il dizionario.

~~~~
Enter file name: mbox-short.txt
{'gopal.ramasammycook@gmail.com': 1, 'louis@media.berkeley.edu': 3,
'cwen@iupui.edu': 5, 'antranig@caret.cam.ac.uk': 1,
'rjlowe@iupui.edu': 2, 'gsilver@umich.edu': 3,
'david.horwitz@uct.ac.za': 4, 'wagnermr@iupui.edu': 1,
'zqian@umich.edu': 4, 'stephen.marquard@uct.ac.za': 2,
'ray@media.berkeley.edu': 1}
~~~~

**Esercizio 4:** Aggiungi del codice allo script dell'esercizio precedente che indichi chi ha il maggior numero di messaggi nel file.

Dopo che sono stati analizzati tutti i dati ed i risultati sono salvati nel dizionario sono stati letti e il dizionario è stato creato, tramite un ciclo "massimo" (vedi nel capitolo 5  la sezione 5.7.2 per limitare i cicli) trova chi ha più messaggi e visualizzane il numero.

~~~~
Enter a file name: mbox-short.txt
cwen@iupui.edu 5

Enter a file name: mbox.txt
zqian@umich.edu 195
~~~~

**Esercizio 5:** Scrivi uno script che registri il nome di dominio (anziché l'indirizzo) da cui è stato inviato il messaggio anziché il mittente (ovvero, l'intero indirizzo email). Alla fine fai in modo che il programma visualizzi i contenuti del dizionario.


~~~~
python schoolcount.py
Enter a file name: mbox-short.txt
{'media.berkeley.edu': 4, 'uct.ac.za': 6, 'umich.edu': 7,
'gmail.com': 1, 'caret.cam.ac.uk': 1, 'iupui.edu': 8}
~~~~
