%


Tuple
=========


Le tuple sono immutabili
--------------------

\index{tuple}
\index{type!tuple}
\index{sequence}

La tupla ^ [Curiosità: la parola "tupla" deriva dai nomi dati a sequenze di numeri di lunghezza variabile: singola, doppie, triple, quadruple, quintuple, sestuple, settuple, ecc.] è una sequenza di valori molto simile a un elenco. I valori memorizzati in una tupla possono essere di qualsiasi tipo e vengono indicizzati tramite numeri interi. La caratteristica fondamentale delle tuple è l'essere *immutabili*.
Sulle tuple è possibile effettuare operazioni di comparazione e hash, possiamo quindi ordinare gli elenchi delle tuple e utilizzare queste ultime come valori chiave nei dizionari Python.

\index{mutability}
\index{hashable}
\index{comparable}
\index{immutability}

Sintatticamente la tupla è un elenco di valori separati da virgole:

~~~~ {.python}
>>> t = 'a', 'b', 'c', 'd', 'e'
~~~~

Anche se non necessario è convenzione racchiudere le tuple tra parentesi tonde per identificarle rapidamente quando esaminiamo uno script di Python:

\index{parentheses!tuples in}

~~~~ {.python}
>>> t = ('a', 'b', 'c', 'd', 'e')
~~~~

Per creare una tupla contenente un singolo elemento, scrivere l'elemento tra virgolette seguito da una virgola:

\index{singleton}
\index{tuple!singleton}

~~~~ {.python .trinket}
>>> t1 = ('a',)
>>> type(t1)
<type 'tuple'>
~~~~

In assenza della virgola, Python considera `('a')` come un'espressione contenente una stringa tra parentesi:

~~~~ {.python}
>>> t2 = ('a')
>>> type(t2)
<type 'str'>
~~~~

Un altro modo per costruire una tupla è usare la funzione `tuple`. In assenza di argomenti, viene creata una tupla vuota:

\index{tuple function}
\index{function!tuple}

~~~~ {.python .trinket}
>>> t = tuple()
>>> print(t)
()
~~~~

Utilizzando come argomento di tuple una sequenza (stringa, elenco o tupla), il risultato che otterrai sarà a sua volta una tupla composta dagli elementi della sequenza:

~~~~ {.python .trinket}
>>> t = tuple('lupins')
>>> print(t)
('l', 'u', 'p', 'i', 'n', 's')
~~~~

Dato che `tuple` è il nome di una funzione di Python, devi evitare di usarlo come nome di variabile.

La maggior parte degli operatori degli elenchi funziona anche sulle tuple. L'operatore parentesi quadra permette di indicare la posizione di un elemento:

\index{bracket operator}
\index{operator!bracket}

~~~~ {.python .trinket}
>>> t = ('a', 'b', 'c', 'd', 'e')
>>> print(t[0])
'a'
~~~~

L'operatore slice ti permette di indicare un intervallo di elementi.

\index{slice operator}
\index{operator!slice}
\index{tuple!slice}
\index{slice!tuple}

~~~~ {.python}
>>> print(t[1:3])
('b', 'c')
~~~~

Se cerchi però di modificare uno degli elementi della tupla, tutto quello che otterrai è un messaggio di errore:

\index{exception!TypeError}
\index{TypeError}
\index{item assignment}
\index{assignment!item}

~~~~ {.python}
>>> t[0] = 'A'
TypeError: object doesn't support item assignment
~~~~

Pur non essendo possibile modificare gli elementi di una tupla, puoi sostituirla con un'altra:

~~~~ {.python .trinket}
>>> t = ('A',) + t[1:]
>>> print(t)
('A', 'b', 'c', 'd', 'e')
~~~~

Confronto tra tuple
----------------

\index{comparison!tuple}
\index{tuple!comparison}
\index{sort method}
\index{method!sort}

Gli operatori di confronto funzionano con le tuple e le altre sequenze. Python inizia con il confrontare il primo elemento di ogni sequenza, se sono uguali, passa all'elemento successivo, e così via, finché non ne trova due diversi. Gli elementi successivi non vengono considerati (anche se sono molto grandi).

~~~~ {.python .trinket}
>>> (0, 1, 2) < (0, 3, 4)
True
>>> (0, 1, 2000000) < (0, 3, 4)
True
~~~~

La funzione `sort` funziona allo stesso modo: di base ordina iniziando dal primo elemento, ma nel caso di pari lunghezza, inizia dal secondo elemento, e così via.

Questa caratteristica torna utile nel modello chiamato *DSU* per

Decorate (decorare)
: una sequenza costruendo un elenco di tuple con una o più chiavi di ordinamento che precedono gli elementi della sequenza,

Sort (ordinare)
: l'elenco di tuple usando il `sort` incorporato in Python, e

Undecorate (eliminare)
: la decorazione estraendo gli elementi della sequenza, una volta ordinati.

\index{DSU pattern}
\index{pattern!DSU}
\index{decorate-sort-undecorate pattern}
\index{pattern!decorate-sort-undecorate}
\index{Romeo and Juliet}

Ad esempio, supponi di avere un elenco di parole da ordinare dalla più lunga alla più corta:

\VerbatimInput{../code3/soft.py}

Il primo ciclo crea un elenco di tuple, ognuna delle quali è una parola preceduta da un numero che indica la sua lunghezza. `sort` confronta il primo elemento, la lunghezza, mentre il secondo elemento viene preso in considerazione solo se necessario per superare i casi in cui la lunghezza sia la stessa.
L'argomento `reverse = True` imposta l'esecuzione di `sort` in ordine decrescente.

\index{keyword argument}
\index{argument!keyword}
\index{traversal}

Il secondo ciclo scorre l'elenco di tuple e crea un elenco delle parole in ordine decrescente di lunghezza. Le parole di quattro caratteri sono ordinate in ordine alfabetico *inverso*: "what" apparirà prima di "soft" nell'elenco che segue.

L'output del programma è il seguente:

~~~~
['yonder', 'window', 'breaks', 'light', 'what',
'soft', 'but', 'in']
~~~~

Ovviamente i versi perdono molto del loro impatto poetico quando sono trasformati in una lista di parole ordinate in ordine di lunghezza decrescente.

Assegnazione di tupla
----------------

\index{tuple!assignment}
\index{assignment!tuple}
\index{swap pattern}
\index{pattern!swap}

Una delle caratteristiche sintattiche uniche del linguaggio Python è la possibilità di avere una tupla sul lato sinistro di un'istruzione di assegnazione. Ciò consente di assegnare più di una variabile alla volta quando il lato sinistro è una sequenza.

In questo esempio abbiamo un elenco di due elementi (quindi una sequenza) e assegniamo il primo e il secondo elemento della sequenza alle variabili `x` e `y` con una singola istruzione.

~~~~ {.python .trinket}
>>> m = [ 'have', 'fun' ]
>>> x, y = m
>>> x
'have'
>>> y
'fun'
>>>
~~~~

Non si tratta di magia: Python traduce *approssimativamente* la sintassi dell'assegnazione della tupla come segue: ^ [Python non traduce la sintassi alla lettera. Ad esempio, se provate a fare la stessa cosa con un dizionario, non funzionerà come previsto.]

~~~~ {.python .trinket}
>>> m = [ 'have', 'fun' ]
>>> x = m[0]
>>> y = m[1]
>>> x
'have'
>>> y
'fun'
>>>
~~~~

Da un punto di cista meramente stilistico, solitamente quando viene utilizzata una tupla sul lato sinistro dell'istruzione di assegnazione non vengono utilizzate le parentesi. In ogni caso la sintassi seguente è altrettanto valida:

~~~~ {.python}
>>> m = [ 'have', 'fun' ]
>>> (x, y) = m
>>> x
'have'
>>> y
'fun'
>>>
~~~~

Un'applicazione particolarmente ingegnosa dell'assegnazione di tuple ci consente di *scambiare* i valori di due variabili con una singola istruzione:

~~~~ {.python}
>>> a, b = b, a
~~~~

Entrambi i lati di questa istruzione sono tuple: sul lato sinistro c'è una tupla di variabili, nel lato destro c'è una tupla di espressioni. Ogni valore sul lato destro viene assegnato alla rispettiva variabile sul lato sinistro. Tutte le espressioni sul lato destro sono valutate prima di qualsiasi assegnazione.

Il numero di variabili a sinistra e il numero di valori a destra devono essere uguali:

\index{exception!ValueError}
\index{ValueError}

~~~~ {.python}
>>> a, b = 1, 2, 3
ValueError: too many values to unpack
~~~~

Più in generale, il lato destro può contenere un qualsiasi tipo di sequenza (stringa, elenco o tupla). Ad esempio, per suddividere un indirizzo email in nome utente e dominio, è possibile scrivere:

\index{split method}
\index{method!split}
\index{email address}

~~~~ {.python}
>>> addr = 'monty@python.org'
>>> uname, domain = addr.split('@')
~~~~

Il valore restituito da `split` è un elenco composto da due elementi; il primo assegnato a `uname`, il secondo a `domain`.

~~~~ {.python}
>>> print(uname)
monty
>>> print(domain)
python.org
~~~~

Dizionari e tuple
-----------------------

\index{dictionary}
\index{items method}
\index{method!items}
\index{key-value pair}

I dizionari supportano un metodo chiamato `items` che restituisce un elenco di tuple, in cui ogni tupla è una coppia chiave-valore:

~~~~ {.python .trinket}
>>> d = {'a':10, 'b':1, 'c':22}
>>> t = list(d.items())
>>> print(t)
[('b', 1), ('a', 10), ('c', 22)]
~~~~

Come dovresti aspettarti da un dizionario, gli elementi non sono in un ordine particolare.

Tuttavia, poiché l'elenco di tuple è un elenco e le tuple sono comparabili, possiamo ordinare l'elenco di tuple. Convertire un dizionario in un elenco di tuple è un modo per far sì che sia possibile ordinare il contenuto di un dizionario in base a una chiave:

~~~~ {.python}
>>> d = {'a':10, 'b':1, 'c':22}
>>> t = list(d.items())
>>> t
[('b', 1), ('a', 10), ('c', 22)]
>>> t.sort()
>>> t
[('a', 10), ('b', 1), ('c', 22)]
~~~~

Il nuovo elenco viene ordinato secondo un ordine alfabetico crescente del valore della chiave.

Assegnazione multipla con dizionari
-------------------------------------

\index{traverse!dictionary}
\index{dictionary!traversal}

Combinando `items`, assegnazione di tuple e `for` è possibile individuare un modello di codice molto carino che scorra le chiavi e i valori di un dizionario in un singolo ciclo:

~~~~ {.python}
for key, val in list(d.items()):
    print(val, key)
~~~~

Questo ciclo ha due *variabili di iterazione*, perché `items` restituisce un elenco di **tuple** e **`key, val`** è un'assegnazione di tupla che successivamente si ripete nel dizionario attraverso ciascuna delle coppie chiave-valore.

Per ogni iterazione nel ciclo, sia `key` che `value` avanzano alla successiva coppia chiave-valore nel dizionario (sempre in ordine di hash).
L'output di questo ciclo è:

~~~~
10 a
22 c
1 b
~~~~

Di nuovo, l'ordine è basato sul valore dell'hash (cioè, nessun ordine particolare).

Se combiniamo queste due tecniche, possiamo visualizzare il contenuto di un dizionario ordinato per il *valore* memorizzato in ciascuna coppia chiave-valore.

Per fare questo, prima dobbiamo creare un elenco di tuple in cui ogni tupla è `(valore, chiave)`. Il metodo `items` ci fornisce un elenco di tuple `(chiave, valore)`, che questa volta vogliamo ordinare per valore e non per chiave. Una volta creato l'elenco con le tuple chiave-valore è semplice ordinare l'elenco in ordine inverso e visualizzare il nuovo elenco.

~~~~ {.python}
>>> d = {'a':10, 'b':1, 'c':22}
>>> l = list()
>>> for key, val in d.items() :
...     l.append( (val, key) )
...
>>> l
[(10, 'a'), (22, 'c'), (1, 'b')]
>>> l.sort(reverse=True)
>>> l
[(22, 'c'), (10, 'a'), (1, 'b')]
>>>
~~~~

Costruendo attentamente l'elenco di tuple in modo da avere il valore come primo elemento di ogni tupla possiamo ordinare l'elenco di tuple in base al valore.

Le parole più comuni
---------------------

\index{Romeo and Juliet}

Torniamo al testo di *Romeo e Giulietta* Atto 2 - Scena 2: in questo modo possiamo implementare il nostro programma per utilizzare questa tecnica per visualizzare le dieci parole più comuni contenute nel testo:

\VerbatimInput{../code3/count3.py}
\begin{trinketfiles}
../code3/romeo-full.txt
\end{trinketfiles}

La prima parte del programma, quella che analizza il file e produce il dizionario che associa ogni parola al numero di volte che viene ripetuta nel testo, è rimasta invariata. Ora, piuttosto che visualizzare semplicemente i "conteggi" e terminare il programma, costruiamo un elenco di tuple "(val, key)" che poi ordineremo in ordine inverso.

Dato che il valore è a sinistra, verrà utilizzato per i confronti. Se è presente più di una tupla con lo stesso valore, verrà esaminato il secondo elemento (la chiave), in altre parole le tuple con lo stesso valore verranno ordinate in ordine alfabetico della chiave.

Alla fine scriviamo un bel ciclo `for` che esegue un'iterazione di assegnazione multipla e visualizza le dieci parole più comuni ripetendo una parte dell'elenco (`lst[:10]`).

Ora l'output sembra finalmente quello che vorremmo per la nostra analisi della frequenza delle parole.

~~~~
61 i
42 and
40 romeo
34 to
34 the
32 thou
32 juliet
30 that
29 my
24 thee
~~~~

Il fatto che questa complessa analisi dei dati possa essere eseguita con un programma Python di 19 righe di facile comprensione è una delle ragioni per cui Python è un buon candidato quale linguaggio per l'esplorazione delle informazioni.

Usare tuple come chiavi nei dizionari
------------------------------------

\index{tuple!as key in dictionary}
\index{hashable}

dato che le tuple sono *hashabili*, a differenza degli elenchi, se vogliamo creare una chiave *composta* da usare in un dizionario dobbiamo utilizzare una tupla.

Abbiamo bisogno di una chiave composta per creare una rubrica telefonica che associ le coppie cognome / nome a numeri di telefono. Supponendo di aver definito le variabili `last`, `first` e `number`, potremmo scrivere un'istruzione di assegnazione del dizionario come la seguente:

~~~~ {.python}
directory[last,first] = number
~~~~

L'espressione tra parentesi quadre è una tupla. Potremmo usare l'assegnazione della tupla in un ciclo `for` per scorrere questo dizionario.
\index{tuple!in brackets}

~~~~ {.python}
for last, first in directory:
    print(first, last, directory[last,first])
~~~~

Questo ciclo scorre le chiavi in `directory`, che in realtà sono tuple. Assegna poi gli elementi di ciascuna tupla alle variabili `last` e `first`, infine visualizza il nome e il numero di telefono corrispondente.

Sequenze: stringhe, elenchi e tuple - Oh cavolo!
--------------------------------------------

\index{sequence}

Ci siamo concentrati su elenchi di tuple, ma quasi tutti gli esempi in questo capitolo funzionano anche con elenchi di elenchi, tuple di tuple e tuple di elenchi. Per evitare di elencare le possibili combinazioni a volte è più semplice parlare di sequenze di sequenze.

In molti casi, i diversi tipi di sequenze (stringhe, elenchi e tuple) possono essere utilizzati in modo intercambiabile. Quindi come e perché sceglierne uno rispetto agli altri?

\index{string}
\index{list}
\index{tuple}
\index{mutability}
\index{immutability}

Ovviamente, le stringhe sono più limitate di altre sequenze perché gli elementi devono essere caratteri, per di più immutabili. Se hai bisogno della possibilità di cambiare i caratteri in una stringa (invece di crearne una nuova), potresti piuttosto usare un elenco di caratteri.

Gli elenchi sono usati più frequentemente delle tuple soprattutto perché sono modificabili. Ma ci sono alcuni casi in cui sono preferibili le tuple:
1.  In alcuni contesti, come in un'istruzione `return`, è sintatticamente più semplice creare una tupla anziché un elenco. In altri contesti potrebbe essere preferibile un elenco.
2.   Se devi utilizzare una sequenza come chiave di un dizionario, è necessario utilizzare un tipo immutabile le tuple o le stringhe.
3.   Se devi passare una sequenza come argomento di una funzione, l'utilizzo di tuple riduce le possibilità di comportamenti imprevisti dovuti agli alias.
Poiché le tuple sono immutabili, non sono disponibili metodi come `sort` e `reverse`, che possono modificare elenchi esistenti. Comunque Python ti mette a disposizione le funzioni integrate `sorted` e `reversed`, che accettano qualsiasi sequenza come parametro e restituiscono una nuova sequenza composta dagli stessi elementi ordinati diversamente.

\index{sorted function}
\index{function!sorted}
\index{reversed function}
\index{function!reversed}

Debug
---------

\index{debugging}
\index{data structure}
\index{shape error}
\index{error!shape}

Elenchi, dizionari e tuple sono conosciuti genericamente come *strutture di dati*. In questo capitolo abbiamo iniziato ad esaminare strutture di dati composte, come elenchi di tuple o dizionari che contengono tuple come chiavi ed elenchi come valori. Le strutture di dati composti sono utili ma sono soggette a ciò che chiamiamo *errori di formato*: errori, cioè, causati dal fatto che una struttura di dati è di tipo, dimensione o struttura sbagliati. Capita che mentre scrivi codice ti possa dimenticare del formato dei dati e possa introdurre un errore.

Ad esempio, un programma che si aspetta un elenco contenente un numero intero e tu gli passi un intero puro e semplice (non incluso in un elenco), ti darà errore.

Quando esegui il debug di un programma, specialmente se stai lavorando su un bug particolarmente ostico, ci sono quattro cose da provare:

**lettura**: esamina il tuo codice, rileggilo a te stesso e controlla che faccia quello che volevi facesse.

**esecuzione**: sperimenta apportando modifiche e eseguendo versioni diverse. Spesso se indichi la cosa giusta nel posto giusto del programma, il problema diventa ovvio. A volte dovrai passare un po' di tempo per costruire un'impalcatura (scaffolding).

**riflessione**: prenditi un po' di tempo per pensare di che tipo di errore parliamo: sintassi, runtime, semantica? Quali informazioni puoi ottenere dai messaggi di errore o dall'output del programma? Che tipo di errore potrebbe causare il problema che stai osservando? Cosa hai cambiato per ultimo, prima che apparisse il problema?

**ritirata**: a volte la cosa migliore da fare è tornare indietro, annullare le modifiche recenti, fino a quando non torni a un programma funzionante e che comprendi, da cui iniziare la ricostruzione.

Gli sviluppatori principianti a volte rimangono bloccati in una di queste attività, dimenticando le altre. Ognuna di queste attività ha il suo modo di portarti al disastro.

\index{typographical error}

Ad esempio, leggere il codice potrebbe essere d'aiuto se il problema è un errore tipografico, ma non serve se il problema è un errore concettuale. Se non capisci cosa fa esattamente il tuo programma, puoi leggerlo 100 volte e non vedere mai l'errore, perché l'errore è nella tua testa.

\index{experimental debugging}

Fare esperimenti può essere d'aiuto, specialmente se si eseguono test semplici e circoscritti. Ma se fai esperimenti senza pensare o leggere il tuo codice, potresti cadere in uno schema che chiamo **"programmazione per mezzo di una passeggiata aleatoria"** che consiste nel processo di apportare modifiche casuali fino a quando il programma non fa la cosa giusta. Inutile dire che questo tipo di attività può richiedere molto tempo.

\index{random walk programming}
\index{development plan!random walk programming}

Devi trovare il tempo per pensare. Il debug è come una scienza sperimentale. Dovresti almeno formulare un'ipotesi su quale sia il problema. Se ci sono due o più possibilità, prova a pensare a un test che ne elimini una.

Prendersi una pausa aiuta a pensare, proprio come parlarne. Se spieghi il problema a qualcun altro (o anche a te stesso), spesso capita di trovare la risposta prima di finire la domanda.

Anche le migliori tecniche di debug falliranno se ci sono troppi errori o se il codice che stai cercando di risolvere è troppo grande e complesso. A volte l'opzione migliore è ritirarsi, semplificando il programma fino ad arrivare a qualcosa che funziona e che riesci a capire.

I programmatori principianti sono spesso riluttanti a ritirarsi perché non sopportano di eliminare una riga di codice (anche se è sbagliata). Se ti fa sentire meglio, copia il tuo programma in un altro file prima di iniziare a ridurlo a pezzi, sarà poi possibile di nuovo rimettere insieme i pezzi un po' alla volta.

Per trovare e correggere un bug particolarmente ostico occorre leggere, correre, riflettere e talvolta ritirarsi. Se rimani impantanato in una di queste attività, prova a passare alle altre.

Glossario
--------
**Comparabile**
: Un tipo di dato di cui è possibile controllare il valore per vedere se è maggiore, minore o uguale a un altro dello stesso tipo. I tipi che sono comparabili possono essere messi in un elenco e ordinati.
\index{comparable}

**Struttura di dati**
: Una raccolta di valori correlati, spesso organizzati in elenchi, dizionari, tuple, ecc.
\index{data structure}

**DSU**
: Abbreviazione di "decorare-ordinare-rimuovere la decorazione", un modello che comporta la creazione di un elenco di tuple, il successivo ordinamento e l'estrazione parziale del risultato.
\index{DSU pattern}

**Gather**
: L'operazione di assemblaggio di una tupla di argomenti a lunghezza variabile.
\index{gather}

**Hashabile**
: Un tipo di dato a cui è applicabile una funzione di hash. I tipi immutabili come gli interi, virgola mobile e stringhe sono hashabili, mentre quelli mutabili come gli elenchi e i dizionari non lo sono.
\index{hashable}

**Scatter**
: L'operazione di trattare una sequenza come un elenco di argomenti.
\index{scatter}

**Formato (di una struttura dati)**
: Un riepilogo del tipo, delle dimensioni e della composizione di una struttura di dati.
\index{shape}

**Singleton**
: Un elenco (o altra sequenza) composto da un singolo elemento.
\index{singleton}

**Tupla**
: Una sequenza immutabile di elementi.
\index{tuple}

**Assegnazione di tupla**
: Una assegnazione con una sequenza sul lato destro e una tupla di variabili sul lato sinistro. Il lato destro viene valutato e quindi i suoi elementi vengono assegnati alle variabili di sinistra.
\index{tuple assignment}
\index{assignment!tuple}

Esercizi
---------

**Esercizio 1:** Rivedi uno degli script precedenti nel modo seguente: leggi e analizza le righe contenenti "From" ed estrai gli indirizzi dalla riga. Conta il numero di messaggi provenienti da ogni persona usando un dizionario.
Dopo aver letto tutti i dati, visualizza la persona con il maggior numero di occorrenze creando un elenco di tuple (count, email) dal dizionario. Quindi ordina l'elenco in ordine inverso e visualizza la persona che ha il maggior numero di occorrenze.

~~~~
Esempio di riga:
From stephen.marquard@uct.ac.za Sat 5 Jan 09:14:16 2008
Inserire un nome per il file: mbox-short.txt
cwen@iupui.edu 5

Immettere un nome file: mbox.txt
zqian@umich.edu 195
~~~~

**Esercizio 2:** Questo programma conta la distribuzione delle ore del giorno in cui è stato spedito ciascuno dei messaggi. Puoi estrarre l'ora dalla riga "From" trovando la stringa dell'orario e quindi suddividendo quella stringa usando il carattere dei due punti. Dopo aver registrato i conteggi per ogni timestamp, visualizzali, uno per riga, ordinandoli in base all'ora come mostrato di seguito.

Esempio di esecuzione:

~~~~
python timeofday.py
Enter a file name: mbox-short.txt
04 3
06 1
07 1
09 2
10 3
11 6
14 1
15 2
16 4
17 2
18 1
19 1
~~~~

**Esercizio 3:** Scrivi un programma che legga un file e visualizzi *le lettere* in ordine di frequenza decrescente. Il tuo programma dovrebbe convertire tutti gli input in lettere minuscole e contare solo le lettere dalla a alla z. Il programma non dovrebbe contare spazi, cifre, segni di punteggiatura o altro oltre alle lettere dalla a alla z. Trova esempi di testo in diverse lingue e scopri come varia la frequenza delle lettere in base alla lingua in esame. Confronta i risultati con le tabelle presenti in
[wikipedia.org/wiki/Letter\_frequencies](wikipedia.org/wiki/Letter_frequencies).

\index{letter frequency}
\index{frequency!letter}
