
Elenchi
=====

\index{list}
\index{type!list}

Un elenco è una sequenza
------------------------

Similmente ad una stringa, un *elenco* è una sequenza di valori. Ma mentre in una stringa i valori sono costituiti solo da caratteri, in un elenco questi possono essere di qualsiasi tipo e sono chiamati *elementi* o talvolta *oggetti*.

\index{element}
\index{sequence}
\index{item}

Esistono diversi modi per creare un elenco; il più semplice è racchiudere gli elementi tra parentesi quadre (`[` e `]`):

~~~~ {.python}
[10, 20, 30, 40]
['crunchy frog', 'ram bladder', 'lark vomit']
~~~~


Il primo esempio è un elenco di quattro numeri interi, il secondo è un elenco di tre stringhe. Non è necessario che gli elementi di un elenco debbano essere dello stesso tipo: il seguente elenco contiene una stringa, un float, un intero e (sorpresa!) un'altra lista:

~~~~ {.python}
['spam', 2.0, 5, [10, 20]]
~~~~


Un elenco contenuto all'interno di un altro elenco è definito elenco *nidificato*.
\index{nested list}
\index{list!nested}

Un elenco senza elementi è chiamato elenco vuoto: puoi crearne uno semplicemente scrivendo due parentesi quadre vuote: `[]`.
\index{empty list}
\index{list!empty}

Come puoi immaginare, puoi assegnare un elenco a una variabile:

~~~~ {.python .trinket}
>>> cheeses = ['Cheddar', 'Edam', 'Gouda']
>>> numbers = [17, 123]
>>> empty = []
>>> print(cheeses, numbers, empty)
['Cheddar', 'Edam', 'Gouda'] [17, 123] []
~~~~



\index{assignment}

Gli elenchi sono mutabili
-----------------

\index{list!element}
\index{access}
\index{index}
\index{}
\index{bracket operator}
\index{operator!bracket}
La sintassi per accedere agli elementi di un elenco è la stessa usata per i caratteri di una stringa: l'operatore rappresentato dalle parentesi. L'espressione tra parentesi specifica l'indice. Ricorda che anche l'indice inizia da 0:

~~~~ {.python}
>>> print(cheeses[0])
Cheddar
~~~~


A differenza delle stringhe, gli elenchi sono modificabili in quanto è possibile modificare l'ordine degli elementi in un elenco o riassegnare un elemento in un elenco. Quando la parentesi è visualizzata sul lato sinistro di un'assegnazione, identifica l'elemento dell'elenco che verrà modificato.

\index{mutability}


~~~~ {.python .trinket}
>>> numbers = [17, 123]
>>> numbers[1] = 5
>>> print(numbers)
[17, 5]
~~~~


L'elemento di indice uno di `numbers`, 123, è stato sostituito da 5.

\index{index!starting at zero}
\index{zero, index starting at}

Gli elenchi possono essere immaginati come una relazione tra indici ed elementi. Questa relazione è chiamata *mappatura*; ogni indice "mappa" uno degli elementi.

\index{item assignment}
\index{assignment!item}

Gli indici degli elenchi funzionano allo stesso modo di quelli delle stringhe:

- Qualsiasi espressione di tipo intero può essere utilizzata come indice.

- Se provi a leggere o scrivere un elemento che non esiste, otterrai un 'IndexError`;
\index{exception!IndexError}
\index{IndexError}

- Con un indice negativo, il conteggio inizia a ritroso partendo dalla fine dell'elenco.
\index{list!index}
\index{list!membership}
\index{membership!list}
\index{in operator}
\index{operator!in}
L'operatore `in` funziona anche sugli elenchi:

~~~~ {.python .trinket}
>>> cheeses = ['Cheddar', 'Edam', 'Gouda']
>>> 'Edam' in cheeses
True
>>> 'Brie' in cheeses
False
~~~~


Scorrere un elenco
-----------------

\index{list!traversal}
\index{traversal!list}
\index{for loop}
\index{loop!for}
\index{statement!for}
Il modo più comune di scorrere gli elementi di un elenco è un ciclo `for`. La sintassi è la stessa delle stringhe:

~~~~ {.python}
for cheese in cheeses:
    print(cheese)
~~~~

Funziona bene solo se devi leggere gli elementi di un elenco. Se vuoi scrivere o aggiornare degli elementi, devi lavorare con gli indici. Un modo comune per farlo è combinare le funzioni `range` e `len`:

\index{looping!with indices}
\index{index!looping with}


~~~~ {.python}
for i in range(len(numbers)):
    numbers[i] = numbers[i] * 2
~~~~


Questo ciclo scorre l'elenco e aggiorna ciascun elemento. `len` restituisce il numero di elementi dell'elenco. `range` restituisce un elenco di indici da 0 a $n-1$, dove $n$ è la lunghezza dell'elenco. Ad ogni ripetizione del ciclo, `i` assume l'indice dell'elemento successivo. L'istruzione di assegnazione nel corpo usa `i` per leggere il vecchio valore dell'elemento e assegnare quello nuovo.

\index{item update}
\index{update!item}
Un ciclo `for` su una lista vuota non esegue mai il blocco:

~~~~ {.python}
for x in empty:
    print('This never happens.')
~~~~


Come ti ho scritto, un elenco può contenere un altro elenco, che comunque conta se fosse un singolo elemento. Per farti un esempio, la lunghezza di questo elenco è pari a quattro:
\index{nested list}
\index{list!nested}


~~~~ {.python}
['spam', 1, ['Brie', 'Roquefort', 'Pol le Veq'], [1, 2, 3]]
~~~~


Operazioni sugli elenchi
---------------

\index{list!operation}

L'operatore `+` concatena gli elenchi:

\index{concatenation!list}
\index{list!concatenation}


~~~~ {.python .trinket}
>>> a = [1, 2, 3]
>>> b = [4, 5, 6]
>>> c = a + b
>>> print(c)
[1, 2, 3, 4, 5, 6]
~~~~


L'operatore `*` ripete un elenco un dato numero di volte:

\index{repetition!list}
\index{list!repetition}


~~~~ {.python .trinket}
>>> [0] * 4
[0, 0, 0, 0]
>>> [1, 2, 3] * 3
[1, 2, 3, 1, 2, 3, 1, 2, 3]
~~~~


Nel primo esempio 0 viene ripetuto quattro volte, nel secondo l'elenco viene ripetuto tre volte.

Slicing degli elenchi
-----------

\index{slice operator}
\index{operator!slice}
\index{index!slice}
\index{list!slice}
\index{slice!list}

L'operatore slice può essere utilizzato anche con gli elenchi:

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c', 'd', 'e', 'f']
>>> t[1:3]
['b', 'c']
>>> t[:4]
['a', 'b', 'c', 'd']
>>> t[3:]
['d', 'e', 'f']
~~~~


Se ometti il primo indice, lo slicing comincia dall'inizio. Se ometti il secondo, lo slicing termina alla fine. Di conseguenza se mancano entrambi, lo slicing è una copia dell'intero elenco.

\index{list!copy}
\index{slice!copy}
\index{copy!slice}

~~~~ {.python}
>>> t[:]
['a', 'b', 'c', 'd', 'e', 'f']
~~~~


Poiché gli elenchi sono editabili, spesso è utile farne prima una copia e poi eseguire operazioni che le aggreghino, le invertano o le tronchino.

\index{mutability}

Un operatore di slicing posto sul lato sinistro di un'assegnazione ti permette di aggiornare più elementi:

\index{slice!update}
\index{update!slice}

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c', 'd', 'e', 'f']
>>> t[1:3] = ['x', 'y']
>>> print(t)
['a', 'x', 'y', 'd', 'e', 'f']
~~~~

Metodi degli elenchi
------------

\index{list!method}
\index{method, list}

Python ti mette a disposizione diversi metodi per operare sugli elenchi. Ad esempio tramite `append` puoi aggiungere un nuovo elemento alla fine di un elenco:

\index{append method}
\index{method!append}

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c']
>>> t.append('d')
>>> print(t)
['a', 'b', 'c', 'd']
~~~~

`extend` accetta un elenco come argomento e ne accoda tutti gli elementi all'elenco specificato:

\index{extend method}
\index{method!extend}

~~~~ {.python .trinket}
>>> t1 = ['a', 'b', 'c']
>>> t2 = ['d', 'e']
>>> t1.extend(t2)
>>> print(t1)
['a', 'b', 'c', 'd', 'e']
~~~~

In questo esempio l'elenco `t2` rimane immutato.

Tramite `sort` puoi ordinare gli elementi dell'elenco in ordine crescente:

\index{sort method}
\index{method!sort}

~~~~ {.python .trinket}
>>> t = ['d', 'c', 'e', 'b', 'a']
>>> t.sort()
>>> print(t)
['a', 'b', 'c', 'd', 'e']
~~~~

La maggior parte dei metodi applicabili agli elenchi non accettano argomenti: modificano l'elenco e restituiscono `None`.
Se scrivessi accidentalmente `t = t.sort()`, rimarresti molto deluso dal risultato.

\index{void method}
\index{method!void}
\index{None special value}
\index{special value!None}

Eliminazione di elementi
-----------------

\index{element deletion}
\index{deletion, element of list}

Esistono diversi modi per eliminare elementi da un elenco: Se conosci l'indice dell'elemento desiderato, puoi usare `pop`:

\index{pop method}
\index{method!pop}

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c']
>>> x = t.pop(1)
>>> print(t)
['a', 'c']
>>> print(x)
b
~~~~

`pop` modifica l'elenco e restituisce l'elemento rimosso. Se non fornisci un indice, il metodo elimina e restituisce l'ultimo elemento dell'elenco. Se non ti serve il valore rimosso, puoi usare l'operatore `del`:

\index{del operator}
\index{operator!del}

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c']
>>> del t[1]
>>> print(t)
['a', 'c']
~~~~

Se conosci l'elemento da rimuovere (ma non l'indice), puoi utilizzare `remove`:

\index{remove method}
\index{method!remove}

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c']
>>> t.remove('b')
>>> print(t)
['a', 'c']
~~~~

Il valore restituito da `remove` è `None`.

\index{None special value}
\index{special value!None}

Per rimuovere più di un elemento, utilizza `del` con un indice di slicing:

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c', 'd', 'e', 'f']
>>> del t[1:5]
>>> print(t)
['a', 'f']
~~~~

Come al solito, lo slice seleziona tutti gli elementi fino al secondo indice escluso.

Elenchi e funzioni
-------------------

Esistono numerose funzioni integrate dedicate agli elenchi che consentono di scorrere rapidamente un elenco senza scrivere del codice apposito:

~~~~ {.python .trinket}
>>> nums = [3, 41, 12, 9, 74, 15]
>>> print(len(nums))
6
>>> print(max(nums))
74
>>> print(min(nums))
3
>>> print(sum(nums))
154
>>> print(sum(nums)/len(nums))
25
~~~~

Puoi utilizzare la funzione `sum()` che funziona solo se tutti gli elementi dell'elenco sono numeri. Le altre funzioni (`max()`, `len()`, ecc.) funzionano con stringhe e altri elementi che possano essere comparati.  
Potremmo riscrivere un programma visto in precedenza che calcolava la media di un insieme di numeri immessi dall'utente, utilizzando, stavolta, un elenco.  
Innanzitutto ecco lo script che abbiamo scritto per calcolare la media dei numeri inseriti:

\VerbatimInput{../code3/avenum.py}

In questo programma le variabili `count` e `total` servono per memorizzare il numero e il totale parziale dei numeri inseriti dall'utente mentre viene ripetutamente richiesto all'utente di digitare un numero.

Potremmo semplicemente memorizzare progressivamente ogni numero inserito dall'utente e utilizzare le funzioni integrate per calcolare somma e numero degli elementi al termine della loro immissione.

\VerbatimInput{../code3/avelist.py}

nell'esempio precedente abbiamo creato un elenco vuoto prima che inizi il ciclo, e ogni volta che veniva inserito un numero lo abbiamo aggiunto all'elenco. Alla fine del programma, abbiamo calcolato semplicemente la somma dei numeri dell'elenco e la dividiamo per il conteggio degli elementi inseriti per ottenere la media.  

Elenchi e stringhe
-----------------

\index{list}
\index{string}
\index{sequence}

Ti ho già scritto che una stringa ed un elenco non sono la stessa cosa: una stringa è una sequenza di caratteri mentre un elenco è una sequenza di valori. Per convertire una stringa in un elenco di caratteri, puoi usare `list`:

\index{list!function}
\index{function!list}

~~~~ {.python .trinket}
>>> s = 'spam'
>>> t = list(s)
>>> print(t)
['s', 'p', 'a', 'm']
~~~~

dato che `list` è un nome riservato, evita di usarlo come nome per una variabile. Ti consiglio anche di evitare la lettera `l` perché assomiglia troppo al numero `1`. Personalmente preferisco la `t`.  
La funzione `list` suddivide una stringa in singole lettere. Se invece vuoi dividere una stringa in singole parole, ti torna utile il metodo `split`:

\index{split method}
\index{method!split}

~~~~ {.python .trinket}
>>> s = 'pining for the fjords'
>>> t = s.split()
>>> print(t)
['pining', 'for', 'the', 'fjords']
>>> print(t[2])
the
~~~~


Dopo aver usato `split` per spezzare la stringa in un elenco di parole, puoi usare l'operatore indice (parentesi quadre) per cercare una particolare parola nell'elenco.  
Puoi chiamare `split` con un argomento opzionale chiamato *delimitatore* che specifica quali caratteri usare come separatore delle parole. Nell'esempio seguente viene utilizzato un trattino come delimitatore:

\index{optional argument}
\index{argument!optional}
\index{delimiter}

~~~~ {.python .trinket}
>>> s = 'spam-spam-spam'
>>> delimiter = '-'
>>> s.split(delimiter)
['spam', 'spam', 'spam']
~~~~

`join` è l'inverso di `split`. Prende un elenco di stringhe e ne concatena gli elementi. `join` è un metodo delle stringhe, quindi lo devi richiamare per mezzo del delimitatore passando l'elenco come parametro:

\index{join method}
\index{method!join}
\index{concatenation}

~~~~ {.python .trinket}
>>> t = ['pining', 'for', 'the', 'fjords']
>>> delimiter = ' '
>>> delimiter.join(t)
'pining for the fjords'
~~~~

In questo caso il delimitatore è uno spazio, perciò `join` ne aggiunge uno tra le varie parole. Se dovessi aver bisogno di concatenare delle stringhe senza spazi, puoi usare come delimitatore una stringa vuota "".

\index{empty string}
\index{string!empty}

Analisi di righe
-------------

Di solito, quando analizziamo un file, vogliamo fare qualcosa di diverso dalla semplice visualizzazione di riga per riga. Spesso vogliamo trovare le "righe interessanti" e poi *analizzare* la riga per trovare la *parte* che stiamo cercando della riga stessa.
E se volessimo estrarre il giorno della settimana da quelle righe che iniziano con "From"?  

`From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008`

Il metodo `split` è molto efficace nel risolvere questo tipo di problema. Possiamo scrivere un piccolo programma che cerca le righe che iniziano con "From ", le "divide" in parole e poi ne visualizza la terza parola:

\VerbatimInput{../code3/search5.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Abbiamo usato anche la forma contratta dell'istruzione `if` e messo `continue` sulla stessa riga di `if`. Questa forma contratta funziona come se `continue` fosse messo nella riga successiva indentata.  

Il programma produce il seguente output:

    Sat
    Fri
    Fri
    Fri
    ...

In seguito impareremo tecniche sempre più sofisticate per scegliere le righe su cui lavorare e come smontarle per trovare l'informazione precisa che stiamo cercando.

Oggetti e valori
------------------

\index{object}
\index{value}

Se eseguiamo queste istruzioni di assegnazione:

~~~~ {.python}
a = 'banana'
b = 'banana'
~~~~

sappiamo che `a` e `b` si riferiscono entrambi a una stringa, ma non sappiamo se si riferiscono alla *stessa* stringa. Ci sono due possibili stati:

\index{aliasing}

![Variabili e oggetti](height=0.5in@../images/list1)

Nel primo caso `a` e `b` si riferiscono a due oggetti diversi che hanno lo stesso valore mentre nel secondo caso si riferiscono allo stesso oggetto.

\index{is operator}
\index{operator!is}

Puoi usare l'operatore `is` per verificare se due variabili si riferiscono allo stesso oggetto.

~~~~ {.python .trinket}
>>> a = 'banana'
>>> b = 'banana'
>>> a is b
True
~~~~

In questo esempio, Python ha creato un unico oggetto stringa a chi fanno riferimento sia `a` che `b`.

Se invece crei due elenchi, otterrai due oggetti:

~~~~ {.python .trinket}
>>> a = [1, 2, 3]
>>> b = [1, 2, 3]
>>> a is b
False
~~~~

In questo caso, potremmo dire che i due elenchi sono *equivalenti*, dato che contengono gli stessi elementi, ma non *identici*, perché non sono lo stesso oggetto. Se due oggetti sono identici sono anche equivalenti, ma se sono equivalenti non sono necessariamente identici.

\index{equivalence}
\index{identity}

Anche se fino ad ora abbiamo usato "oggetto" e "valore" in modo intercambiabile, è più preciso dire che un oggetto ha un valore. Se esegui `a = [1,2,3]`, `a` si riferisce ad un oggetto elenco il cui valore è una particolare sequenza di elementi. Se un altro elenco ha gli stessi elementi diremo che ha lo stesso valore.

\index{object}
\index{value}

Alias
--------

\index{aliasing}
\index{reference!aliasing}

Se `a` si riferisce ad un oggetto e assegni `b = a`, allora entrambe le variabili si riferiscono allo stesso oggetto:

~~~~ {.python .trinket}
>>> a = [1, 2, 3]
>>> b = a
>>> b is a
True
~~~~

L'associazione tra una variabile e un oggetto è chiamata *riferimento*. In questo esempio, ci sono due riferimenti allo stesso oggetto.

\index{reference}

Quando un oggetto ha più di un riferimento, ha di conseguenza più di un nome, che chiameremo *alias*.

\index{mutability}

Se l'oggetto con alias è modificabile, le modifiche apportate su un alias si riflettono sugli altri:

~~~~ {.python}
>>> b[0] = 17
>>> print(a)
[17, 2, 3]
~~~~

Sebbene questo comportamento possa essere utile, è spesso fonte di errori. In generale, è meglio evitare gli alias quando si lavora con oggetti mutabili.

\index{immutability}

Nel caso di oggetti immutabili come le stringhe gli alias non sono un problema. In questo esempio non fa quasi mai differenza se `a` e `b` si riferiscono alla stessa stringa o meno:

~~~~ {.python}
a = 'banana'
b = 'banana'
~~~~


Elenchi come argomenti
--------------

\index{list!as argument}
\index{argument}
\index{argument!list}
\index{reference}
\index{parameter}

Quando passate un elenco a una funzione, questa ottiene un riferimento all'elenco. Se la funzione modifica un parametro dell'elenco, il chiamante vede la modifica. Ad esempio `delete_head` rimuove il primo elemento di un elenco:

~~~~ {.python}
def delete_head(t):
    del t[0]
~~~~


Ecco come puoi utilizzarlo:

~~~~ {.python .trinket}
>>> letters = ['a', 'b', 'c']
>>> delete_head(letters)
>>> print(letters)
['b', 'c']
~~~~

Il parametro `t` e la variabile `letters` sono alias dello stesso oggetto.

È importante distinguere tra operazioni che modificano elenchi e operazioni che creano nuovi elenchi. Nel prossimo esempio, il metodo `append` modifica un elenco, mentre l'operatore `+` ne crea uno nuovo:

\index{append method}
\index{method!append}
\index{list!concatenation}
\index{concatenation!list}

~~~~ {.python .trinket}
>>> t1 = [1, 2]
>>> t2 = t1.append(3)
>>> print(t1)
[1, 2, 3]
>>> print(t2)
None

>>> t3 = t1 + [3]
>>> print(t3)
[1, 2, 3]
>>> t2 is t3
False
~~~~


Questa differenza è importante quando devi scrivere funzioni in grado di modificare degli elenchi. Ad esempio questa funzione *non* elimina il primo elemento di un elenco:

~~~~ {.python}
def bad_delete_head(t):
    t = t[1:]              # ERRATO!
~~~~


L'operatore slice crea un nuovo elenco e l'assegnazione fa in modo che "t" si riferisca ad esso, senza che tutto questo abbia effetto sull'elenco che è stato passato come argomento.


\index{slice operator}
\index{operator!slice}


Un'alternativa è scrivere una funzione che crei e restituisca un nuovo elenco. Ad esempio `tail` restituisce tutti gli elementi di un
elenco tranne il primo:

~~~~ {.python}
def tail(t):
    return t[1:]
~~~~

Ricorda che questa funzione lascia intatto l'elenco originale. Ecco come viene utilizzata:

~~~~ {.python .trinket}
>>> letters = ['a', 'b', 'c']
>>> rest = tail(letters)
>>> print(rest)
['b', 'c']
~~~~

**Esercizio 1:** Scrivi una funzione chiamata `chop` che prenda un elenco, lo modifichi rimuovendo il primo e l'ultimo elemento e restituisca `None`.  

Quindi scrivi una funzione chiamata `middle` che prenda un elenco e restituisca un nuovo elenco contenente tutti gli elementi tranne il primo e l'ultimo.

Debug
---------

\index{debugging}

L'uso incauto degli elenchi (e di altri oggetti mutabili) può portarti a passare lunghe ore nelle operazioni di debug.

Ecco alcuni problemi comuni e suggerimenti sul come evitarli:

1.  Non dimenticare che la maggior parte dei metodi applicabili agli elenchi modificano l'argomento e restituiscono `None`.
    Questo è l'opposto del comportamento dei metodi di stringa che restituiscono una nuova stringa e lasciano immutato l'originale.

    Stai attento se sei abituato a scrivere codice per le stringhe come questo:


    ~~~~ {.python}
        word = word.strip ()
    ~~~~

    perché allora sarai tentato di scrivere codice come questo:

    ~~~~ {.python}
        t = t.sort()           # ERRATO!
    ~~~~

    \index{sort method!}
    \index{methodsort}

    Poiché `sort` restituisce `None`, la successiva operazione che eseguirai su `t` probabilmente fallirà.

    Prima di utilizzare i metodi e gli operatori utilizzabili sugli elenchi, è necessario che tu legga attentamente la documentazione e li testi in modalità interattiva.
    I metodi e gli operatori che gli elenchi condividono con altre sequenze (come le stringhe) sono documentati su
    <https://docs.python.org/3.5/library/stdtypes.html#common-sequence-operations>.
    I metodi e gli operatori che si applicano solo alle sequenze mutabili sono documentati su
    <https://docs.python.org/3.5/library/stdtypes.html#mutable-sequence-types>.

2.  Scegliere sempre un solo idioma.

    \index{idiom}

    Parte dei problemi che hai con gli elenchi deriva dal fatto che ci sono troppi modi per fare le stesse cose.
    Ad esempio, per rimuovere un elemento da un elenco, puoi usare `pop`, `remove`, `del`, o anche lo slice.

    Per aggiungere un elemento puoi usare il metodo `append` o l'operatore `+`. Ma non dimenticare che questi sono corretti:

    ~~~~ {.python}
        t.append (x)
        t = t + [x]
    ~~~~

    E questi sono sbagliati:

    ~~~~ {.python}
        t.append([x])          # ERRATO!
        t = t.append(x)        # ERRATO!
        t + [x]                # ERRATO!
        t = t + x              # ERRATO!
    ~~~~

    Prova ognuno di questi esempi in modalità interattiva per assicurarti di capire come funzionano.
    Noterai che solo l'ultima espressione genera un errore di esecuzione; le altre tre sono consentite ma fanno la cosa sbagliata.

3.  Fare delle copie per evitare gli alias.

    \index{aliasing!copying to avoid}
    \index{copy!to avoid aliasing}

    Se vuoi utilizzare un metodo come `sort` per modificare l'argomento ma hai la necessità di mantenere inalterato l'elenco originale, puoi farne una copia.

    ~~~~ {.python}
        orig = t [:]
        t.sort ()
    ~~~~

    In questo esempio puoi anche usare la funzione `sorted`, che ti restituisce un nuovo elenco ordinato lasciando intatto l'originale. Ma in tal caso devi evitare di usare `sorted` come nome di variabile!

4.  Elenchi, `split` e file

    Quando leggiamo e analizziamo file ci sono molte opportunità di imbattersi in input che possano mandare in crash il nostro programma, è quindi una buona idea rivisitare lo schema del *guardiano* quando capita di scrivere programmi che leggono cercando il classico "ago nel pagliaio".

    Riprendiamo il programma che cerca il giorno della settimana nelle righe del nostro file:

    `From stephen.marquard@uct.ac.za  Sat Jan  5 09:14:16 2008`

    Considerato che stiamo dividendo in parole questa frase, potremmo fare a meno dell'uso di `startswith` ed esaminare semplicemente la prima parola per determinare se ci interessa questa riga. Possiamo usare `continue` per saltare le righe che non hanno "From" come prima parola:

    ~~~~ {.python}
    fhand = open('mbox-short.txt')
    for line in fhand:
        words = line.split()
        if words[0] != 'From' : continue
        print(words[2])
    ~~~~

    Sembra molto più semplice e non abbiamo nemmeno bisogno di fare un `rstrip` per cancellare il fine stringa alla fine del file.
    Ma è meglio?

    ~~~~
            python search8.py
            Sat
            Traceback (most recent call last):
              File "search8.py", line 5, in <module>
                if words[0] != 'From' : continue
            IndexError: list index out of range
    ~~~~

    Sembra funzionare dato che riusciamo a visualizzare il giorno della settimana della prima riga (Sat) ma poi il programma fallisce mostrando un errore di traceback. Cosa è andato storto? Quali dati hanno causato il blocco del nostro programma elegante, intelligente e molto "Pythonic"?

    Potresti fissarlo a lungo scervellandoti o chiedere aiuto a qualcuno, ma l'approccio più rapido e intelligente è quello di aggiungere un'istruzione `print`. Il posto migliore per aggiungerla è proprio prima della riga in cui il programma ha dato errore e visualizzare i dati che sembrano causare l'errore.

    Questo approccio può generare molte righe di output ma almeno avrai immediatamente qualche indizio su quale sia il problema. Quindi aggiungiamo un comando `print` della variabile `words` prima della riga cinque. Aggiungiamo persino un prefisso "Debug:" alla riga in modo da poter mantenere separato l'output normale da quello di debug.

    ~~~~ {.python}
        for line in fhand:
            words = line.split()
            print('Debug:', words)
            if words[0] != 'From' : continue
            print(words[2])
    ~~~~

    Quando eseguiremo il programma, sullo schermo verranno visualizzati un mucchio di output ma alla fine vedremo il nostro output di debug seguito dal traceback e potremo sapere cosa è successo appena prima del messaggio d'errore.

    ~~~~
            Debug: ['X-DSPAM-Confidence:', '0.8475']
            Debug: ['X-DSPAM-Probability:', '0.0000']
            Debug: []
            Traceback (most recent call last):
              File "search9.py", line 6, in <module>
                if words[0] != 'From' : continue
            IndexError: list index out of range
    ~~~~

    In ogni riga di debug viene visualizzato l'elenco di parole che otteniamo quando segmentiamo una riga. L'elenco di parole rimane vuoto  `[]` quando il programma si blocca. Se esaminiamo il file con un editor di testo potremo leggere in quel punto quanto segue:

    ~~~~
            X-DSPAM-Result: Innocent
            X-DSPAM-Processed: Sat Jan  5 09:14:16 2008
            X-DSPAM-Confidence: 0.8475
            X-DSPAM-Probability: 0.0000

            Details: http://source.sakaiproject.org/viewsvn/?view=rev&rev=39772
    ~~~~

    L'errore si verifica quando il nostro programma incappa in una riga vuota! Perché non abbiamo pensato quando stavamo scrivendo il codice che, ovviamente, ci sono "zero parole" su una riga vuota? In altre parole non abbiamo previsto che quando il codice cerca in una riga vuota la prima parola (`word [0]`) per verificare se corrisponde a "From", si blocca ed otteniamo l'errore "index out of range".

    Questo è ovviamente il posto perfetto per aggiungere un codice *guardiano* per evitare di controllare la prima parola se questa non è presente. Pur esistendo molti modi per proteggere questo codice, noi sceglieremo di verificare il numero di parole, prima di leggere la prima parola:

    ~~~~ {.python}
    fhand = open('mbox-short.txt')
    count = 0
    for line in fhand:
        words = line.split()
        # print 'Debug:', words
        if len(words) == 0 : continue
        if words[0] != 'From' : continue
        print(words[2])
    ~~~~

    Per prima cosa abbiamo "commentato" l'istruzione di debug `print` invece di rimuoverla, nel caso in cui avessimo nuovamente bisogno di eseguire il debug. Poi abbiamo aggiunto una istruzione "guardiana" che controlla se abbiamo zero parole e, se così fosse, usiamo `continue` per saltare alla riga successiva nel file.

    Possiamo pensare che le due istruzioni `continue` ci stiano aiutando a perfezionare l'insieme di righe "interessanti" per le nostre elaborazioni. Una riga che non ha parole è "poco interessante", quindi è meglio saltare alla riga successiva. Anche una riga che non inizi con "From" è poco interessante, quindi la ignoriamo.

    Dato che il nostro script viene eseguito regolarmente, forse ora è corretto.
    La nostra istruzione guardiana fa in modo che il `words [0]` non generi mai un errore, ma forse non basta. Quando programmi, devi sempre pensare: "Cosa potrebbe andare storto?"

**Esercizio 2:** scopri quale riga del programma precedente non è ancora adeguatamente protetta. Cerca di costruire un file di testo che faccia fallire il programma e quindi modifica il programma in modo che la riga sia adeguatamente protetta e testala nuovamente per essere sicuro che gestisca correttamente il nuovo file di testo.

**Esercizio 3:** riscrivi il codice guardiano dell'esempio precedente senza le due istruzioni `if`.
Usa invece un'espressione logica composta dall'operatore `and` e una singola istruzione `if`.

Glossario
--------

**Alias**
: Circostanza in cui due o più variabili si riferiscono allo stesso oggetto.
\index{aliasing}

**Delimitatore**
: Un carattere o una stringa utilizzata per indicare il punto in cui deve essere divisa una stringa.
\index{delimiter}

**Elemento**
: Uno dei valori in un elenco (o altra sequenza); viene chiamato anche oggetto.
\index{element}

**Equivalente**
: Avere lo stesso valore.
\index{equivalent}

**Indice**
: Un valore intero che indica la posizione di un elemento in un elenco.
\index{index}
\index{}

**Identico**
: Essere lo stesso oggetto (che implica l'equivalenza).
\index{identical}

**Elenco**
: Una sequenza di valori.
\index{list}

**Elaborazione trasversale**
: Accesso sequenziale a ciascun elemento in un elenco.
\index{list!traversal}

**Elenco annidato**
: Un elenco contenuto all'interno di un altro elenco.
\index{nested list}

**Oggetto**
: Qualcosa a cui una variabile può riferirsi. Un oggetto è caratterizzato da un tipo e un valore.
\index{object}

**Riferimento**
: L'associazione tra una variabile e il suo valore.
\index{reference}

Esercizi
---------

**Esercizio 4:** scarica una copia del file
[www.py4e.com/code3/romeo.txt](http://www.py4e.com/code3/romeo.txt)

\index{Romeo and Juliet}

Scrivi un programma che lo apra e lo legga riga per riga. Dividi la riga in un elenco di parole usando la funzione `split`.

Controlla se ogni parola è già presente in un elenco. Se la parola non è nell'elenco, aggiungila. Al termine del programma, ordina e visualizza in ordine alfabetico le parole risultanti.

~~~~
Enter file: romeo.txt
['Arise', 'But', 'It', 'Juliet', 'Who', 'already',
'and', 'breaks', 'east', 'envious', 'fair', 'grief',
'is', 'kill', 'light', 'moon', 'pale', 'sick', 'soft',
'sun', 'the', 'through', 'what', 'window',
'with', 'yonder']
~~~~

**Esercizio 5:** Scrivi un programma per leggere i dati della casella di posta e quando trova la riga che inizia con "From", divida la riga in parole usando la funzione `split`. Siamo interessati a sapere chi ha inviato il messaggio indicato nella parola delle righe che iniziano con From.

`From stephen.marquard@uct.ac.za Sat 5 Jan 09:14:16 2008`

Analizza la riga From per visualizzarne la seconda parola, quindi conta anche il numero di righe From (non From:), visualizzandone il risultato alla fine.  

Questo è un buon esempio di output con poche righe rimosse:

~~~~
python fromcount.py
Enter a file name: mbox-short.txt
stephen.marquard@uct.ac.za
louis@media.berkeley.edu
zqian@umich.edu

[...some output removed...]

ray@media.berkeley.edu
cwen@iupui.edu
cwen@iupui.edu
cwen@iupui.edu
There were 27 lines in the file with From as the first word
~~~~

**Esercizio 6:** Riscrivi il programma che richiede all'utente un elenco di numeri e ne visualizza il maggiore ed il minore, quando riceve in input la stringa "done".
Il programma ora memorizzerà i numeri inseriti dall'utente in un elenco e tramite le funzioni `max()` e `min()` fornirà i numeri massimo e minimo quando l'utente fornisce in input la parola "done".  

~~~~
Enter a number: 6
Enter a number: 2
Enter a number: 9
Enter a number: 3
Enter a number: 5
Enter a number: done
Maximum: 9.0
Minimum: 2.0
~~~~
