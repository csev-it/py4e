%

Espressioni regolari
====================


Finora abbiamo letto file, cercato modelli ed estratto porzioni di righe ritenute interessanti. Abbiamo usato metodi di stringa come `split` e `find`, o il frazionamento di elenchi e stringhe per estrarre parti delle righe.

\index{regular expressions}
\index{regex}
\index{re module}

la funzione di ricerca ed estrazione è talmente popolare che è stata sviluppata per Python la libreria *espressoni regolari* che gestisce con grande eleganza molte di queste attività. La ragione per cui non abbiamo presentato prima le espressioni regolari nel libro è perché, sebbene siano molto potenti, sono un po' complicate e il padroneggiare la loro sintassi richiede del tempo.

Le espressioni regolari sono quasi un piccolo linguaggio di programmazione dedicato alla ricerca e l'analisi delle stringhe. In effetti sono stati scritti interi libri sul tema delle espressioni regolari. In questo capitolo, parleremo solo delle basi delle espressioni regolari.
Per maggiori dettagli sulle espressioni regolari, consulta:

<http://en.wikipedia.org/wiki/Regular_expression>

<https://docs.python.org/3.5/library/re.html>

La libreria delle espressioni regolari `re` deve essere importata nel tuo programma prima che tu possa usarla. L'uso più semplice della libreria di espressioni regolari è la funzione `search()`.
Questo programma presenta un uso banale della funzione di ricerca:

\index{regex!search}

\VerbatimInput{../code3/re01.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Il file viene aperto e viene letta ogni riga tramite un ciclo in cui viene utilizzata l'espressione regolare `search()` per visualizzare solo che contengono la stringa "From:". Questo programma non sfrutta il vero potere delle espressioni regolari: avremmo potuto usare altrettanto facilmente `line.find()` per ottenere lo stesso risultato.

\index{string!find}

La potenza delle espressioni regolari viene raggiunta quando utilizzi i caratteri speciali nella stringa di ricerca che ti consentono di controllare con più precisione quali righe corrispondono alla stringa di ricerca. L'aggiunta di questi caratteri speciali alla nostra espressione regolare ci consente di eseguire abbinamenti ed estrazioni sofisticate tramite la stesura di un codice molto ridotto.

Ad esempio, l'accento ^ viene utilizzato nelle espressioni regolari per trovare l'inizio di una riga. Potremmo modificare il nostro script per confrontare solo le righe in cui "From:" si trova all'inizio della riga, proprio come nell'esempio seguente:

\VerbatimInput{../code3/re02.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Ora lavora solo le righe che *iniziano con* la stringa "From:". Questo è un esempio molto elementare che avremmo potuto riprodurre utilizzando con il metodo `startswith()` incluso nella libreria delle stringhe. Ma serve per introdurre il concetto secondo cui le espressioni regolari possono contenere caratteri speciali che ci danno più controllo su ciò che confronterà l'espressione regolare.

\index{string!startswith}

Confronto di caratteri nelle espressioni regolari
-----------------------------------------

Hai a disposizione un certo numero di caratteri speciali che ti permettono di costruire espressioni regolari molto potenti. Il carattere speciale più comunemente usato è il punto (.), che corrisponde a un qualsiasi carattere.

\index{wild card}
\index{regex!wild card}

Nell'esempio seguente, l'espressione regolare "F..m:" indica una qualsiasi stringa, come ad esempio "From:", "Fxxm:", "F12m:" o "F!@m:", data la presenza di due punti consecutivi (..).

\VerbatimInput{../code3/re03.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

È una funzione particolarmente potente se combinata con la capacità di indicare che un carattere può essere ripetuto un numero qualsiasi di volte inserendo i caratteri "\*" o "+" nell'espressione regolare. Questi caratteri speciali fanno sì che invece di corrispondere a un singolo carattere nella stringa di ricerca, corrispondono a zero o più caratteri (nel caso dell'asterisco) o uno o più caratteri (nel caso del segno più).

Possiamo ridurre ulteriormente le righe da controllare usando un carattere *wild card* ripetuto, come nel seguente esempio:

\VerbatimInput{../code3/re04.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

La stringa di ricerca "`^`From:.+@" restringe l'analisi alle righe che iniziano con correttamente alle righe che iniziano con "From:", seguite da uno o più caratteri (".+"), dal carattere chiocciola, come nell'esempio seguente:

*`From:stephen.marquard@`*`uct.ac.za`

Puoi pensare al carattere wildcard ".+" come all'estensione del controllo di tutti i caratteri inclusi tra i due punti e la chiocciola.

*`From :.+ @ `* 

È bene pensare ai caratteri più e asterisco come "invadenti". Ad esempio, la stringa seguente corrisponderebbe all'ultimo carattere chiocciola mentre ".+" andrebbe oltre, come mostrato di seguito:

*`From: stephen.marquard@uct.ac.za, csev@umich.edu, e cwen @ `*` iupui.edu`

È possibile far sì che l'asterisco o il segno più non siano così "avidi" aggiungendo un altro carattere. Fai riferimento alla documentazione dettagliata per informazioni su come disattivare questo avido comportamento.

\index{greedy}

Estrazione dei dati utilizzando le espressioni regolari
-----------------------------------------

Se vogliamo estrarre dei dati da una stringa in Python possiamo usare il metodo `findall()` per selezionare tutte le sottostringhe che corrispondono a un'espressione regolare. Pensiamo, ad esempio, di voler estrarre qualsiasi cosa che assomigli ad un indirizzo email da qualsiasi riga indipendentemente dalla posizione. Ad esempio vogliamo estrarre gli indirizzi email contenuti in ognuna delle seguenti righe:

~~~~
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
Return-Path: <postmaster@collab.sakaiproject.org>
          for <source@collab.sakaiproject.org>;
Received: (from apache@localhost)
Author: stephen.marquard@uct.ac.za
~~~~

Chiaramente non vogliamo scrivere del codice per ciascun caso suddividendo e segmentando in modo diverso ogni riga. Questo programma seguente usa `findall()` per trovare le righe contenenti al loro interno indirizzi e-mail e ne estraggano quest'ultima.

\index{findall}
\index{regex!findall}

\VerbatimInput{../code3/re05.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Il metodo `findall()` ricerca la stringa nel secondo argomento e restituisce un elenco di tutte le stringhe che sembrano indirizzi email. Stiamo usando una sequenza di due caratteri che corrisponde a un carattere diverso da spazio (`\`S). L'output dello script sarà:

~~~~
['csev@umich.edu', 'cwen@iupui.edu']
~~~~

Parafrasando l'espressione regolare stiamo cercando delle sottostringhe con almeno un carattere diverso da spazio seguito da un carattere chiocciola e da almeno un altro carattere diverso dallo spazio. "'\'S+" corrisponde a quanti più caratteri possibile diversi dallo spazio.

L'espressione regolare ha trovato due corrispondenze (csev@umich.edu e cwen@iupui.edu), ma ha scartato la stringa "@2PM" perché non sono presenti caratteri diversi dallo spazio *prima* del carattere chiocciola. Possiamo usare questa espressione regolare in un programma per leggere tutte le righe di un file e visualizzare qualsiasi cosa simile ad un indirizzo email come nell'esempio seguente:

\VerbatimInput{../code3/re06.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Viene letta ogni riga e quindi estratte tutte le sottostringhe che corrispondono alla nostra espressione regolare. Poiché `findall()` restituisce un elenco, controlliamo se il numero di elementi nel nostro elenco è maggiore di zero per visualizzare solo le righe in cui abbiamo trovato almeno una sottostringa che somigli ad un indirizzo email.

Se utilizziamo il programma con `mbox.txt` otterremo il seguente risultato:

~~~~
['wagnermr@iupui.edu']
['cwen@iupui.edu']
['<postmaster@collab.sakaiproject.org>']
['<200801032122.m03LMFo4005148@nakamura.uits.iupui.edu>']
['<source@collab.sakaiproject.org>;']
['<source@collab.sakaiproject.org>;']
['<source@collab.sakaiproject.org>;']
['apache@localhost)']
['source@collab.sakaiproject.org;']
~~~~

Alcuni degli indirizzi email presentano all'inizio o alla fine caratteri non corretti come "`<`" o ";". Ora dobbiamo indicare che siamo interessati solo alle stringhe che iniziano e finiscono con una lettera o un numero.

Per fare ciò sfruttiamo un'altra caratteristica delle espressioni regolari: le parentesi quadre. Queste vengono utilizzate per indicare un insieme di più caratteri accettabili che siamo disposti a considerare corrispondenti. In un certo senso, "'\'S" chiede di confrontare l'insieme di "caratteri diversi dallo spazio". Ora saremo un po' più espliciti in termini di caratteri che confronteremo.

Ecco la nostra nuova espressione regolare:

~~~~
[a-zA-Z0-9]\S*@\S*[a-zA-Z]
~~~~

Sta diventando tutto un po' complicato e puoi iniziare a capire perché le espressioni regolari vanno considerate loro stesse un piccolo linguaggio. Per tradurre questa espressione regolare: cerchiamo sottostringhe che inizino con una *singola* lettera minuscola o maiuscola o un numero "[a-zA-Z0-9]", seguito da zero o più caratteri non vuoti ("\'S'\*"), da una chiocciola, da zero o più caratteri non vuoti ("\'S*"), da una lettera maiuscola o minuscola. Nota che siamo passati da "+" a "\*" per indicare zero o più caratteri non vuoti dato che "[a-zA-Z0-9]" è già considerato un carattere non vuoto. Ricorda che "\*" o "+" si applicano al singolo carattere immediatamente a sinistra del segno stesso.

\index{regex!character sets(brackets)}

Se usiamo questa espressione nel nostro programma, i nostri dati appariranno molto più puliti:

\VerbatimInput{../code3/re07.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

~~~~
...
['wagnermr@iupui.edu']
['cwen@iupui.edu']
['postmaster@collab.sakaiproject.org']
['200801032122.m03LMFo4005148@nakamura.uits.iupui.edu']
['source@collab.sakaiproject.org']
['source@collab.sakaiproject.org']
['source@collab.sakaiproject.org']
['apache@localhost']
~~~~

Nota che "source@collab.sakaiproject.org", la nostra espressione regolare ha eliminato due lettere ("`>`;") alla fine delle stringhe. Questo perché quando accodiamo "[a-zA-Z]" alla fine della nostra espressione regolare, vogliamo che qualsiasi stringa trovata debba terminare con una lettera. In altre parole, il carattere "'>'" dopo "sakaiproject.org`>`;" viene ignorato perchè il sistema si ferma sull'ultima lettera che rispetti i parametri di ricerca (ovvero "g" è l'ultima corrispondenza valida). Ricorda inoltre che l'output del programma è un elenco composto da un'unica.

Combinare ricerca ed estrazione
----------------------------------

Immagina che si debbano trovare i numeri contenuti nelle righe che iniziano con "X-" come, ad esempio:

~~~~
X-DSPAM-Confidence: 0.8475
X-DSPAM-Probability: 0.0000
~~~~

insomma non vogliamo i numeri in virgola mobile provenienti da una qualsiasi riga; vogliamo soltanto i numeri contenuti nelle righe che hanno la sintassi sopra indicata. Possiamo costruire la seguente espressione regolare per selezionare le righe che ci interessano:

~~~~
^X-.*: [0-9.]+
~~~~

In altre parole, stiamo dicendo al pc che stiamo cercando le righe che iniziano con "X-", seguite da zero o più caratteri (".\*"), da due punti (":") e da uno spazio. Dopo lo spazio, cerchiamo uno o più caratteri numerici (0-9) o un punto "[0-9.]+". Nota che all'interno delle parentesi quadre il punto corrisponde a un punto (in altre parole non è un carattere wildcard tra parentesi quadre).

Questa è un'espressione molto stringente che corrisponderà quasi solo alle righe che ci interessano:

\VerbatimInput{../code3/re10.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Quando eseguirai il programma, vedrai che verranno visualizzate solo le righe che stiamo cercando.

~~~~
X-DSPAM-Confidence: 0.8475
X-DSPAM-Probability: 0.0000
X-DSPAM-Confidence: 0.6178
X-DSPAM-Probability: 0.0000
~~~~

Ora dobbiamo risolvere il problema dell'estrazione dei numeri. Anche se sarebbe abbastanza semplice usare `split`, possiamo sfruttare un'altra caratteristica delle espressioni regolari per cercare e analizzare allo stesso tempo le righe.

\index{string!split}

Le parentesi sono considerate un altro carattere speciale nelle espressioni regolari. Se aggiungi le parentesi a un'espressione regolare, queste vengono ignorate durante le operazioni di ricerca delle stringhe. Se però utilizzi `findall()`, le parentesi indicano che non solo vuoi effettuare una ricerca, ma vuoi estrarre la porzione di riga che corrisponde all'espressione regolare.

\index{regex!parentheses}
\index{parentheses!regular expression}

Apportiamo ora la seguente modifica al nostro script:

\VerbatimInput{../code3/re11.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Invece di utilizzare `search()`, aggiungendo le parentesi attorno alla parte dell'espressione regolare che rappresenta il numero in virgola mobile, vogliamo che `findall()` ci restituisca solo la parte in virgola mobile della stringa confrontata.

L'output di questo programma sarà il seguente:

~~~~
['0.8475']
['0.0000']
['0.6178']
['0.0000']
['0.6961']
['0.0000']
..
~~~~

Anche se i numeri sono ancora parte di un elenco e devono essere convertiti da stringhe a numeri in virgola mobile, grazie al potere delle espressioni regolari abbiamo potuto cercare ed estrarre le informazioni che ci interessano.

Voglio farti un altro esempio di questa tecnica: se dai un'occhiata al file, vedrai un certo numero di righe simili alla seguente:

Details: http://source.sakaiproject.org/viewsvn/?view=rev&rev=39772

Se volessimo estrarre tutti i numeri delle versioni (i numeri interi alla fine della riga) utilizzando la tecnica precedente, potremmo scrivere lo script seguente:

\VerbatimInput{../code3/re12.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Lasciami tradurre la nostra espressione regolare: stiamo cercando le righe che iniziano con "Details:", seguito da un numero qualsiasi di caratteri (".\*"), seguito da "rev=", e quindi da una o più cifre. Vogliamo trovare le righe che combacino con l'intera espressione ma deve essere estratto il numero intero presente alla fine della riga, come indicato da "[0-9] +" racchiuso tra parentesi. Quando eseguiamo il programma, otteniamo il seguente risultato:

~~~~
['39772']
['39771']
['39770']
['39769']
...
~~~~

Ricorda che "[0-9] +" è "avido" e tenta di includere quante più cifre nella stringa prima di estrarla. Questo comportamento "avido" è il motivo per cui otteniamo tutte e cinque le cifre per ogni numero. La libreria di espressioni regolari si espande in entrambe le direzioni fino a quando non incontra un carattere non numerico o l'inizio o la fine di una riga.

Ora puoi utilizzare le espressioni regolari per rifare un esercizio visto in precedenza in cui eravamo interessati all'ora del giorno di ciascuna mail. Abbiamo cercato questo tipo di righe:

~~~~
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
~~~~

ed in ognuna abbiamo estratto l'ora del giorno. In precedenza abbiamo utilizzato due chiamate a `split`: per prima cosa la riga è stata divisa in parole e poi abbiamo estratto la quinta parola e diviso nuovamente la riga al carattere due punti per tirare fuori i due caratteri che ci interessavano. Nonostante abbia funzionato, in realtà il nostro codice è piuttosto fragile: dato che presuppone che le righe siano ben formattate. Se dovessimo aggiungere un numero congruo di controlli degli errori (o un grande blocco try/except) per assicurarci che il programma non si blocchi quando incontra righe formattate in modo errato, il codice si espanderebbe di almeno 10-15 righe diventando piuttosto difficile da leggere.

Possiamo farlo in un modo molto più semplice tramite la seguente espressione regolare:

~~~~
^From .* [0-9][0-9]:
~~~~

Con questa espressione regolare stiamo cercando le righe che inizino con "From " (nota lo spazio), seguito da un numero qualsiasi di caratteri (".\*"), poi da uno spazio, da due cifre "[0-9][0-9] ", ed infine un carattere di due punti. Questa però è solo la definizione del tipo di righe che stiamo cercando.

Per estrarre l'ora abbiamo bisogno di utilizzare `findall()`, e di aggiungere le parentesi attorno alle due cifre come indicato qui sotto:

~~~~
^From .* ([0-9][0-9]):
~~~~

Ora possiamo scrivere il nostro script:

\VerbatimInput{../code3/re13.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Una volta eseguito il programma, produrrà il seguente output:

~~~~
['09']
['18']
['16']
['15']
...
~~~~

Carattere Escape
----------------

Dato che utilizziamo caratteri speciali nelle espressioni regolari per indicare l'inizio o la fine di una riga o specificare i caratteri wild card, abbiamo bisogno di un modo per indicare che questi sono caratteri "normali" e vogliamo confrontarli con caratteri reali come il segno di dollaro o un accento circonflesso.

Possiamo indicare questa intenzione anteponendo backslash al carattere che ci interessa. Ad esempio, possiamo individuare gli importi in denaro tramite la seguente espressione regolare.

~~~~ {.python}
import re
x = 'We just received $10.00 for cookies.'
y = re.findall('\$[0-9.]+',x)
~~~~

Dal momento che facciamo precedere backslash al simbolo del dollaro, questo verrà interpretato come simbolo del dollaro anziché "fine della riga". Il resto dell'espressione regolare corrisponderà a una o più cifre o al carattere del punto.

*Nota:* All'interno di parentesi quadre, i caratteri non sono considerati "speciali". Quindi quando diciamo "[0-9.]", indichiamo effettivamente numeri o il punto. Al di fuori delle parentesi quadre, il punto è visto come un carattere "wild card" che corrisponde a qualsiasi carattere. Te lo ripeto: all'interno delle parentesi quadre il punto è solo un punto.

Sommario
-------

Anche se abbiamo solo scalfito la superficie del mondo delle espressioni regolari, ora hai un po' imparato la struttura del loro linguaggio. Sono stringhe di ricerca contenenti caratteri speciali che comunicano i tuoi desideri al sistema delle espressioni regolari definendo cosa è "coincidente" e cosa va estratto dalle stringhe corrispondenti.

Ecco alcuni di quei caratteri speciali e sequenze di caratteri:

`^` Corrisponde all'inizio riga.

`$` Corrisponde alla fine riga.

. Corrisponde a qualsiasi carattere (un carattere wild-card).

\'s corrisponde a uno spazio.

\'S corrisponde a un carattere diverso dallo spazio (opposto a `\`s).

`*` Si applica al carattere immediatamente precedente e indica di corrispondere a zero o più dei caratteri precedenti.

`*?` Si applica al carattere immediatamente precedente e indica di corrispondere a zero o più dei caratteri precedenti in "modalità non avida".

`+` Si applica al carattere immediatamente precedente e indica di corrispondere a uno o più dei caratteri precedenti.

`+?` Si applica al carattere immediatamente precedente e indica di corrispondere a uno o più dei caratteri precedenti in "modalità non avida".

[aeiou] Corrisponde a un singolo carattere fintanto che quel carattere si trova nell'insieme specificato. In questo esempio, confronterebbe con "a", "e", "i", "o" o "u", e nessun altro carattere.

[a-z0-9] È possibile specificare intervalli di caratteri utilizzando il segno meno. In questo esempio si tratta di un singolo carattere che deve essere una lettera minuscola o una cifra.

[`^`A-Za-z] Quando il primo carattere nella notazione impostata è un accento circonflesso, inverte la logica. In questo esempio corrisponde a un qualsiasi singolo carattere che è *diverso da* una lettera maiuscola o minuscola.

() Quando le parentesi vengono aggiunte a un'espressione regolare, vengono ignorate ai fini della confronto, ma consentono di estrarre un particolare sottoinsieme della stringa confrontata piuttosto che l'intera stringa quando si utilizza `findall()`.

`\`b Corrisponde alla stringa vuota, ma solo all'inizio o alla fine di una parola.

`\`B Corrisponde alla stringa vuota, ma non all'inizio o alla fine di una parola.

`\`d Corrisponde a qualsiasi cifra decimale; è equivalente all'insieme [0-9].

`\`D Corrisponde a qualsiasi carattere non numerico; è equivalente al set [`^`0-9].  

Sezione bonus per utenti Unix/Linux
------------------------------------

Il supporto per la ricerca di file tramite espressioni regolari è stato incorporato nel sistema operativo Unix sin dagli anni '60 ed è disponibile in quasi tutti i linguaggi di programmazione in una forma o in un'altra.

\index{grep}

Di fatto, esiste un programma per riga di comando incorporato in Unix chiamato *grep* (Generalized Regular Expression Parser) che funziona più o meno come negli esempi di `search()` in questo capitolo. Quindi se avete un sistema Macintosh o Linux, potete provare i seguenti comandi nella finestra della riga di comando.

~~~~ {.shell}
$ grep '^From:' mbox-short.txt
From: stephen.marquard@uct.ac.za
From: louis@media.berkeley.edu
From: zqian@umich.edu
From: rjlowe@iupui.edu
~~~~

Questo dice a `grep` di mostrare le righe che iniziano con la stringa "From:" nel file `mbox-short.txt`. Se sperimentate un po' con il comando `grep` e leggete la documentazione di `grep`, troverete alcune sottili differenze tra il supporto delle espressioni regolari in Python e il supporto delle espressioni regolari in `grep`. Ad esempio, `grep` non supporta il carattere non vuoto "`\`S", quindi dovrete usare una notazione per gli insiemi leggermente più complessa "['^']", che indica semplicemente di individuare un carattere diverso da uno spazio.  

Debug
---------

Python ha una documentazione integrata semplice e rudimentale che può essere molto utile se avete bisogno di un rapido aggiornamento per rinfrescare la vostra memoria sul nome esatto di un particolare metodo. Questa documentazione può essere visualizzata nell'interprete Python in modalità interattiva.  Potete visualizzare una guida interattiva usando `help()`.

~~~~
>>> help()

help> modules
~~~~

Se sapete quale modulo volete usare, potete usare il comando `dir()` per trovare i metodi nel modulo come segue:

~~~~ {.python .trinket}
>>> import re
>>> dir(re)
[.. 'compile', 'copy_reg', 'error', 'escape', 'findall',
'finditer', 'match', 'purge', 'search', 'split', 'sre_compile',
'sre_parse', 'sub', 'subn', 'sys', 'template']
~~~~

È inoltre possibile, utilizzando il comando dir, ottenere una piccola documentazione su un particolare metodo.

~~~~ {.python .trinket}
>>> help (re.search)
Help on function search in module re:

search(pattern, string, flags=0)
    Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found.
>>>
~~~~


La documentazione integrata non è molto ampia, ma può essere utile quando si ha fretta o non si ha accesso a un browser Web o ad un motore di ricerca.

Glossario
--------

codice fragile
: codice che funziona quando i dati di input sono in un formato particolare ma è soggetto a rotture se c'è qualche deviazione dal formato corretto. Chiamiamo questo "codice fragile" perché si rompe facilmente.
corrispondenza avida: la nozione per indicare che i caratteri "+" e "\*" in un'espressione regolare si espandono verso l'esterno per corrispondere alla stringa più grande possibile.

\index{greedy}
\index{greedy matching}

grep
: un comando disponibile nella maggior parte dei sistemi Unix che cerca tra i file di testo alla ricerca di righe che soddisfino le espressioni regolari. Il nome del comando sta per "Generalized Regular Expression Parser".

\index{grep}

espressione regolare
: un linguaggio per esprimere stringhe di ricerca più complesse. Un'espressione regolare può contenere caratteri speciali che indicano che una ricerca corrisponde solo all'inizio o alla fine di una riga o molte altre funzionalità simili.

wild-card
: un carattere speciale che corrisponde a qualsiasi carattere. Nelle espressioni regolari il carattere wild-card è il punto.

\index{wild card}

Esercizi
---------
**Esercizio 1:** Scrivete un semplice programma per simulare l'operazione del comando `grep` su Unix. Chiedete all'utente di immettere un'espressione regolare e di contare il numero di righe che corrispondono all'espressione regolare:

~~~~
$ python grep.py
Enter a regular expression: ^Author
mbox.txt had 1798 lines that matched ^Author

$ python grep.py
Enter a regular expression: ^X-
mbox.txt had 14368 lines that matched ^X-

$ python grep.py
Enter a regular expression: java$
mbox.txt had 4218 lines that matched java$
~~~~

**Esercizio 2:** Scrivete un programma per cercare le righe del form

~~~~
`New Revision: 39772`
~~~~

ed estrarre il numero da ciascuna delle righe usando un'espressione regolare e il metodo `findall()`. Calcolate la media dei numeri e visualizzatela.  

~~~~
Enter file:mbox.txt
38444.0323119

Enter file:mbox-short.txt
39756.9259259
~~~~
