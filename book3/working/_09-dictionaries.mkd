
Dizionari
============

\index{dictionary}
\index{dictionary}

\index{type!dict}
\index{key}
\index{key-value pair}
\index{index}
\index{}
Un * dizionario * è come una lista, ma più generale. In una lista, gli indici di posizione devono essere numeri interi; in un dizionario, gli indici possono essere (quasi) di qualsiasi tipo.  Potete pensare a un dizionario come una mappatura tra un insieme di indici (che sono chiamati * chiavi *) e un insieme di valori. Ogni chiave viene associata ad un valore. L'associazione di una chiave e un valore è chiamata * coppia chiave-valore * o talvolta * item *.  Ad esempio, costruiremo un dizionario che mappa dalle parole inglesi a quelle spagnole, quindi le chiavi e i valori saranno tutte stringhe.  La funzione `dict` crea un nuovo dizionario senza elementi. Poiché `dict` è il nome di una funzione integrata, dovreste evitare di usarlo come nome di variabile. 
\index{dict function}
\index{function!dict}

~~~~1
Le parentesi graffe, `{}`, rappresentano un dizionario vuoto. Per aggiungere elementi al dizionario, potete usare le parentesi quadre: 
\index{squiggly bracket}
\index{bracket!squiggly}

~~~~2
Questa linea crea un oggetto che mappa dalla chiave "uno" al valore "uno". Se visualizziamo nuovamente il dizionario, vediamo una coppia chiave-valore con due punti tra la chiave e il valore: 
~~~~3
Questo formato di output è anche un formato di input. Ad esempio, potete creare un nuovo dizionario con tre elementi.  Ma se visualizzate `eng2sp`, potreste rimanere sorpresi: 
~~~~4
L'ordine delle coppie chiave-valore non è lo stesso. Infatti, se digitiate lo stesso esempio sul vostro computer, potresti ottenere un risultato diverso. In generale, l'ordine degli elementi in un dizionario è imprevedibile.  Ma questo non è un problema perché gli elementi di un dizionario non sono mai indicizzati con indici interi. Invece, usate le chiavi per cercare i valori corrispondenti: 
~~~~5
La chiave `'two'` si associa sempre al valore" dos "in modo che l'ordine degli oggetti non abbia importanza.  Se la chiave non è nel dizionario, otterrete un'eccezione: 
\index{exception!KeyError}
\index{KeyError}

~~~~6
La funzione `len` funziona sui dizionari; restituisce il numero di coppie chiave-valore: 
\index{len function}
\index{function!len}

~~~~7
L'operatore `in` lavora sui dizionari; vi dice se qualcosa è presente come un * chiave * nel dizionario (se appare come un valore non è abbastanza buono). 
\index{membership!dictionary}
\index{in operator}
\index{operator!in}

~~~~8
Per vedere se qualcosa appare come valore in un dizionario, potete usare il metodo `values`, che restituisce i valori come una lista, e quindi utilizzate l'operatore` in`: 
\index{values method}
\index{method!values}

~~~~9
L'operatore `in` utilizza algoritmi diversi per liste e dizionari. Per le liste, utilizza un algoritmo di ricerca lineare. Man mano che la lista si allunga, il tempo di ricerca si allunga in proporzione diretta alla lunghezza della lista. Per i dizionari, Python utilizza un algoritmo chiamato * tabella hash * che ha una proprietà notevole: l'operatore `in` richiede circa la stessa quantità di tempo indipendentemente dal numero di elementi presenti in un dizionario. Non spiegheremo perché le funzioni di hash sono così magiche, ma potete leggere ulteriori informazioni su [wikipedia.org/wiki/Hash\_table](wikipedia.org/wiki/Hash_table). 
\index{hash table}
Esercizio 1: [wordlist2] 
\index{set membership}
\index{membership!set}
Scrivete un programma che legga le parole in `words.txt` e le memorizzi come chiavi in ​​un dizionario. Non importa quali siano i valori. Quindi potete usare l'operatore `in` come un modo veloce per verificare se una stringa è nel dizionario.   Dizionario come insieme di contatori
-------------------------------

\index{counter}
Supponiamo di avere una stringa e di voler contare quante volte appaia ogni lettera. Ci sono diversi modi per farlo:
1.   Potreste creare 26 variabili, una per ogni lettera dell'alfabeto. Quindi potreste scorrere la stringa e, per ogni carattere, incrementare il contatore corrispondente, probabilmente usando una condizione concatenata.
2.   Potreste creare una lista con 26 elementi. Quindi potreste convertire ciascun carattere in un numero (utilizzando la funzione incorporata `ord`), utilizzare il numero come indice nell'elenco e incrementare il contatore appropriato.
3.   potreste creare un dizionario con caratteri come chiavi e contatori come valori corrispondenti. La prima volta che vedete un carattere, dovrete aggiungere un elemento al dizionario. Successivamente, dovreste incrementerare il valore di un elemento esistente.

Ognuna di queste opzioni esegue lo stesso calcolo, ma ognuna di esse implementa tale calcolo in un maniera diversa. 
\index{implementation}
Un'implementazione * è un modo di eseguire un calcolo; alcune implementazioni sono migliori di altre. Ad esempio, un vantaggio dell'implementazione del dizionario è che non dobbiamo sapere in anticipo quali lettere appaiono nella stringa e dobbiamo solo fare spazio per le lettere che appaiono.  Ecco come potrebbe apparire il codice: 
~~~~10
Stiamo effettivamente calcolando un * istogramma *, che è un termine statistico per un insieme di contatori (o frequenze). 
\index{histogram}
\index{frequency}
\index{traversal}
Il ciclo `for` attraversa la stringa. Ogni volta che viene eseguito il ciclo, se il carattere `c` non è nel dizionario, creiamo un nuovo elemento con la chiave` c` e il valore iniziale 1 (poiché abbiamo visto questa lettera una sola volta). Se `c` è già presente nel dizionario incrementiamo` d [c] `. 
\index{histogram}
Ecco l'output del programma: 
~~~~11
L'istogramma indica che le lettere "a" e "b" compaiono una sola volta; "o" appare due volte e così via. 
\index{get method}
\index{method!get}
I dizionari hanno un metodo chiamato `get` che riceve una chiave e un valore predefinito. Se la chiave è presente nel dizionario, `get` restituisce il valore corrispondente; altrimenti restituisce il valore predefinito. Per esempio: 
~~~~12
Possiamo usare `get` per scrivere il nostro ciclo di istogramma in modo più conciso. Poiché il metodo `get` gestisce automaticamente il caso in cui una chiave non è presente in un dizionario, possiamo ridurre quattro righe ad una sola ed eliminare l'istruzione` if`. 
~~~~13
L'uso del metodo `get` per semplificare questo ciclo di conteggio sarà un" idioma "molto comunemente usato in Python e lo useremo molte volte nel resto del libro. Quindi dovreste prendervi un momento e confrontare il ciclo che utilizza l'istruzione `if` e l'operatore` in` con il ciclo che utilizza il metodo `get`. Fanno esattamente la stessa cosa, ma uno è più conciso. 
\index{idiom}
Dizionari e file
----------------------
Uno degli usi comuni di un dizionario è contare l'occorrenza di parole in un file con del testo scritto. Iniziamo con un semplice file di parole tratto dal testo di * Romeo e Giulietta *.

Per la prima serie di esempi, utilizzeremo una versione abbreviata e semplificata del testo senza segni di punteggiatura. Successivamente lavoreremo con il testo della scena con la punteggiatura inclusa.

But soft what light through yonder window breaks
It is the east and Juliet is the sun
Arise fair sun and kill the envious moon
Who is already sick and pale with grief 

Scriveremo un programma Python per leggere le righe del file, suddividere ogni riga in un elenco di parole, quindi scorrere ciascuna parola presente nella riga e contarne ognuna utilizzando un dizionario. 
\index{nested loops}
\index{loop!nested}
Vedrete che avremo due cicli `for`. Il ciclo esterno sta leggendo le righe del file e il ciclo interno sta iterando attraverso ciascuna delle parole presenti in quella particolare riga. Questo è un esempio di un pattern chiamato * cicli annidati * perché uno dei cicli è il ciclo * esterno * e l'altro è il ciclo * interno*.  Poiché il ciclo interno esegue tutte le sue iterazioni ogni volta che il ciclo esterno effettua una singola iterazione, pensiamo al ciclo interno come se iterasse "più rapidamente" e al ciclo esterno come se iterasse più lentamente. 
\index{Romeo and Juliet}
La combinazione dei due cicli annidati garantisce che conteremo ogni parola su ogni riga del file in input. 
\VerbatimInput{../code3/count1.py}
\begin{trinketfiles}
../code3/romeo.txt
\end{trinketfiles}
Quando eseguiamo il programma, vediamo un dump grezzo di tutti i conteggi nell'ordine hash non ordinato. (il file `romeo.txt` è disponibile su [www.py4e.com/code3/romeo.txt](http://www.py4e.com/code3/romeo.txt)) 
~~~~14
È un po 'scomodo cercare nel dizionario per trovare le parole più comuni e i loro conteggi, quindi abbiamo bisogno di aggiungere altro codice Python per ottenere un output che ci sarà più utile.  Cicli e dizionari
------------------------

\index{dictionary!looping with}
\index{looping!with dictionaries}
\index{traversal}
Se si usa un dizionario come una sequenza in un'istruzione `for`, questo scorre le chiavi del dizionario. Questo ciclo stampa ogni chiave e il valore corrispondente: 
~~~~15
Ecco come appare l'output: 
~~~~16
Di nuovo, le chiavi non sono in alcun ordine particolare. 
\index{idiom}
Possiamo usare questo modello per implementare i vari cicli degli idiomi che abbiamo descritto in precedenza. Ad esempio, se volessimo trovare tutte le voci in un dizionario con un valore superiore a dieci, potremmo scrivere il seguente codice: 
~~~~17
Il ciclo `for` scorre le * chiavi * del dizionario, quindi dovremo utilizzare l'operatore index per recuperare il valore * corrispondente * per ogni chiave. Ecco come appare l'output: 
~~~~18
Vediamo solo le voci con un valore superiore a 10. 
\index{keys method}
\index{method!keys}
Se desiderate visualizzare le chiavi in ordine alfabetico, è prima necessario creare un elenco delle chiavi nel dizionario utilizzando il metodo `keys` disponibile per gli oggetti dizionario, quindi ordinare l'elenco e scorrere l'elenco ordinato, cercando ogni tasto e stampando le coppie chiave-valore in maniera ordinata come segue: 
~~~~19
Ecco come appare l'output: 
~~~~20
Per prima cosa vedrete la lista delle chiavi in maniera non ordinata che otteniamo dal metodo `keys`. Quindi vedrete le coppie chiave-valore ordinate dal ciclo `for`.  Analisi avanzata del testo
---------------------

\index{Romeo and Juliet}
Nell'esempio precedente utilizzando il file `romeo.txt`, abbiamo reso il file il più semplice possibile rimuovendo manualmente tutti i segni di punteggiatura. Il testo attuale ha molta punteggiatura, come mostrato di seguito. 
~~~~21
Dato che la funzione Python `split` cerca spazi e tratta parole come elementi separati da spazi, tratteremo le parole "soft!"e" soft "come parole * differenti * e creiamo una voce di dizionario separata per ognuna di queste.  Inoltre, poiché il file è in maiuscolo, considereremo "who" e "Who" come parole diverse con diversi conteggi.  Possiamo risolvere entrambi questi problemi usando i metodi per le stringhe `lower`,` punctuation` e `translate`. Il metodo `translate` è il più sottile dei metodi. Ecco la documentazione del metodo `translate`:` line.translate (str.maketrans (fromstr, tostr, deletestr)) `* Sostituisce i caratteri in` fromstr` con il carattere nella stessa posizione in `tostr` ed elimina tutti i caratteri che sono in `deletestr`. `Fromstr` e` tostr` possono essere stringhe vuote e il parametro `deletestr` può essere omesso.* Non specificheremo la `tabella`, ma useremo il parametro` deletechars` per cancellare tutta la punteggiatura. Lasceremo persino che Python ci dica la lista di caratteri che considera "punteggiatura": 
~~~~22
I parametri utilizzati dal metodo `translate` erano diversi in Python 2.0.  Apportiamo le seguenti modifiche al nostro programma: 
\VerbatimInput{../code3/count2.py}
\begin{trinketfiles}
../code3/romeo-full.txt
\end{trinketfiles}
Parte dell'apprendimento di "Art of Python" o "Thinking Pythonically" è comprendere che Python ha spesso funzionalità integrate per molti problemi comuni di analisi dei dati. Nel tempo, vedrete abbastanza codice di esempio e leggerete abbastanza documentazione per sapere dove guardare per vedere se qualcuno ha già scritto qualcosa che renderà il vostro lavoro molto più facile.  Quanto segue è una versione abbreviata dell'output: 
~~~~23
Guardare a questo output è ancora poco agevole e possiamo usare Python per darci esattamente quello che stiamo cercando, ma per farlo, abbiamo bisogno di conoscere le tuple * di Python. Riprenderemo questo esempio una volta appresa le tuple.  Debug
---------

\index{debugging}
Lavorando con insiemi di dati più grandi, può risultare poco pratico eseguire il debug stampando e controllando i dati manualmente. Ecco alcuni suggerimenti per il debug di insiemi di dati di grandi dimensioni:
Ridimensionare l'input: se possibile, ridurre la dimensione dell'insieme di dati. Ad esempio, se il programma legge un file di testo, iniziate con solo le prime 10 righe o con l'esempio più piccolo che riuscite a trovare. Potete modificare i file stessi o (meglio) modificare il programma in modo che legga solo le prime `n` righe.

Se c'è un errore, potete ridurre `n` al valore più piccolo che manifesta l'errore, e poi aumentarlo gradualmente man mano che trovate e correggete gli errori.

Controllare i riepiloghi e i tipi: anziché visualizzare e controllare l'intero set di dati, prendete in considerazione la stampa di riepiloghi dei dati: ad esempio, il numero di elementi in un dizionario o il totale di un elenco di numeri.

Una causa comune di errori di runtime è un valore che non è del giusto tipo. Per eseguire il debug di questo tipo di errore, è spesso sufficiente stampare il tipo di un valore.

Scrivete autocontrolli: a volte potete scrivere codice per verificare automaticamente gli errori. Ad esempio, se si calcola la media di un elenco di numeri, è possibile verificare che il risultato non sia maggiore dell'elemento più grande nell'elenco o minore del più piccolo. Questo è chiamato "controllo di integrità" perché individua risultati "completamente illogici".
\index{sanity check}
\index{consistency check}
     Un altro tipo di controllo confronta i risultati di due diversi calcoli per vedere se sono coerenti. Questo è chiamato "controllo di coerenza".
     Visualizzare bene l'output: la formattazione dell'output di debug può rendere più facile individuare un errore. 
     Ancora una volta, il tempo speso per la costruzione di impalcature può ridurre il tempo impiegato per il debugging.
\index{scaffolding}
Glossario
--------
dizionario: una mappatura da un set di chiavi ai valori corrispondenti.
\index{dictionary}
hashtable: l'algoritmo utilizzato per implementare i dizionari Python.
\index{hashtable}
Funzione hash: una funzione utilizzata da una tabella hash per calcolare la posizione di una chiave.
\index{hash function}
istogramma: una serie di contatori.
\index{histogram}
implementazione: un modo di eseguire un calcolo.
\index{implementation}
item: un altro nome per una coppia chiave-valore.
\index{item!dictionary}
chiave: un oggetto che appare in un dizionario come prima parte di una coppia chiave-valore.
\index{key}
coppia chiave-valore: la rappresentazione della mappatura da una chiave a un valore.
\index{key-value pair}
ricerca: un'operazione di dizionario che prende una chiave e trova il valore corrispondente.
\index{lookup}
cicli annidati: quando ci sono uno o più cicli "all'interno" di un altro ciclo. Il ciclo interno viene completato ogni volta che il ciclo esterno viene eseguito.
\index{nested loops}
\index{loop!nested}
valore: un oggetto che appare in un dizionario come seconda parte di una coppia chiave-valore. Questo è più specifico del nostro precedente uso della parola "valore".
\index{value}
Esercizi
---------
** Esercizio 2: ** Scrivete un programma che classifica ogni messaggio di posta in base al giorno della settimana in cui è stato inviato. Per fare ciò, cercate le righe che iniziano con "From", quindi cercate la terza parola e mantenete unconteggio di ciascuno dei giorni della settimana. Alla fine del programma stampate i contenuti del tuo dizionario (l'ordine non ha importanza).  Riga di esempio: 
~~~~24
Esempio di esecuzione: 
~~~~25
** Esercizio 3: ** Scrivete un programma per leggere un registro di posta, create un istogramma utilizzando un dizionario per contare quanti messaggi sono arrivati ​​da ciascun indirizzo di posta elettronica e stampate il dizionario. 
~~~~26
** Esercizio 4: ** Aggiungete codice al programma di cui sopra per capire chi ha il maggior numero di messaggi nel file.

Dopo che tutti i dati sono stati letti e il dizionario è stato creato, scorrete il dizionario usando un ciclo massimo (vedi Sezione [maximumloop]) per trovare chi ha più messaggi e stampare quanti messaggi ha la persona. 
~~~~27
** Esercizio 5: ** Questo programma registra il nomeai dominio (anziché l'indirizzo) da cui è stato inviato il messaggio anziché da chi proviene la posta (ovvero, l'intero indirizzo email). Alla fine del programma, stampate i contenuti del vostro dizionario.
~~~~28