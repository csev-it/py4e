
Utilizzo di servizi Web
==================
Ora che è diventato semplice ottenere i documenti via HTTP e analizzarli utilizzando i programmi, non è stato necessario molto tempo per sviluppare un approccio in cui abbiamo iniziato a produrre documenti realizzati specificamente per essere utilizzati da altri programmi (ossia non HTML da visualizzare in un browser ).
Esistono due formati comuni che utilizziamo per scambiare dati sul Web. L'eXtensible Markup Language o XML è in uso da molto tempo ed è più adatto per lo scambio di dati in stile documento. Quando i programmi vogliono solo scambiare dizionari, elenchi o altre informazioni interne tra loro, viene utilizzata la JavaScript Object Notation o JSON (si veda [www.json.org] (http://www.json.org)). Analizzeremo entrambi i formati.
eXtensible Markup Language - XML
--------------------------------
XML si presenta molto simile all'HTML, ma XML è più strutturato. Ecco un esempio di un documento XML: 
~~~~1
Spesso è utile pensare a un documento XML come una struttura ad albero in cui è presente un tag 'person` in alto e altri tag inseriti come `phone`, rappresentati come figli dei loro nodi padre. 
######1
Analizzare XML
-----------

######2
######3
######4
Ecco una semplice applicazione che analizza alcuni XML e ne estrae alcuni elementi: 
######5
Chiamando `fromstring` convertiamo la rappresentazione a stringa dell'XML in un "albero" di nodi XML. Quando l'XML è ad albero, abbiamo una serie di metodi che possiamo chiamare per estrarre dati dall'XML.  La funzione `find` cerca attraverso l'albero XML e recupera un *nodo* che corrisponde al tag specificato. Ogni nodo può avere un testo, degli attributi (come hide) e alcuni nodi "figli". Ogni nodo può essere a sua volta la cima di un albero di nodi. 
~~~~2
L'utilizzo di un parser XML come `ElementTree` ha il vantaggio che anche se l'XML in questo esempio è piuttosto semplice, risulta avere molte regole riguardanti XML valido e l'uso di `ElementTree` ci consente di estrarre dati dall'XML senza preoccuparci delle regole della sintassi.

Cicli con i nodi degli XML
---------------------

######6
######7
Spesso un XML ha più nodi e abbiamo bisogno di scrivere un ciclo per elaborarli tutti. Nel seguente programma, passiamo scorrere tutti i nodi `user`: 
######8
Il metodo `findall` recupera una lista di Python fatta di sottoalberi che rappresentano le strutture `user` nell'albero XML. Quindi possiamo scrivere un ciclo `for` che esamini ciascuno dei nodi user, e visualizzi gli elementi di testo `name` e `id` come pure l'attributo `x` dal nodo `utente`. 
~~~~3
JavaScript Object Notation - JSON
---------------------------------

######9
######10
Il formato JSON è stato ispirato dai formati oggetto e array utilizzato nel linguaggio JavaScript. Ma poiché Python è stato inventato prima di JavaScript, la sintassi di Python per i dizionari e le liste ha influenzato la sintassi di JSON. Quindi il formato di JSON è quasi identico a una combinazione di elenchi e dizionari Python.
Di seguito una codifica JSON che è approssimativamente equivalente al semplice XML di cui sopra: 
~~~~4
Noterete alcune differenze. Innanzitutto, nel formato XML possiamo aggiungere attributi come "intl" al tag "phone". Con il formato JSON, abbiamo semplicemente coppie chiave-valore. Anche il tag XML "person" è scomparso, sostituito da una serie di parentesi graffe.
In generale, le strutture JSON sono più semplici di XML perché JSON dispone di meno funzionalità rispetto ad essa. Ma il formato JSON ha il vantaggio di mappare *direttamente* alcune combinazioni di dizionari ed elenchi. E poiché quasi tutti i linguaggi di programmazione hanno qualcosa di equivalente ai dizionari e agli elenchi di Python, JSON è un formato molto naturale in cui far scambiare dati a due programmi cooperanti.
JSON sta rapidamente diventando il formato scelto per quasi tutti gli scambi di dati tra le applicazioni a causa della relativa semplicità rispetto al formato XML.
Analizzare JSON
------------
Costruiamo il nostro JSON annidando dizionari (oggetti) ed elenchi in base alle necessità. In questo esempio, rappresentiamo un elenco di utenti in cui ogni utente è un insieme di coppie chiave-valore (cioè un dizionario). Quindi abbiamo un elenco di dizionari.
Nel seguente programma, usiamo la libreria integrata *json* per analizzare il JSON e leggerne i dati. Mettete a confronto i corrispondenti dati in XML e il codice precedente. Il JSON ha meno dettagli, quindi dobbiamo sapere in anticipo che stiamo ottenendo una lista e che la lista è di utenti e che ogni utente è un insieme di coppie chiave-valore. Il JSON è più succinto (un vantaggio) ma è anche meno descrittivo (uno svantaggio). 
######11
Se confrontate il codice per estrarre i dati dal JSON e dall'XML analizzati, vedrete che ciò che otteniamo da *json.loads()* è un elenco Python che scorriamo con un ciclo `for`, e ogni elemento all'interno di tale elenco è un dizionario Python. Una volta analizzato il JSON, possiamo usare l'operatore dell'indice Python per estrarre i vari bit di dati per ciascun utente. Non dobbiamo usare la libreria JSON per cercare all'interno del JSON analizzato, dal momento che i dati restituiti sono semplicemente strutture native di Python.
L'output di questo programma è esattamente lo stesso della versione XML di cui sopra. 
~~~~5
In generale, per i servizi web c'è una tendenza ad allontanarsi dal formato XML verso il formato JSON. Poiché il formato JSON è più semplice e più direttamente associabile a strutture di dati nativamente che ritroviamo già presenti nei linguaggi di programmazione, il codice di analisi e di estrazione dei dati è in genere più semplice e diretto quando si utilizza il JSON. Ma l'XML è più auto-descrittivo del JSON e quindi ci sono alcune applicazioni in cui XML mantiene un vantaggio. Ad esempio, la maggior parte dei word processor memorizza i documenti internamente utilizzando il formato XML piuttosto che il JSON.

Interfacce per la programmazione di applicazioni
----------------------------------
Ora abbiamo la possibilità di scambiare dati tra le applicazioni utilizzando l'HyperText Transport Protocol (HTTP) e un modo per rappresentare dati complessi che stiamo inviando avanti e indietro tra le applicazioni utilizzando l'eXtensible Markup Language (XML) o la JavaScript Object Notation (JSON).
Il prossimo passo è iniziare a definire e documentare "contratti" tra le applicazioni che utilizzano queste tecniche. Il nome generico per questi contratti applicazione-applicazione è *Application Program Interfaces* o API. Quando usiamo un'API, generalmente un programma rende disponibile un insieme di *servizi* utilizzabili da altre applicazioni e pubblica le API (cioè le "regole") che devono essere seguite per accedere ai servizi forniti dal programma.
Quando iniziamo a costruire i nostri programmi con funzionalità che prevedono l'accesso ai servizi forniti da altri programmi, usiamo un approccio chiamato *Service-Oriented Architecture* o SOA. Un approccio SOA è quello in cui la nostra applicazione principale si avvale dei servizi di altre applicazioni. Un approccio non è "SOA" quando abbiamo una singola applicazione standalone che contiene tutto il codice necessario per implementare l'applicazione.
Vediamo molti esempi di SOA quando usiamo il web. Possiamo andare su un unico sito web e prenotare viaggi aerei, hotel e automobili. I dati per gli hotel non sono memorizzati nei computer delle compagnie aeree. Invece, i computer delle compagnie aeree contattano i servizi sui computer dell'hotel e recuperano i dati dell'hotel e li presentano all'utente. Quando l'utente accetta di effettuare una prenotazione alberghiera utilizzando il sito della compagnia aerea, il sito della compagnia aerea utilizza un altro servizio Web sui sistemi dell'hotel per effettuare concretamente la prenotazione. E quando arriva il momento di addebitare il costo sulla vostra carta di credito per l'intera transazione, vengono coinvolti anche altri computer. 
######12
Un'architettura orientata ai servizi (SOA) presenta molti vantaggi, tra cui: (1) conserviamo sempre una sola copia di dati (questo è particolarmente importante per cose come prenotazioni di hotel in cui non vogliamo sovrapporre azioni) e (2) i proprietari dei dati possono gestire le regole sull'uso dei propri dati. Con questi vantaggi, un sistema SOA deve essere progettato oculatamente per avere buone prestazioni e soddisfare le esigenze dell'utente.
Quando delle applicazioni mettono a disposizione sul web una serie di servizi nelle loro API, le chiamiamo *servizi web*.

Servizio web di geocodifica di Google
----------------------------

######13
######14
######15
Google ha un eccellente servizio web che ci consente di utilizzare il suo ampio database di informazioni geografiche. Possiamo inviare una stringa di ricerca geografica come "Ann Arbor, MI" alla sua API di geocodifica e fare in modo che Google restituisca la migliore ipotesi su dove in una mappa potremmo trovare la nostra stringa di ricerca e comunicarci i punti di riferimento nelle vicinanze.
Il servizio di geocodifica è gratuito ma limitato, quindi non è possibile utilizzare l'API in modo illimitato in un'applicazione commerciale. Tuttavia, se si dispone di dati di sondaggi in cui un utente finale ha inserito una posizione in una casella di immissione a formato libero, è possibile utilizzare questa API per pulire i dati in modo da renderli più gradevoli.
*Quando utilizzate un'API gratuita come l'API di geocodifica di Google, è necessario essere rispettosi nell'uso di queste risorse. Se troppe persone abusano del servizio, Google potrebbe abbandonare o ridurre significativamente il suo servizio gratuito.* 
######16
Potete leggere la documentazione online per questo servizio, ma è abbastanza semplice e potete persino testarlo utilizzando un browser e digitando il seguente URL:
[http://maps.googleapis.com/maps/api/geocode/json?address=Ann+Arbor%2C+MI](http://maps.googleapis.com/maps/api/geocode/json?address= Ann + Arbor% 2C + MI) Assicuratevi di estrarre l'URL e rimuovere gli spazi prima di incollarlo nel vostro browser.
La seguente è una semplice applicazione per richiedere all'utente una stringa di ricerca, chiamare l'API di geocodifica di Google ed estrarre informazioni dal JSON restituito. 
######17
Il programma prende la stringa di ricerca e costruisce un URL con la stringa di ricerca come parametro opportunamente codificato e quindi utilizza *urllib* per recuperare il testo dall'API di geocodifica di Google. A differenza di una pagina web fissa, i dati che otteniamo dipendono dai parametri che inviamo e dai dati geografici memorizzati nei server di Google.
Una volta recuperati i dati JSON, li analizziamo con la libreria *json* e facciamo alcuni controlli per assicurarci di aver ricevuto dati validi, quindi estraiamo le informazioni che stiamo cercando.
L'output del programma è il seguente (alcuni dei JSON restituiti sono stati rimossi): 
~~~~6

~~~~7

~~~~8
Potete scaricare [www.py4e.com/code3/geoxml.py](http://www.py4e.com/code3/geoxml.py) per esplorare la variante XML dell'API di geocodifica di Google.

Sicurezza e utilizzo delle API
----------------------

######18
######19
È abbastanza comune che sia necessario un qualche tipo di "chiave API" per utilizzare l'API di un venditore. L'idea generale è che vogliono sapere chi sta usando i loro servizi e quanto ogni utente li sta usando. Potrebbero avere dei livelli gratuiti e altri a pagamento dei loro servizi o potrebbero avere una politica che limita il numero di richieste che un singolo individuo può effettuare durante un determinato periodo di tempo.
A volte, una volta ottenuta la chiave API, è sufficiente includere la chiave come parte dei dati POST o forse come parametro sull'URL quando si chiama l'API.
Altre volte, i venditori desiderano una maggiore garanzia sulla fonte delle richieste e quindi pretendono che inviamo messaggi firmati crittograficamente utilizzando chiavi condivise e segreti. Una tecnologia molto comune che viene utilizzata per firmare le richieste su Internet si chiama *OAuth*. Potete leggere ulteriori informazioni sul protocollo OAuth su [www.oauth.net] (http://www.oauth.net).
Man mano che l'API di Twitter diventava sempre più preziosa, Twitter è passato da un'API pubblica e aperta a un'API che richiedeva l'uso delle firme OAuth su ogni richiesta. Per fortuna ci sono ancora un certo numero di librerie OAuth convenienti e gratuite, così potete evitare di scrivere un'implementazione OAuth da zero leggendo le specifiche. Queste librerie sono di varia complessità e hanno vari gradi di completezza. Il sito Web OAuth contiene informazioni su varie librerie OAuth.
Per questo prossimo programma di esempio scaricheremo i files *twurl.py*, *hidden.py*, *oauth.py* e *twitter1.py* da [www.py4e.com/code](http://www .py4e.com/code3) e li metteremo tutti in una cartella sul nostro computer.
Per utilizzare questi programmi è necessario disporre di un account Twitter e autorizzare il codice Python come applicazione, impostare una chiave, un segreto, un token e un token segreto. Modifichiamo il file *hidden.py* e inseriamo queste quattro stringhe nelle variabili appropriate nel file: 
######20
Il servizio web di Twitter è accessibile tramite un URL come questo:
<Https://api.twitter.com/1.1/statuses/user_timeline.json>
Ma una volta aggiunte tutte le informazioni sulla sicurezza, l'URL sarà più simile a: 
~~~~9
Potete leggere le specifiche OAuth se volete sapere di più sul significato dei vari parametri che vengono aggiunti per soddisfare i requisiti di sicurezza di OAuth.
Per i programmi che eseguiamo con Twitter, nascondiamo tutta la complessità nei file *oauth.py* e *twurl.py*. Impostiamo semplicemente i segreti in *hidden.py* e poi inviamo l'URL desiderato alla funzione *twurl.augment()* e il codice della libreria aggiunge tutti i parametri necessari all'URL per noi.
Questo programma recupera la cronologia per un particolare utente Twitter e ci restituisce tutto in una stringa in formato JSON. Visualizziamo semplicemente i primi 250 caratteri della stringa: 
######21
######22
../code3/twurl.py
######23
Quando il programma viene eseguito, viene visualizzato il seguente output: 
~~~~10
Insieme ai dati della cronologia restituiti, Twitter restituisce anche i metadati relativi alla richiesta nelle intestazioni delle risposte HTTP. In particolare, l'intestazione *x-rate-limit-remaining*, ci informa su quante altre richieste possiamo fare prima di venire bloccati per un breve periodo di tempo. Potete vedere che le richieste rimanenti diminuiscono di uno ogni volta che ne facciamo una.
Nell'esempio seguente, recuperiamo gli amici di Twitter di un utente, analizziamo il JSON restituito ed estraiamo alcune informazioni sugli amici. Inoltre, eseguiamo il dump del JSON dopo averlo analizzato e "stampato" con un rientro di quattro caratteri per consentirci di analizzare i dati quando vogliamo estrarre più campi. 
######24
######25
../code3/twurl.py
######26
Poiché il JSON diventa una serie di elenchi e dizionari Python annidati, possiamo usare una combinazione di operazioni su indici e cicli `for` per scorrere le strutture dati restituite con pochissimo codice Python.
L'output del programma appare come segue (alcuni degli elementi dei dati vengono abbreviati per adattarsi alla pagina): 
~~~~11

~~~~12

~~~~13
L'ultimo pezzo dell'output è dove vediamo il ciclo for che legge i cinque "amici" più recenti dell'account Twitter *drchuck* e visualizziamo lo stato più recente per ciascun amico. Vi sono molti più dati disponibili nel JSON restituito. Se si guarda l'output del programma, è anche possibile vedere che il "trova gli amici" di un determinato account ha una diversa velocità in base al numero di query sulla cronologia che è possibile eseguire per ogni periodo di tempo.
Queste chiavi API sicure consentono a Twitter di sapere con certezza chi sta usando le sue API e i suoi dati e a che livello. L'approccio sulla limitazione della velocità ci consente di eseguire semplici raccolte di dati personali, ma non ci consente di creare un prodotto che estragga i dati dalle API milioni di volte al giorno.

Glossario
--------
API: Application Program Interface - Un contratto tra le applicazioni che definisce i modelli di interazione tra due componenti di un'applicazione.
######27
ElementTree: una libreria Python integrata utilizzata per analizzare i dati XML.
######28
JSON: JavaScript Object Notation. Un formato che consente il markup dei dati strutturati in base alla sintassi degli oggetti JavaScript.
######29
######30
SOA: Service-Oriented Architecture. Quando un'applicazione è fatta di componenti connessi attraverso una rete.
######31
######32
XML: eXtensible Markup Language. Un formato che consente il markup dei dati strutturati.
######33
######34
Esercizi
---------
** Esercizio 1: ** Modificate [www.py4e.com/code3/geojson.py](http://www.py4e.com/code3/geojson.py) o [www.py4e.com/code3/ geoxml.py] (http://www.py4e.com/code3/geoxml.py) per visualizzare il codice paese di due caratteri dai dati recuperati. Aggiungete il controllo degli errori in modo che il vostro programma non esegua il traceback se il codice del paese non è presente. Una volta che ha funzionato, cercate "Atlantic Ocean" e assicuratevi che possa gestire luoghi che non si trovano in nessun paese.