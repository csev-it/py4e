
Funzioni
=========

Chiamate di funzione
--------------


\index{function call}
Quando si parla di programmazione, per *funzione* intendiamo una sequenza specifica di istruzioni a cui è stato attribuito un nome, che ha lo scopo di eseguire un'operazione o calcolo particolare. Una volta definita, è possibile "chiamare" una funzione per mezzo del suo nome. In precedenza abbiamo già visto un esempio di una *chiamata di funzione*:

~~~~ {.python}
>>> type(32)
<class 'int'>
~~~~


Il nome della funzione è `type` mentre l'espressione tra parentesi è definita *argomento* della funzione. Quest'ultimo è un valore o una variabile che stiamo passando alla funzione come input. In questo caso specifico il risultato della funzione `type` è il tipo di dato dell'argomento.
\index{parentheses!argument in}

È normale dire che una funzione "accetta" un argomento e "restituisce" un *valore di ritorno*.
\index{argument}
\index{return value}

Funzioni integrate
------------------

Python sono integrate un gran numero di importanti funzioni, create per risolvere problemi comuni, che possiamo usare senza doverle definire. Ad esempio le funzioni `max` e `min` ci forniscono rispettivamente i valori più grandi e più piccoli di un elenco:

~~~~ {.python}
>>> max('Hello world')
'w'
>>> min('Hello world')
' '
>>>
~~~~


La funzione `max` ci indica che il "carattere più grande" nella stringa é la lettera "w" mentre `min` ci mostra che il carattere più piccolo é lo spazio.  Un'altra funzione molto utilizzata è la funzione `len` che ci dice quanti oggetti ci sono nel suo argomento. Nell'esempio seguente l'argomento di `len` è una stringa e perciò viene restituito il numero di caratteri nella stringa.

~~~~ {.python}
>>> len('Hello world')
11
>>>
~~~~



Come vedremo nei prossimi capitoli, queste funzioni non sono fatte solo per lavorare con stringhe ma possono operare su un qualsiasi insieme di valori. Voglio ricordarti che anche i nome di funzioni vanno trattare come parole riservate (ad esempio, evita di utilizzare "max" come nome di variabile).

Funzioni di conversione dei tipi di dato
-------------------------

\index{conversion!type}
\index{type conversion}
Python fornisce anche funzioni integrate che convertono i valori da un tipo ad un altro: ad esempio la funzione `int` accetta qualsiasi valore e, se possibile, lo converte in un numero intero. In caso contrario si lamenta visualizzando un messaggio d'errore:
\index{int function}
\index{function!int}


~~~~ {.python}
>>> int('32')
32
>>> int('Hello')
ValueError: invalid literal for int() with base 10: 'Hello'
~~~~


`int` può convertire valori in virgola mobile in numeri interi eliminando semplicemente la parte frazionaria senza arrotondare il dato:

~~~~ {.python}
>>> int(3.99999)
3
>>> int(-2.3)
-2
~~~~


`float` converte numeri interi e stringhe in numeri in virgola mobile:
\index{float function}
\index{function!float}


~~~~ {.python}
>>> float(32)
32.0
>>> float('3.14159')
3.14159
~~~~


Infine `str` converte il suo argomento in una stringa:
\index{str function}
\index{function!str}


~~~~ {.python}
>>> str(32)
'32'
>>> str(3.14159)
'3.14159'
~~~~


Funzioni matematiche
--------------

\index{math function}
\index{function, math}
\index{module}
\index{module object}
In Python é presente il modulo `math` che ti mette a disposizione la maggior parte delle più comuni funzioni matematiche. 
Essendo un modulo, prima di poterlo utilizzare dobbiamo importarlo:

~~~~ {.python}
>>> import math
~~~~


Questa istruzione crea un *oggetto modulo* chiamato math. tramite il comando print ti é possibile ottenere alcune informazioni di base:

~~~~ {.python}
>>> print(math)
<module 'math' (built-in)>
~~~~


Per accedere a una delle funzioni gestite da questo modulo, è necessario specificare il nome del modulo e il nome della funzione separati da un punto. Questo particolare formato viene chiamato *notazione punto*.
\index{dot notation}


~~~~ {.python}
>>> ratio = signal_power / noise_power
>>> decibels = 10 * math.log10(ratio)

>>> radians = 0.7
>>> height = math.sin(radians)
~~~~


Nel primo esempio viene calcolato il logaritmo in base 10 del rapporto segnale/rumore. Il modulo math è dodato anche di una funzione chiamata `log` che calcola i logaritmi in base `e`.
\index{log function}
\index{function!log}
\index{sine function}
\index{radian}
\index{trigonometric function}
\index{function, trigonometric}

Nel secondo esempio é stato calcolato il seno in `radianti`. Il nome della variabile ti dovrebbe suggerire che `sin` e le altre funzioni trigonometriche (`cos`, `tan`, ecc.) accettano argomenti in radianti.
Per convertire i gradi in radianti, dovrai dividere  il dato in ingresso per 360 e moltiplicare per $2\pi$:


~~~~ {.python}
>>> degrees = 45
>>> radians = degrees / 360.0 * 2 * math.pi
>>> math.sin(radians)
0.7071067811865476
~~~~


L'espressione `math.pi` richiama la variabile `pi` dal modulo math il cui valore è un'approssimazione di $\pi$ con una precisione di circa 15 cifre.
\index{pi}

Se ne capisci di trigonometria, puoi controllare il risultato precedente confrontandolo con la radice quadrata di due fratto due:
\index{sqrt function}
\index{function!sqrt}


~~~~ {.python}
>>> math.sqrt(2) / 2.0
0.7071067811865476
~~~~


Numeri casuali
--------------

\index{random number}
\index{number, random}
\index{deterministic}
\index{pseudorandom}
Dati gli stessi input, la maggior parte dei programmi per computer genera sempre gli stessi output, quindi si dice che sono *deterministici*. Il determinismo di solito è una buona cosa, poiché ci aspettiamo che lo stesso calcolo produca lo stesso risultato. Per alcune applicazioni, tuttavia, desideriamo che il computer sia imprevedibile. I giochi sono un ovvio esempio, ma ce ne sono altri.  Realizzare un programma veramente non deterministico risulta non essere così facile, ma ci sono modi per farlo almeno sembrare non deterministico. Uno di questi è usare *algoritmi* che generano numeri *pseudo-casuali*. I numeri pseudo-casuali non sono veramente casuali perché sono generati da un calcolo deterministico, ma guardando solo i numeri è quasi impossibile distinguerli da quelli casuali.

\index{random module}
\index{module!random}

Il modulo `random` fornisce funzioni che generano numeri pseudo-casuali (che chiameremo semplicemente "casuali" da qui in poi).
\index{random function}
\index{function!random}

La funzione `random` restituisce un numero decimale casuale compreso tra 0.0 e 1.0 (compreso 0.0 ma non 1.0). Ogni volta che si evoca `random`, si ottiene il numero successivo di una lunga serie. Per vedere un esempio, eseguite questo ciclo:

~~~~ {.python}
import random

for i in range(10):
    x = random.random()
    print(x)
~~~~


Questo programma produce il seguente elenco di 10 numeri casuali tra 0.0 e 1.0 (1.0 escluso).

~~~~
0.11132867921152356
0.5950949227890241
0.04820265884996877
0.841003109276478
0.997914947094958
0.04842330803368111
0.7416295948208405
0.510535245390327
0.27447040171978143
0.028511805472785867
~~~~


**Esercizio 1:** eseguite il programma sul vostro sistema per vedere quali numeri si ottengono. Eseguite il programma più di una volta e vedete quali numeri si ottengono.

La funzione `random` è solo una delle molte funzioni che gestiscono numeri casuali. La funzione `randint` accetta i parametri `low` e `high` e restituisce un intero compreso tra i due (inclusi).
\index{randint function}
\index{function!randint}


~~~~ {.python}
>>> random.randint(5, 10)
5
>>> random.randint(5, 10)
9
~~~~


Per scegliere un elemento da una sequenza casuale, potete usare `choice`:
\index{choice function}
\index{function!choice}


~~~~ {.python}
>>> t = [1, 2, 3]
>>> random.choice(t)
2
>>> random.choice(t)
3
~~~~



Il modulo `random` fornisce anche funzioni per generare valori casuali da distribuzioni continue tra cui la gaussiana, l'esponenziale, la gamma e altre.

Aggiungere nuove funzioni
--------------------

Finora, abbiamo solo usato le funzioni fornite con Python, ma è anche possibile aggiungere nuove funzioni. Una *definizione di funzione* specifica il nome di una nuova funzione e la sequenza di istruzioni che vengono eseguite quando la funzione viene chiamata. Una volta definita una funzione, possiamo riutilizzarla più e più volte nel nostro programma.
\index{function}
\index{function definition}
\index{definition!function}
Ecco un esempio:

~~~~ {.python}
def print_lyrics():
    print("I'm a lumberjack, and I'm okay.")
    print('I sleep all night and I work all day.')
~~~~


`def` è una parola chiave che indica che questa è una definizione di funzione. Il nome della funzione è `print_lyrics`. Le regole per i nomi delle funzioni sono le stesse dei nomi delle variabili: lettere, numeri e alcuni segni di punteggiatura sono consentiti, ma il primo carattere non può essere un numero. Non potete utilizzare una parola chiave come nome di una funzione e dovreste evitare di avere una variabile e una funzione con lo stesso nome.

\index{def keyword}
\index{keyword!def}
\index{argument}

Le parentesi vuote dopo il nome indicano che questa funzione non riceve argomenti. Più tardi costruiremo delle funzioni che ricevono degli argomenti come input.
\index{parentheses!empty}
\index{header}
\index{body}
\index{indentation}
\index{colon}

La prima riga della definizione di funzione è chiamata *header*; il resto è chiamato *corpo*. L'header deve terminare con due punti e il corpo deve essere indentato. Per convenzione, il rientro è sempre di quattro spazi. Il corpo può contenere un numero qualsiasi di istruzioni.
\index{ellipses}

Se scrivete una definizione di funzione in modalità interattiva, l'interprete stampa i punti di sospensione (* ... *) per indicare che la definizione non è completa:

~~~~ {.python}
>>> def print_lyrics():
...     print("I'm a lumberjack, and I'm okay.")
...     print('I sleep all night and I work all day.')
...
~~~~


Per terminare la funzione, dovete inserire una riga vuota (non è necessario in uno script).  La definizione di una funzione crea una variabile con lo stesso nome.

~~~~ {.python}
>>> print(print_lyrics)
<function print_lyrics at 0xb7e99e9c>
>>> print(type(print_lyrics))
<class 'function'>
~~~~


Il valore di `print_lyrics` è un *oggetto funzione *, di tipo "funzione".
\index{function object}
\index{object!function}
La sintassi per chiamare la nuova funzione è la stessa delle funzioni integrate:

~~~~ {.python}
>>> print_lyrics()
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
~~~~


Una volta che avete definito una funzione, potrete utilizzarla all'interno di un'altra funzione. Ad esempio, per ripetere il ritornello precedente, potremmo scrivere una funzione chiamata `repeat_lyrics`:

~~~~ {.python}
def repeat_lyrics():
    print_lyrics()
    print_lyrics()
~~~~


E poi chiamare `repeat_lyrics`:

~~~~ {.python}
>>> repeat_lyrics()
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
~~~~


Ma la canzone non fa proprio così.

Definizioni e usi
--------------------

\index{function definition}
Raggruppando i frammenti di codice dalla sezione precedente, l'intero programma si presenterà come segue:

\VerbatimInput{../code3/lyrics.py}

Questo programma contiene due definizioni di funzioni: `print_lyrics` e `repeat_lyrics`. Le definizioni delle funzioni vengono eseguite come le altre istruzioni, ma l'effetto è creare oggetti funzione. Le istruzioni all'interno della funzione non vengono eseguite finché non viene chiamata la funzione e la definizione di una funzione non genera alcun output.
\index{use before def}

Come ci si potrebbe aspettare, è necessario creare una funzione prima di poterla eseguire. In altre parole, la definizione della funzione deve essere effettuata prima della prima chiamata.

**Esercizio 2:** spostate l'ultima riga di questo programma in cima, in modo tale da far apparire la chiamata della funzione prima delle definizioni. Eseguite il programma e vedete quale messaggio di errore ricevete.

**Esercizio 3:** spostate di nuovo la chiamata della funzione in basso e spostate la definizione di `print_lyrics` dopo la definizione di `repeat_lyrics`. Cosa succede quando si esegue questo programma?

Flusso di esecuzione
-----------------

\index{flow of execution}
Per garantire che una funzione venga definita prima del suo primo utilizzo, è necessario che conosciate l'ordine in cui vengono eseguite le istruzioni, chiamato il *flusso di esecuzione*.  L'esecuzione inizia sempre dalla prima istruzione del programma. Le istruzioni vengono eseguite una alla volta, in ordine dall'alto verso il basso.  Le definizioni di *funzione* non alterano il flusso di esecuzione del programma, ma ricordate che le istruzioni all'interno della funzione non vengono eseguite fino a quando la funzione non viene chiamata.  Una chiamata di funzione è come una deviazione nel flusso di esecuzione. Invece di passare all'istruzione successiva, il flusso salta al corpo della funzione, esegue tutte le istruzioni contenute e quindi torna indietro per riprendere da dove era stato interrotto.  Sembra abbastanza semplice, finché non vi ricordate che una funzione può chiamarne un'altra. Mentre si trova nel mezzo di una funzione, il programma potrebbe dover eseguire le istruzioni di un'altra funzione. Ma mentre si esegue quella nuova funzione, il programma potrebbe dover eseguire un'altra funzione!  Fortunatamente Python è bravo a tenere traccia di dove si trova, quindi ogni volta che una funzione viene completata, il programma riprende da dove era stato interrotto dalla chiamata di funzione. Quando arriva alla fine del programma, questo termina.  Qual è la morale di questa sordida storia? Quando leggete un programma, non sempre volete leggerlo da cima a fondo. A volte ha più senso se seguite il flusso dell'esecuzione.

Parametri e argomenti
------------------------

\index{parameter}
\index{function parameter}
\index{argument}
\index{function argument}
Alcune delle funzioni integrate che abbiamo visto richiedono degli argomenti. Ad esempio, quando chiamate `math.sin` passate un numero come argomento. Alcune funzioni richiedono più di un argomento: `math.pow` ne prende due, la base e l'esponente.  All'interno della funzione, gli argomenti sono assegnati a variabili chiamate *parametri*. Ecco un esempio di una funzione definita dall'utente che riceve un argomento:
\index{parentheses!parameters in}


~~~~ {.python}
def print_twice(bruce):
    print(bruce)
    print(bruce)
~~~~


Questa funzione assegna l'argomento ad un parametro chiamato `bruce`. Quando viene chiamata la funzione, questa stampa due volte il valore del parametro (qualunque esso sia).  Questa funzione opera con qualsiasi valore che può essere stampato.

~~~~ {.python}
>>> print_twice('Spam')
Spam
Spam
>>> print_twice(17)
17
17
>>> import math
>>> print_twice(math.pi)
3.141592653589793
3.141592653589793
~~~~


Le stesse regole di composizione che si applicano alle funzioni integrate si applicano anche alle funzioni definite dall'utente, quindi possiamo usare qualsiasi tipo di espressione come argomento per `print_twice`:
\index{composition}


~~~~ {.python}
>>> print_twice('Spam '*4)
Spam Spam Spam Spam
Spam Spam Spam Spam
>>> print_twice(math.cos(math.pi))
-1.0
-1.0
~~~~


L'argomento viene valutato prima che la funzione venga chiamata, quindi negli esempi le espressioni `Spam '* 4` e` math.cos (math.pi) `vengono valutate solo una volta.
\index{argument}
Potete anche usare una variabile come argomento:

~~~~ {.python}
>>> michael = 'Eric, the half a bee.'
>>> print_twice(michael)
Eric, the half a bee.
Eric, the half a bee.
~~~~


Il nome della variabile che passiamo come argomento (`michael`) non ha nulla a che fare con il nome del parametro (` bruce`). Non importa quale sia il nome valore (nel chiamante); qui in `print_twice`, chiamiamo tutti `bruce`.

Funzioni produttive e funzioni vuote
-------------------------------------

\index{fruitful function}
\index{void function}
\index{function, fruitful}
\index{function, void}
Alcune delle funzioni che stiamo usando, come le funzioni matematiche, restituiscono dei risultati; per mancanza di un nome migliore, le chiamiamo *funzioni produttive*. Altre funzioni, come `print_twice`, poichè eseguono un'azione ma non restituiscono alcun valore vengono chiamate *funzioni vuote*.  Quando chiamate una funzione produttiva, quasi sempre dovete utilizzarne il risultato; ad esempio, potreste assegnarlo a una variabile o usarlo come parte di un'espressione:

~~~~ {.python}
x = math.cos(radians)
golden = (math.sqrt(5) + 1) / 2
~~~~


Quando si chiama una funzione in modalità interattiva, Python visualizza il risultato:

~~~~ {.python}
>>> math.sqrt(5)
2.23606797749979
~~~~


Ma in uno script, se si chiama una funzione produttiva e non si memorizza il risultato della funzione in una variabile, il valore di ritorno scompare nella nebbia!

~~~~ {.python}
math.sqrt(5)
~~~~


Questo script calcola la radice quadrata di 5, ma poiché non memorizza il risultato in una variabile e non mostra il risultato, non è molto utile.
\index{interactive mode}
\index{script mode}

Le funzioni vuote potrebbero visualizzare qualcosa sullo schermo o avere qualche altro effetto, ma non hanno alcun valore di ritorno. Se si tenta di assegnare il risultato a una variabile, si ottiene un valore speciale chiamato "None".
\index{None special value}
\index{special value!None}


~~~~ {.python}
>>> result = print_twice('Bing')
Bing
Bing
>>> print(result)
None
~~~~


Il valore `None` non è uguale alla stringa "None". È un valore speciale che ha un suo tipo:

~~~~ {.python}
>>> print(type(None))
<class 'NoneType'>
~~~~


Per restituire un risultato da una funzione, utilizziamo l'istruzione `return` nella nostra funzione. Ad esempio, potremmo creare una funzione molto semplice chiamata "addtwo" che unisce due numeri e restituisce un risultato.

\VerbatimInput{../code3/addtwo.py}

Quando questo script viene eseguito, l'istruzione `print` stamperà" 8 "perché la funzione `addtwo` è stata chiamata passando gli argomenti 3 e 5. All'interno della funzione, i parametri `a` e` b` erano rispettivamente 3 e 5. La funzione calcola la somma dei due numeri e la colloca nella variabile di funzione locale chiamata `added`. Quindi ha usato l'istruzione `return` per inviare il valore calcolato al codice chiamante come risultato della funzione, che è stato assegnato alla variabile `x` e quindi stampato.

Perché le funzioni?
--------------

\index{function, reasons for}
Potrebbe non essere chiaro il motivo per cui vale la pena di dividere un programma in funzioni. Ci sono diversi motivi:

- la creazione di una nuova funzione vi dà l'opportunità di dare un nome a un gruppo di istruzioni, il che facilita la lettura, la comprensione e il debug del vostro programma;
- le funzioni possono rendere un programma più piccolo, eliminando il codice ripetitivo. Successivamente, se apportate un cambiamento, dovete farlo solo in un posto;
- dividere un programma lungo in funzioni, consente di eseguire il debug delle parti una alla volta e quindi assemblarle in un insieme funzionante;
- le funzioni ben progettate sono spesso utili per molti programmi. Una volta che le scrivete e ne fate il debug, potete riutilizzarle.  Per il resto del libro, spesso useremo una definizione di funzione per spiegare un concetto. Parte della capacità di creare e utilizzare le funzioni è di avere una funzione per cogliere correttamente un'idea come "trovate il valore più piccolo in un elenco di valori". Successivamente vi mostreremo il codice che trova il valore più piccolo in un elenco di valori e ve lo presenteremo come una funzione chiamata `min`, che prende come argomento un elenco di valori e restituisce il valore più piccolo dell'elenco.  

Debug
---------

\index{debugging}
Se usate un editor di testo per scrivere i vostri script, potreste avere problemi con spazi e tabulazioni. Il modo migliore per evitare questi problemi è utilizzare esclusivamente gli spazi (senza tabulazioni). La maggior parte degli editor di testo che conoscono Python lo fanno per impostazione predefinita, ma altri no.
\index{whitespace}

Le tabulazioni e gli spazi sono generalmente invisibili, il che ne rende difficile il debug, quindi provate a trovare un editor che gestisca l'indentazione per voi.  Inoltre, non dimenticate di salvare il programma prima di eseguirlo, alcuni ambienti di sviluppo lo fanno automaticamente, ma altri no. In tal caso, il programma che state guardando nell'editor di testo non è lo stesso del programma che state utilizzando.  Il debug può richiedere molto tempo se si continua a ripetere lo stesso programma errato più e più volte!  Assicuratevi che il codice che state esaminando sia il codice che state utilizzando. Se non siete sicuri, mettete qualcosa come `print (" ciao ")` all'inizio del programma ed eseguitelo di nuovo. Se non vedete `ciao`, non state eseguendo il programma giusto!  

Glossario
--------

algoritmo
: un processo generale destinato a risolvere una categoria di problemi.
\index{algorithm}

argomento
: il valore fornito a una funzione quando questa viene chiamata. Questo valore è assegnato al parametro corrispondente nella funzione.
\index{argument}

corpo
: la sequenza di istruzioni contenute in una definizione di funzione.
\index{body}

composizione
: utilizzo di un'espressione come parte di un'espressione più grande o di un'istruzione come parte di un'istruzione più ampia.
\index{composition}

deterministico
: pertinente a un programma che, dati gli stessi input, produce lo stesso risultato ogni volta che viene eseguito.
\index{deterministic}

notazione del punto
: la sintassi per chiamare una funzione gestita da un modulo specificando il nome del modulo seguito da un punto e dal nome della funzione stessa.
\index{dot notation}

flusso di esecuzione
: l'ordine in cui le istruzioni vengono eseguite durante l'esecuzione di un programma.
\index{flow of execution}

funzione produttiva
: una funzione che restituisce un valore.
\index{fruitful function}

funzione
: sequenza di istruzioni provvista di nome che svolge alcune operazioni utili. Le funzioni possono accettare o non accettare argomenti e possono o meno produrre un risultato.
\index{function}

chiamata di funzione
: l'istruzione che esegue una funzione. É composta dal nome della funzione seguito da un elenco di argomenti.
\index{function call}

definizione di funzione
: l'istruzione che da luogo ad una nuova funzione, specificandone il nome, i parametri e le istruzioni che esegue.
\index{function definition}

oggetto funzione
: il valore creato dalla definizione di funzione. Il nome della funzione è una variabile che fa riferimento a un oggetto funzione.
\index{function definition}

header
: la prima riga di una definizione di funzione.
\index{header}

istruzione import
: un'istruzione che legge un modulo e crea un oggetto modulo.
\index{import statement}
\index{statement!import}

oggetto modulo
: il valore creato da l'istruzione `import` che fornisce accesso ai dati e al codice definiti in un modulo.
\index{module}

parametro
: un nome utilizzato all'interno di una funzione per fare riferimento al valore passato come argomento.
\index{parameter}

pseudo-casuale
: sequenza di numeri apparentemente casuali generati da un programma deterministico.
\index{pseudorandom}

valore di ritorno
: il risultato di una funzione. Se una chiamata di funzione viene utilizzata come espressione, il valore restituito è il valore dell'espressione.
\index{return value}

funzione vuota
: funzione che non restituisce alcun valore.
\index{void function}

Esercizi
---------

**Esercizio 4:** A cosa serve la parola chiave "def" in Python?

a) È gergale e significa "il codice seguente è veramente fico".\
b) Indica l'inizio di una funzione.\
c) Indica che la seguente sezione di codice indentata deve essere memorizzata per uno scopo successivo.\
d) b e c sono entrambe vere.\
e) Nessuno delle precedenti.

**Esercizio 5:** Cosa visualzzerà il seguente script Python?

~~~~ {.python}
def fred():
   print("Zap")

def jane():
   print("ABC")

jane()
fred()
jane()
~~~~


a) Zap ABC jane fred jane \
b) Zap ABC Zap \
c) ABC Zap jane \
d) ABC Zap ABC \
e) Zap Zap Zap

**Esercizio 6:** Riscrivi il calcolo della tua retribuzione con gli straordinari pagati il 50% in più creando una funzione chiamata `computepay` che richieda i due parametri `hours` e `rate`.

~~~~
Enter Hours: 45
Enter Rate: 10
Pay: 475.0
~~~~


**Esercizio 7:** Riscrivi lo script del capitolo precedente creando una funzione chiamata `computegrade` che accetta un punteggio come parametro e restituisce un voto sotto forma di stringa.

~~~~
 Score   Grade
>= 0.9     A
>= 0.8     B
>= 0.7     C
>= 0.6     D
 < 0.6     F
~~~~




~~~~
Enter score: 0.95
A
~~~~




~~~~
Enter score: perfect
Bad score
~~~~




~~~~
Enter score: 10.0
Bad score
~~~~




~~~~
Enter score: 0.75
C
~~~~




~~~~
Enter score: 0.5
F
~~~~


Prova ripetutamente lo script per testare diversi valori in input.
