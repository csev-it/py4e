
Funzioni
=========

Chiamate di funzione
--------------


\index{function call}
Quando si parla di programmazione, per *funzione* intendiamo una sequenza specifica di istruzioni a cui è stato attribuito un nome, che ha lo scopo di eseguire un'operazione o calcolo particolare. Una volta definita, è possibile "chiamare" una funzione per mezzo del suo nome.

In precedenza abbiamo già visto un esempio di una *chiamata di funzione*:

~~~~ {.python}
>>> type(32)
<class 'int'>
~~~~


in questo esempio il nome della funzione è `type` mentre il numero `32` tra parentesi è l'*argomento* della funzione. L'argomento può essere un valore o una variabile che stiamo passando alla funzione come input. 
In questo caso specifico il risultato della funzione `type` è il tipo di dato dell'argomento: <class 'int'>.

\index{parentheses!argument in}

Nel gergo informatico si dice che una funzione "accetta" un argomento e "restituisce" un *valore di ritorno*.
\index{argument}
\index{return value}

Funzioni integrate
------------------

In Python sono integrate un gran numero di funzioni utili, create per svolgere le attività più comuni, che possiamo usare senza doverle definire.
Ad esempio le funzioni `max` e `min` ci forniscono rispettivamente i valori più grandi e più piccoli di un elenco:

~~~~ {.python}
>>> max('Hello world')
'w'
>>> min('Hello world')
' '
>>>
~~~~


La funzione `max` ci indica che il "carattere più grande" nella stringa é la lettera "w" mentre `min` ci mostra che il carattere più piccolo é lo spazio.  Un'altra funzione molto utilizzata è la funzione `len` che ci dice quanti oggetti ci sono nell'argomento analizzato. Nell'esempio seguente l'argomento di `len` è una stringa e perciò viene restituito il numero di caratteri nella stringa.

~~~~ {.python}
>>> len('Hello world')
11
>>>
~~~~



Come vedremo nei prossimi capitoli queste funzioni non sono progettate per operare solo con le stringhe ma possono essere applicate su un qualsiasi insieme di valori. Voglio ricordarti che anche i nome di funzioni vanno trattati come parole riservate (ad esempio, evita di utilizzare "max" come nome di variabile).

Funzioni di conversione dei tipi di dato
-------------------------

\index{conversion!type}
\index{type conversion}
Altre funzioni integrate in Python ti permettono di convertire i valori da un tipo ad un altro: ad esempio la funzione `int` accetta qualsiasi valore e, qualora sia possibile, lo converte in un numero intero. In caso contrario si "lamenta" visualizzando un messaggio d'errore:
\index{int function}
\index{function!int}


~~~~ {.python}
>>> int('32')
32
>>> int('Hello')
ValueError: invalid literal for int() with base 10: 'Hello'
~~~~


`int` può convertire valori in virgola mobile in numeri interi eliminando semplicemente la parte frazionaria senza arrotondare il dato:

~~~~ {.python}
>>> int(3.99999)
3
>>> int(-2.3)
-2
~~~~


`float` converte numeri interi e stringhe in numeri in virgola mobile:
\index{float function}
\index{function!float}


~~~~ {.python}
>>> float(32)
32.0
>>> float('3.14159')
3.14159
~~~~


`str` converte l'argomento in una stringa:
\index{str function}
\index{function!str}


~~~~ {.python}
>>> str(32)
'32'
>>> str(3.14159)
'3.14159'
~~~~


Funzioni matematiche
--------------

\index{math function}
\index{function, math}
\index{module}
\index{module object}
Il modulo `math` di Python ti permette di eseguire la maggior parte delle più comuni funzioni matematiche. 
Essendo un modulo, va importato prima di poterlo utilizzare:

~~~~ {.python}
>>> import math
~~~~


Questa istruzione crea un *oggetto modulo* chiamato math. Tramite il comando print ti é possibile ottenerne alcune informazioni di base:

~~~~ {.python}
>>> print(math)
<module 'math' (built-in)>
~~~~


Per accedere a una delle funzioni gestite da questo modulo è necessario specificare il nome del modulo e della funzione desiderata separati da un punto. Questo particolare formato viene chiamato *notazione punto*.
\index{dot notation}


~~~~ {.python}
>>> ratio = signal_power / noise_power
>>> decibels = 10 * math.log10(ratio)

>>> radians = 0.7
>>> height = math.sin(radians)
~~~~


Nel primo esempio viene calcolato il logaritmo in base 10 del rapporto segnale/rumore. Il modulo math è dotato anche di una funzione chiamata `log` che calcola i logaritmi in base `e`.
\index{log function}
\index{function!log}
\index{sine function}
\index{radian}
\index{trigonometric function}
\index{function, trigonometric}

Nel secondo esempio é stato calcolato il seno in `radianti`. Il nome della variabile ti dovrebbe suggerire che `sin` e le altre funzioni trigonometriche (`cos`, `tan`, ecc.) accettano un argomento in radianti.
Per convertire i gradi in radianti, dovrai dividere il dato in ingresso per 360 e moltiplicarlo per $2\pi$:


~~~~ {.python}
>>> degrees = 45
>>> radians = degrees / 360.0 * 2 * math.pi
>>> math.sin(radians)
0.7071067811865476
~~~~


L'espressione `math.pi` richiama la variabile `pi` dal modulo math il cui valore è un'approssimazione di $\pi$ a circa 15 cifre.
\index{pi}

Se mastichi un po' di trigonometria, puoi controllare il risultato precedente confrontandolo con la radice quadrata di due fratto due:
\index{sqrt function}
\index{function!sqrt}


~~~~ {.python}
>>> math.sqrt(2) / 2.0
0.7071067811865476
~~~~


Numeri casuali
--------------

\index{random number}
\index{number, random}
\index{deterministic}
\index{pseudorandom}
Dato il medesimo input, la maggior parte dei programmi per computer genera sempre lo stesso output. Per tale motivo vengono detti *deterministici*. Il determinismo di solito è una cosa auspicabile poiché ci aspettiamo che lo stesso calcolo produca sempre lo medesimo risultato. Ci sono casi in cui, tuttavia, desideriamo che il computer sia imprevedibile come accade ad esempio nei giochi.

Realizzare un programma veramente non deterministico non é così semplice come potrebbe sembrare a prima vista anche se esistono modi per farlo almeno sembrare tale. Uno di questi è usare *algoritmi* che generano numeri *pseudo-casuali*. I numeri pseudo-casuali non sono veramente casuali perché sono generati da un calcolo deterministico, ma osservando solo i numeri è quasi impossibile distinguerli da quelli casuali.

\index{random module}
\index{module!random}

Il modulo `random` fornisce funzioni che generano numeri pseudo-casuali (che chiameremo semplicemente "casuali" da qui in poi).
\index{random function}
\index{function!random}

La funzione `random` restituisce un numero decimale casuale compreso tra 0.0 e 1.0 (comprendendo 0.0 ma non 1.0). Ogni volta che evochi `random`, ottieni il numero successivo di una lunga serie. Prova a far girare questo ciclo:

~~~~ {.python}
import random

for i in range(10):
    x = random.random()
    print(x)
~~~~


Questo programma ti fornirá il seguente elenco di 10 numeri casuali compresio tra 0.0 e 1.0 (1.0 escluso).

~~~~
0.11132867921152356
0.5950949227890241
0.04820265884996877
0.841003109276478
0.997914947094958
0.04842330803368111
0.7416295948208405
0.510535245390327
0.27447040171978143
0.028511805472785867
~~~~


**Esercizio 1:**: Esegui lo script precedente sul tuo sistema per vedere quali numeri otterrai. Ripeti l'operazione più volte e confroenta i risultati.

La funzione `random` è solo una delle molte funzioni che gestiscono i numeri casuali.

`randint` accetta i parametri `low` e `high` e restituisce un intero compreso tra i due (inclusi) estremi.
\index{randint function}
\index{function!randint}


~~~~ {.python}
>>> random.randint(5, 10)
5
>>> random.randint(5, 10)
9
~~~~


Tramite `choice` puoi scegliere un elemento da una sequenza casuale:
\index{choice function}
\index{function!choice}


~~~~ {.python}
>>> t = [1, 2, 3]
>>> random.choice(t)
2
>>> random.choice(t)
3
~~~~



Il modulo `random` fornisce anche funzioni per generare valori casuali da distribuzioni continue come la gaussiana, l'esponenziale, la gamma, ecc.

Aggiungere nuove funzioni
--------------------

Anche se finora abbiamo solo usato le funzioni giá presenti in Python, tieni a mente che è possibile aggiungerne di nuove.
Tramite la *definizione di funzione* puoi specificare il nome di una nuova funzione composta da una sequenza di istruzioni. Una volta definita, puoi richiamarla e riutilizzarla a piacimento all'interno del tuo programma.
\index{function}
\index{function definition}
\index{definition!function}

Ecco un esempio:

~~~~ {.python}
def print_lyrics():
    print("I'm a lumberjack, and I'm okay.")
    print('I sleep all night and I work all day.')
~~~~


`def` è la parola chiave che indica che il nome di questa funzione è `print_lyrics`. Per i nomi delle funzioni valgono le stesse regole dei nomi delle variabili: sono consentiti lettere, numeri e alcuni segni di punteggiatura ma il primo carattere non può mai essere un numero. Non puoi utilizzare una parola chiave come nome di una funzione e dovresti evitare di dare lo stesso nome ad una variabile ed una funzione.

\index{def keyword}
\index{keyword!def}
\index{argument}

Le parentesi vuote dopo il nome indicano che questa funzione non accetta argomenti. Nei capitoli seguenti ti insegnerò a costruire delle funzioni che ricevono degli argomenti come input.
\index{parentheses!empty}
\index{header}
\index{body}
\index{indentation}
\index{colon}

La prima riga della funzione è chiamata *header* mentre il resto viene chiamato *corpo*. L'header deve terminare con due punti e il corpo, che deve essere indentato per convenzione di quattro spazi, può contenere un numero qualsiasi di istruzioni.
\index{ellipses}

Se scrivi una definizione di funzione in modalità interattiva, l'interprete visualizzerà i punti di sospensione (*...*) fino a quando la definizione non sarà completa:

~~~~ {.python}
>>> def print_lyrics():
...     print("I'm a lumberjack, and I'm okay.")
...     print('I sleep all night and I work all day.')
...
~~~~


Per completare la funzione, devi inserire una riga vuota (operazione non necessaria in uno script).

La definizione di una funzione crea una variabile con lo stesso nome.

~~~~ {.python}
>>> print(print_lyrics)
<function print_lyrics at 0xb7e99e9c>
>>> print(type(print_lyrics))
<class 'function'>
~~~~


Il valore di `print_lyrics` è un *oggetto funzione*, di tipo "funzione".
\index{function object}
\index{object!function}

La sintassi per chiamare la nuova funzione è la stessa utilizzata per le funzioni integrate:

~~~~ {.python}
>>> print_lyrics()
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
~~~~


Una volta che avrai definito una funzione, potrai utilizzarla all'interno di un'altra funzione.
Ad esempio, per ripetere il ritornello precedente, potremmo scrivere una funzione chiamata `repeat_lyrics`:

~~~~ {.python}
def repeat_lyrics():
    print_lyrics()
    print_lyrics()
~~~~


Chiamando la funzione `repeat_lyrics` otterremo questo risultato:

~~~~ {.python}
>>> repeat_lyrics()
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
~~~~


Ammetto che la canzone non faccia proprio così ma non é importante per ora.

Definizioni e usi
--------------------

\index{function definition}
se mettiamo insieme i frammenti di codice della sezione precedente, dovremmo ottenere il seguente script:

\VerbatimInput{../code3/lyrics.py}

Questo script contiene due definizioni di funzione: `print_lyrics` e `repeat_lyrics` che daranno luogo inizialmente a degli oggetti funzione le cui istruzioni non generano alcun output finché non viene eseguita l'ultima riga.
\index{use before def}

Come ormai avrai capito, è necessario creare una funzione prima di poterla eseguire. In altre parole, la definizione della funzione deve essere effettuata prima della prima chiamata.

**Esercizio 2**: Sposta l'ultima riga di questo script all'inizio, in modo tale da far eseguire la chiamata della funzione prima delle due definizioni. Esegui il programma per verificare quale messaggio di errore riceverai.

**Esercizio 3**: sposta di nuovo la chiamata della funzione in fondo allo script ed inverti la posizione della definizione di `print_lyrics` e `repeat_lyrics`. Cosa succede quando esegui questo programma?

Flusso di esecuzione
-----------------

\index{flow of execution}
Per garantire che una funzione venga definita prima del suo primo utilizzo, è necessario che conosca l'ordine in cui vengono eseguite le istruzioni, il così detto *flusso di esecuzione*. 

L'esecuzione, che inizia sempre dalla prima istruzione dello script, prevede che le istruzioni vengano eseguite una alla volta, dall'alto verso il basso.

Anche se le *definizioni di funzione* non alterano il flusso di esecuzione del programma, ricorda che le istruzioni contenute nella funzione non vengono eseguite fino a quando non venga chiamata la funzione.

Dovrei pensare ad Una chiamata di funzione come una deviazione nel flusso di esecuzione. Invece di passare all'istruzione successiva, il flusso salta al corpo della funzione, esegue tutte le istruzioni contenute e quindi torna indietro per riprendere da dove era stato interrotto.

Sembra abbastanza semplice, finché non vi ricordate che una funzione può chiamarne un'altra. Mentre si trova nel mezzo di una funzione, il programma potrebbe dover eseguire le istruzioni di un'altra funzione. Ma mentre si esegue quella nuova funzione, il programma potrebbe dover eseguire un'altra funzione!

Fortunatamente Python è bravo a tenere traccia di dove si trova, quindi ogni volta che una funzione viene completata, il programma riprende da dove era stato interrotto dalla chiamata di funzione. Quando arriva alla fine del programma, questo termina. 

Qual è la morale di questa sordida storia? Quando leggete un programma, non sempre volete leggerlo da cima a fondo. A volte ha più senso se seguite il flusso dell'esecuzione.

Parametri e argomenti
------------------------

\index{parameter}
\index{function parameter}
\index{argument}
\index{function argument}
Alcune delle funzioni integrate che abbiamo visto richiedono degli argomenti. Ad esempio, quando chiamate `math.sin` passate un numero come argomento. Alcune funzioni richiedono più di un argomento: `math.pow` ne prende due, la base e l'esponente.  All'interno della funzione, gli argomenti sono assegnati a variabili chiamate *parametri*. Ecco un esempio di una funzione definita dall'utente che riceve un argomento:
\index{parentheses!parameters in}


~~~~ {.python}
def print_twice(bruce):
    print(bruce)
    print(bruce)
~~~~


Questa funzione assegna l'argomento ad un parametro chiamato `bruce`. Quando viene chiamata la funzione, questa stampa due volte il valore del parametro (qualunque esso sia).  Questa funzione opera con qualsiasi valore che può essere stampato.

~~~~ {.python}
>>> print_twice('Spam')
Spam
Spam
>>> print_twice(17)
17
17
>>> import math
>>> print_twice(math.pi)
3.141592653589793
3.141592653589793
~~~~


Le stesse regole di composizione che si applicano alle funzioni integrate si applicano anche alle funzioni definite dall'utente, quindi possiamo usare qualsiasi tipo di espressione come argomento per `print_twice`:
\index{composition}


~~~~ {.python}
>>> print_twice('Spam '*4)
Spam Spam Spam Spam
Spam Spam Spam Spam
>>> print_twice(math.cos(math.pi))
-1.0
-1.0
~~~~


L'argomento viene valutato prima che la funzione venga chiamata, quindi negli esempi le espressioni `Spam '* 4` e` math.cos (math.pi) `vengono valutate solo una volta.
\index{argument}
Potete anche usare una variabile come argomento:

~~~~ {.python}
>>> michael = 'Eric, the half a bee.'
>>> print_twice(michael)
Eric, the half a bee.
Eric, the half a bee.
~~~~


Il nome della variabile che passiamo come argomento (`michael`) non ha nulla a che fare con il nome del parametro (` bruce`). Non importa quale sia il nome valore (nel chiamante); qui in `print_twice`, chiamiamo tutti `bruce`.

Funzioni produttive e funzioni vuote
-------------------------------------

\index{fruitful function}
\index{void function}
\index{function, fruitful}
\index{function, void}
Alcune delle funzioni che stiamo usando, come le funzioni matematiche, restituiscono dei risultati; per mancanza di un nome migliore, le chiamiamo *funzioni produttive*. Altre funzioni, come `print_twice`, poichè eseguono un'azione ma non restituiscono alcun valore vengono chiamate *funzioni vuote*.  Quando chiamate una funzione produttiva, quasi sempre dovete utilizzarne il risultato; ad esempio, potreste assegnarlo a una variabile o usarlo come parte di un'espressione:

~~~~ {.python}
x = math.cos(radians)
golden = (math.sqrt(5) + 1) / 2
~~~~


Quando si chiama una funzione in modalità interattiva, Python visualizza il risultato:

~~~~ {.python}
>>> math.sqrt(5)
2.23606797749979
~~~~


Ma in uno script, se si chiama una funzione produttiva e non si memorizza il risultato della funzione in una variabile, il valore di ritorno scompare nella nebbia!

~~~~ {.python}
math.sqrt(5)
~~~~


Questo script calcola la radice quadrata di 5, ma poiché non memorizza il risultato in una variabile e non mostra il risultato, non è molto utile.
\index{interactive mode}
\index{script mode}

Le funzioni vuote potrebbero visualizzare qualcosa sullo schermo o avere qualche altro effetto, ma non hanno alcun valore di ritorno. Se si tenta di assegnare il risultato a una variabile, si ottiene un valore speciale chiamato "None".
\index{None special value}
\index{special value!None}


~~~~ {.python}
>>> result = print_twice('Bing')
Bing
Bing
>>> print(result)
None
~~~~


Il valore `None` non è uguale alla stringa "None". È un valore speciale che ha un suo tipo:

~~~~ {.python}
>>> print(type(None))
<class 'NoneType'>
~~~~


Per restituire un risultato da una funzione, utilizziamo l'istruzione `return` nella nostra funzione. Ad esempio, potremmo creare una funzione molto semplice chiamata "addtwo" che unisce due numeri e restituisce un risultato.

\VerbatimInput{../code3/addtwo.py}

Quando questo script viene eseguito, l'istruzione `print` stamperà" 8 "perché la funzione `addtwo` è stata chiamata passando gli argomenti 3 e 5. All'interno della funzione, i parametri `a` e` b` erano rispettivamente 3 e 5. La funzione calcola la somma dei due numeri e la colloca nella variabile di funzione locale chiamata `added`. Quindi ha usato l'istruzione `return` per inviare il valore calcolato al codice chiamante come risultato della funzione, che è stato assegnato alla variabile `x` e quindi stampato.

Perché le funzioni?
--------------

\index{function, reasons for}
Potrebbe non essere chiaro il motivo per cui vale la pena di dividere un programma in funzioni. Ci sono diversi motivi:

- la creazione di una nuova funzione vi dà l'opportunità di dare un nome a un gruppo di istruzioni, il che facilita la lettura, la comprensione e il debug del vostro programma;
- le funzioni possono rendere un programma più piccolo, eliminando il codice ripetitivo. Successivamente, se apportate un cambiamento, dovete farlo solo in un posto;
- dividere un programma lungo in funzioni, consente di eseguire il debug delle parti una alla volta e quindi assemblarle in un insieme funzionante;
- le funzioni ben progettate sono spesso utili per molti programmi. Una volta che le scrivete e ne fate il debug, potete riutilizzarle.  Per il resto del libro, spesso useremo una definizione di funzione per spiegare un concetto. Parte della capacità di creare e utilizzare le funzioni è di avere una funzione per cogliere correttamente un'idea come "trovate il valore più piccolo in un elenco di valori". Successivamente vi mostreremo il codice che trova il valore più piccolo in un elenco di valori e ve lo presenteremo come una funzione chiamata `min`, che prende come argomento un elenco di valori e restituisce il valore più piccolo dell'elenco.  

Debug
---------

\index{debugging}
Anche se la maggior parte degli editor di testo sono in grado di riconoscere nativamente il codice Python, se usi un editor di testo per scrivere i tuoi script, potresti avere delle noie con spazi e tabulazioni. Il modo migliore per evitare questi problemi è utilizzare esclusivamente gli spazi (senza tabulazioni).

\index{whitespace}

Spesso il debug é reso piú complicato dal fatto che le tabulazioni e spazi sono generalmente invisibili. Per mitigare questo problema  prova ad utilizzare un editor che gestisca automaticamente l'indentazione. 
Non dimenticare inoltre di salvare sempre il tuo script prima di eseguirlo, non tutti gli ambienti di sviluppo lo fanno automaticamente, in modo che il codice che stai guardando nell'editor di testo sia lo stesso che stai facendo girare. Il debug può richiedere molto più tempo se continui a ripetere più e più volte lo stesso script bacato! Assicurati sempre di eseguire l'ultima versione del codice che stai esaminando. Nel caso avessi dei dubbi, inserisci una riga simile a `print (" ciao ")` all'inizio del programma prima di eseguirlo nuovamente. Se non vedi apparire `ciao` ... non stai facendo girare la versione giusta!  

Glossario
--------

algoritmo
: un processo generale destinato a risolvere una categoria di problemi.
\index{algorithm}

argomento
: il valore fornito a una funzione quando questa viene chiamata. Questo valore è assegnato al parametro corrispondente nella funzione.
\index{argument}

corpo
: la sequenza di istruzioni contenute in una definizione di funzione.
\index{body}

composizione
: utilizzo di un'espressione come parte di un'espressione più grande o di un'istruzione come parte di un'istruzione più ampia.
\index{composition}

deterministico
: pertinente a un programma che, dati gli stessi input, produce lo stesso risultato ogni volta che viene eseguito.
\index{deterministic}

notazione del punto
: la sintassi per chiamare una funzione gestita da un modulo specificando il nome del modulo seguito da un punto e dal nome della funzione stessa.
\index{dot notation}

flusso di esecuzione
: l'ordine in cui le istruzioni vengono eseguite durante l'esecuzione di un programma.
\index{flow of execution}

funzione produttiva
: una funzione che restituisce un valore.
\index{fruitful function}

funzione
: sequenza di istruzioni provvista di nome che svolge alcune operazioni utili. Le funzioni possono accettare o non accettare argomenti e possono o meno produrre un risultato.
\index{function}

chiamata di funzione
: l'istruzione che esegue una funzione. É composta dal nome della funzione seguito da un elenco di argomenti.
\index{function call}

definizione di funzione
: l'istruzione che da luogo ad una nuova funzione, specificandone il nome, i parametri e le istruzioni che esegue.
\index{function definition}

oggetto funzione
: il valore creato dalla definizione di funzione. Il nome della funzione è una variabile che fa riferimento a un oggetto funzione.
\index{function definition}

header
: la prima riga di una definizione di funzione.
\index{header}

istruzione import
: un'istruzione che legge un modulo e crea un oggetto modulo.
\index{import statement}
\index{statement!import}

oggetto modulo
: il valore creato da l'istruzione `import` che fornisce accesso ai dati e al codice definiti in un modulo.
\index{module}

parametro
: un nome utilizzato all'interno di una funzione per fare riferimento al valore passato come argomento.
\index{parameter}

pseudo-casuale
: sequenza di numeri apparentemente casuali generati da un programma deterministico.
\index{pseudorandom}

valore di ritorno
: il risultato di una funzione. Se una chiamata di funzione viene utilizzata come espressione, il valore restituito è il valore dell'espressione.
\index{return value}

funzione vuota
: funzione che non restituisce alcun valore.
\index{void function}

Esercizi
---------

**Esercizio 4:** A cosa serve la parola chiave "def" in Python?

a) È gergale e significa "il codice seguente è veramente fico".\
b) Indica l'inizio di una funzione.\
c) Indica che la seguente sezione di codice indentata deve essere memorizzata per uno scopo successivo.\
d) b e c sono entrambe vere.\
e) Nessuno delle precedenti.

**Esercizio 5:** Cosa visualzzerà il seguente script Python?

~~~~ {.python}
def fred():
   print("Zap")

def jane():
   print("ABC")

jane()
fred()
jane()
~~~~


a) Zap ABC jane fred jane \
b) Zap ABC Zap \
c) ABC Zap jane \
d) ABC Zap ABC \
e) Zap Zap Zap

**Esercizio 6:** Riscrivi il calcolo della tua retribuzione con gli straordinari pagati il 50% in più creando una funzione chiamata `computepay` che richieda i due parametri `hours` e `rate`.

~~~~
Enter Hours: 45
Enter Rate: 10
Pay: 475.0
~~~~


**Esercizio 7:** Riscrivi lo script del capitolo precedente creando una funzione chiamata `computegrade` che accetta un punteggio come parametro e restituisce un voto sotto forma di stringa.

~~~~
 Score   Grade
>= 0.9     A
>= 0.8     B
>= 0.7     C
>= 0.6     D
 < 0.6     F
~~~~




~~~~
Enter score: 0.95
A
~~~~




~~~~
Enter score: perfect
Bad score
~~~~




~~~~
Enter score: 10.0
Bad score
~~~~




~~~~
Enter score: 0.75
C
~~~~




~~~~
Enter score: 0.5
F
~~~~


Prova ripetutamente lo script per testare diversi valori in input.
